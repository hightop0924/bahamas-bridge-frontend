{"ast":null,"code":"import { addInstrumentationHandler, getGlobalObject, logger } from '@sentry/utils';\nimport { IS_DEBUG_BUILD } from '../flags';\nvar global = getGlobalObject();\n/**\n * Default function implementing pageload and navigation transactions\n */\nexport function instrumentRoutingWithDefaults(customStartTransaction, startTransactionOnPageLoad, startTransactionOnLocationChange) {\n  if (startTransactionOnPageLoad === void 0) {\n    startTransactionOnPageLoad = true;\n  }\n  if (startTransactionOnLocationChange === void 0) {\n    startTransactionOnLocationChange = true;\n  }\n  if (!global || !global.location) {\n    IS_DEBUG_BUILD && logger.warn('Could not initialize routing instrumentation due to invalid location');\n    return;\n  }\n  var startingUrl = global.location.href;\n  var activeTransaction;\n  if (startTransactionOnPageLoad) {\n    activeTransaction = customStartTransaction({\n      name: global.location.pathname,\n      op: 'pageload'\n    });\n  }\n  if (startTransactionOnLocationChange) {\n    addInstrumentationHandler('history', function (_a) {\n      var to = _a.to,\n        from = _a.from;\n      /**\n       * This early return is there to account for some cases where a navigation transaction starts right after\n       * long-running pageload. We make sure that if `from` is undefined and a valid `startingURL` exists, we don't\n       * create an uneccessary navigation transaction.\n       *\n       * This was hard to duplicate, but this behavior stopped as soon as this fix was applied. This issue might also\n       * only be caused in certain development environments where the usage of a hot module reloader is causing\n       * errors.\n       */\n      if (from === undefined && startingUrl && startingUrl.indexOf(to) !== -1) {\n        startingUrl = undefined;\n        return;\n      }\n      if (from !== to) {\n        startingUrl = undefined;\n        if (activeTransaction) {\n          IS_DEBUG_BUILD && logger.log(\"[Tracing] Finishing current transaction with op: \" + activeTransaction.op);\n          // If there's an open transaction on the scope, we need to finish it before creating an new one.\n          activeTransaction.finish();\n        }\n        activeTransaction = customStartTransaction({\n          name: global.location.pathname,\n          op: 'navigation'\n        });\n      }\n    });\n  }\n}","map":{"version":3,"sources":["../../../../src/browser/router.ts"],"names":[],"mappings":"AACA,SAAS,yBAAyB,EAAE,eAAe,EAAE,MAAM,QAAQ,eAAe;AAElF,SAAS,cAAc,QAAQ,UAAU;AAEzC,IAAM,MAAM,GAAG,eAAe,CAAA,CAAU;AAExC;;AAEG;AACH,OAAM,SAAU,6BAA6B,CAC3C,sBAAsE,EACtE,0BAA0C,EAC1C,gCAAgD,EAAA;EADhD,IAAA,0BAAA,KAAA,KAAA,CAAA,EAAA;IAAA,0BAAA,GAAA,IAA0C;EAAA;EAC1C,IAAA,gCAAA,KAAA,KAAA,CAAA,EAAA;IAAA,gCAAA,GAAA,IAAgD;EAAA;EAEhD,IAAI,CAAC,MAAM,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE;IAC/B,cAAc,IAAI,MAAM,CAAC,IAAI,CAAC,sEAAsE,CAAC;IACrG;EACD;EAED,IAAI,WAAW,GAAuB,MAAM,CAAC,QAAQ,CAAC,IAAI;EAE1D,IAAI,iBAAgC;EACpC,IAAI,0BAA0B,EAAE;IAC9B,iBAAiB,GAAG,sBAAsB,CAAC;MAAE,IAAI,EAAE,MAAM,CAAC,QAAQ,CAAC,QAAQ;MAAE,EAAE,EAAE;IAAU,CAAE,CAAC;EAC/F;EAED,IAAI,gCAAgC,EAAE;IACpC,yBAAyB,CAAC,SAAS,EAAE,UAAC,EAA2C,EAAA;UAAzC,EAAA,GAAA,EAAA,CAAA,EAAE;QAAE,IAAA,GAAA,EAAA,CAAA,IAAI;MAC9C;;;;;;;;AAQG;MACH,IAAI,IAAI,KAAK,SAAS,IAAI,WAAW,IAAI,WAAW,CAAC,OAAO,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,EAAE;QACvE,WAAW,GAAG,SAAS;QACvB;MACD;MAED,IAAI,IAAI,KAAK,EAAE,EAAE;QACf,WAAW,GAAG,SAAS;QACvB,IAAI,iBAAiB,EAAE;UACrB,cAAc,IAAI,MAAM,CAAC,GAAG,CAAC,mDAAA,GAAoD,iBAAiB,CAAC,EAAI,CAAC;UACxG;UACA,iBAAiB,CAAC,MAAM,CAAA,CAAE;QAC3B;QACD,iBAAiB,GAAG,sBAAsB,CAAC;UAAE,IAAI,EAAE,MAAM,CAAC,QAAQ,CAAC,QAAQ;UAAE,EAAE,EAAE;QAAY,CAAE,CAAC;MACjG;IACH,CAAC,CAAC;EACH;AACH","sourcesContent":["import { Transaction, TransactionContext } from '@sentry/types';\nimport { addInstrumentationHandler, getGlobalObject, logger } from '@sentry/utils';\n\nimport { IS_DEBUG_BUILD } from '../flags';\n\nconst global = getGlobalObject<Window>();\n\n/**\n * Default function implementing pageload and navigation transactions\n */\nexport function instrumentRoutingWithDefaults<T extends Transaction>(\n  customStartTransaction: (context: TransactionContext) => T | undefined,\n  startTransactionOnPageLoad: boolean = true,\n  startTransactionOnLocationChange: boolean = true,\n): void {\n  if (!global || !global.location) {\n    IS_DEBUG_BUILD && logger.warn('Could not initialize routing instrumentation due to invalid location');\n    return;\n  }\n\n  let startingUrl: string | undefined = global.location.href;\n\n  let activeTransaction: T | undefined;\n  if (startTransactionOnPageLoad) {\n    activeTransaction = customStartTransaction({ name: global.location.pathname, op: 'pageload' });\n  }\n\n  if (startTransactionOnLocationChange) {\n    addInstrumentationHandler('history', ({ to, from }: { to: string; from?: string }) => {\n      /**\n       * This early return is there to account for some cases where a navigation transaction starts right after\n       * long-running pageload. We make sure that if `from` is undefined and a valid `startingURL` exists, we don't\n       * create an uneccessary navigation transaction.\n       *\n       * This was hard to duplicate, but this behavior stopped as soon as this fix was applied. This issue might also\n       * only be caused in certain development environments where the usage of a hot module reloader is causing\n       * errors.\n       */\n      if (from === undefined && startingUrl && startingUrl.indexOf(to) !== -1) {\n        startingUrl = undefined;\n        return;\n      }\n\n      if (from !== to) {\n        startingUrl = undefined;\n        if (activeTransaction) {\n          IS_DEBUG_BUILD && logger.log(`[Tracing] Finishing current transaction with op: ${activeTransaction.op}`);\n          // If there's an open transaction on the scope, we need to finish it before creating an new one.\n          activeTransaction.finish();\n        }\n        activeTransaction = customStartTransaction({ name: global.location.pathname, op: 'navigation' });\n      }\n    });\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}