{"ast":null,"code":"import { __read, __spread } from \"tslib\";\nimport { fill, isThenable, loadModule, logger } from '@sentry/utils';\nimport { IS_DEBUG_BUILD } from '../../flags';\nvar OPERATIONS = ['aggregate', 'bulkWrite', 'countDocuments', 'createIndex', 'createIndexes', 'deleteMany', 'deleteOne', 'distinct', 'drop', 'dropIndex', 'dropIndexes', 'estimatedDocumentCount', 'find', 'findOne', 'findOneAndDelete', 'findOneAndReplace', 'findOneAndUpdate', 'indexes', 'indexExists', 'indexInformation', 'initializeOrderedBulkOp', 'insertMany', 'insertOne', 'isCapped', 'mapReduce', 'options', 'parallelCollectionScan', 'rename', 'replaceOne', 'stats', 'updateMany', 'updateOne'];\n// All of the operations above take `options` and `callback` as their final parameters, but some of them\n// take additional parameters as well. For those operations, this is a map of\n// { <operation name>:  [<names of additional parameters>] }, as a way to know what to call the operation's\n// positional arguments when we add them to the span's `data` object later\nvar OPERATION_SIGNATURES = {\n  // aggregate intentionally not included because `pipeline` arguments are too complex to serialize well\n  // see https://github.com/getsentry/sentry-javascript/pull/3102\n  bulkWrite: ['operations'],\n  countDocuments: ['query'],\n  createIndex: ['fieldOrSpec'],\n  createIndexes: ['indexSpecs'],\n  deleteMany: ['filter'],\n  deleteOne: ['filter'],\n  distinct: ['key', 'query'],\n  dropIndex: ['indexName'],\n  find: ['query'],\n  findOne: ['query'],\n  findOneAndDelete: ['filter'],\n  findOneAndReplace: ['filter', 'replacement'],\n  findOneAndUpdate: ['filter', 'update'],\n  indexExists: ['indexes'],\n  insertMany: ['docs'],\n  insertOne: ['doc'],\n  mapReduce: ['map', 'reduce'],\n  rename: ['newName'],\n  replaceOne: ['filter', 'doc'],\n  updateMany: ['filter', 'update'],\n  updateOne: ['filter', 'update']\n};\n/** Tracing integration for mongo package */\nvar Mongo = /** @class */function () {\n  /**\n   * @inheritDoc\n   */\n  function Mongo(options) {\n    if (options === void 0) {\n      options = {};\n    }\n    /**\n     * @inheritDoc\n     */\n    this.name = Mongo.id;\n    this._operations = Array.isArray(options.operations) ? options.operations : OPERATIONS;\n    this._describeOperations = 'describeOperations' in options ? options.describeOperations : true;\n    this._useMongoose = !!options.useMongoose;\n  }\n  /**\n   * @inheritDoc\n   */\n  Mongo.prototype.setupOnce = function (_, getCurrentHub) {\n    var moduleName = this._useMongoose ? 'mongoose' : 'mongodb';\n    var pkg = loadModule(moduleName);\n    if (!pkg) {\n      IS_DEBUG_BUILD && logger.error(\"Mongo Integration was unable to require `\" + moduleName + \"` package.\");\n      return;\n    }\n    this._instrumentOperations(pkg.Collection, this._operations, getCurrentHub);\n  };\n  /**\n   * Patches original collection methods\n   */\n  Mongo.prototype._instrumentOperations = function (collection, operations, getCurrentHub) {\n    var _this = this;\n    operations.forEach(function (operation) {\n      return _this._patchOperation(collection, operation, getCurrentHub);\n    });\n  };\n  /**\n   * Patches original collection to utilize our tracing functionality\n   */\n  Mongo.prototype._patchOperation = function (collection, operation, getCurrentHub) {\n    if (!(operation in collection.prototype)) return;\n    var getSpanContext = this._getSpanContextFromOperationArguments.bind(this);\n    fill(collection.prototype, operation, function (orig) {\n      return function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n        var _a, _b, _c, _d;\n        var lastArg = args[args.length - 1];\n        var scope = getCurrentHub().getScope();\n        var parentSpan = (_a = scope) === null || _a === void 0 ? void 0 : _a.getSpan();\n        // Check if the operation was passed a callback. (mapReduce requires a different check, as\n        // its (non-callback) arguments can also be functions.)\n        if (typeof lastArg !== 'function' || operation === 'mapReduce' && args.length === 2) {\n          var span_1 = (_b = parentSpan) === null || _b === void 0 ? void 0 : _b.startChild(getSpanContext(this, operation, args));\n          var maybePromise = orig.call.apply(orig, __spread([this], args));\n          if (isThenable(maybePromise)) {\n            return maybePromise.then(function (res) {\n              var _a;\n              (_a = span_1) === null || _a === void 0 ? void 0 : _a.finish();\n              return res;\n            });\n          } else {\n            (_c = span_1) === null || _c === void 0 ? void 0 : _c.finish();\n            return maybePromise;\n          }\n        }\n        var span = (_d = parentSpan) === null || _d === void 0 ? void 0 : _d.startChild(getSpanContext(this, operation, args.slice(0, -1)));\n        return orig.call.apply(orig, __spread([this], args.slice(0, -1), [function (err, result) {\n          var _a;\n          (_a = span) === null || _a === void 0 ? void 0 : _a.finish();\n          lastArg(err, result);\n        }]));\n      };\n    });\n  };\n  /**\n   * Form a SpanContext based on the user input to a given operation.\n   */\n  Mongo.prototype._getSpanContextFromOperationArguments = function (collection, operation, args) {\n    var data = {\n      collectionName: collection.collectionName,\n      dbName: collection.dbName,\n      namespace: collection.namespace\n    };\n    var spanContext = {\n      op: 'db',\n      description: operation,\n      data: data\n    };\n    // If the operation takes no arguments besides `options` and `callback`, or if argument\n    // collection is disabled for this operation, just return early.\n    var signature = OPERATION_SIGNATURES[operation];\n    var shouldDescribe = Array.isArray(this._describeOperations) ? this._describeOperations.includes(operation) : this._describeOperations;\n    if (!signature || !shouldDescribe) {\n      return spanContext;\n    }\n    try {\n      // Special case for `mapReduce`, as the only one accepting functions as arguments.\n      if (operation === 'mapReduce') {\n        var _a = __read(args, 2),\n          map = _a[0],\n          reduce = _a[1];\n        data[signature[0]] = typeof map === 'string' ? map : map.name || '<anonymous>';\n        data[signature[1]] = typeof reduce === 'string' ? reduce : reduce.name || '<anonymous>';\n      } else {\n        for (var i = 0; i < signature.length; i++) {\n          data[signature[i]] = JSON.stringify(args[i]);\n        }\n      }\n    } catch (_oO) {\n      // no-empty\n    }\n    return spanContext;\n  };\n  /**\n   * @inheritDoc\n   */\n  Mongo.id = 'Mongo';\n  return Mongo;\n}();\nexport { Mongo };","map":{"version":3,"sources":["../../../../../src/integrations/node/mongo.ts"],"names":[],"mappings":"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","sourcesContent":["import { Hub } from '@sentry/hub';\nimport { EventProcessor, Integration, SpanContext } from '@sentry/types';\nimport { fill, isThenable, loadModule, logger } from '@sentry/utils';\n\nimport { IS_DEBUG_BUILD } from '../../flags';\n\n// This allows us to use the same array for both defaults options and the type itself.\n// (note `as const` at the end to make it a union of string literal types (i.e. \"a\" | \"b\" | ... )\n// and not just a string[])\ntype Operation = typeof OPERATIONS[number];\nconst OPERATIONS = [\n  'aggregate', // aggregate(pipeline, options, callback)\n  'bulkWrite', // bulkWrite(operations, options, callback)\n  'countDocuments', // countDocuments(query, options, callback)\n  'createIndex', // createIndex(fieldOrSpec, options, callback)\n  'createIndexes', // createIndexes(indexSpecs, options, callback)\n  'deleteMany', // deleteMany(filter, options, callback)\n  'deleteOne', // deleteOne(filter, options, callback)\n  'distinct', // distinct(key, query, options, callback)\n  'drop', // drop(options, callback)\n  'dropIndex', // dropIndex(indexName, options, callback)\n  'dropIndexes', // dropIndexes(options, callback)\n  'estimatedDocumentCount', // estimatedDocumentCount(options, callback)\n  'find', // find(query, options, callback)\n  'findOne', // findOne(query, options, callback)\n  'findOneAndDelete', // findOneAndDelete(filter, options, callback)\n  'findOneAndReplace', // findOneAndReplace(filter, replacement, options, callback)\n  'findOneAndUpdate', // findOneAndUpdate(filter, update, options, callback)\n  'indexes', // indexes(options, callback)\n  'indexExists', // indexExists(indexes, options, callback)\n  'indexInformation', // indexInformation(options, callback)\n  'initializeOrderedBulkOp', // initializeOrderedBulkOp(options, callback)\n  'insertMany', // insertMany(docs, options, callback)\n  'insertOne', // insertOne(doc, options, callback)\n  'isCapped', // isCapped(options, callback)\n  'mapReduce', // mapReduce(map, reduce, options, callback)\n  'options', // options(options, callback)\n  'parallelCollectionScan', // parallelCollectionScan(options, callback)\n  'rename', // rename(newName, options, callback)\n  'replaceOne', // replaceOne(filter, doc, options, callback)\n  'stats', // stats(options, callback)\n  'updateMany', // updateMany(filter, update, options, callback)\n  'updateOne', // updateOne(filter, update, options, callback)\n] as const;\n\n// All of the operations above take `options` and `callback` as their final parameters, but some of them\n// take additional parameters as well. For those operations, this is a map of\n// { <operation name>:  [<names of additional parameters>] }, as a way to know what to call the operation's\n// positional arguments when we add them to the span's `data` object later\nconst OPERATION_SIGNATURES: {\n  [op in Operation]?: string[];\n} = {\n  // aggregate intentionally not included because `pipeline` arguments are too complex to serialize well\n  // see https://github.com/getsentry/sentry-javascript/pull/3102\n  bulkWrite: ['operations'],\n  countDocuments: ['query'],\n  createIndex: ['fieldOrSpec'],\n  createIndexes: ['indexSpecs'],\n  deleteMany: ['filter'],\n  deleteOne: ['filter'],\n  distinct: ['key', 'query'],\n  dropIndex: ['indexName'],\n  find: ['query'],\n  findOne: ['query'],\n  findOneAndDelete: ['filter'],\n  findOneAndReplace: ['filter', 'replacement'],\n  findOneAndUpdate: ['filter', 'update'],\n  indexExists: ['indexes'],\n  insertMany: ['docs'],\n  insertOne: ['doc'],\n  mapReduce: ['map', 'reduce'],\n  rename: ['newName'],\n  replaceOne: ['filter', 'doc'],\n  updateMany: ['filter', 'update'],\n  updateOne: ['filter', 'update'],\n};\n\ninterface MongoCollection {\n  collectionName: string;\n  dbName: string;\n  namespace: string;\n  prototype: {\n    [operation in Operation]: (...args: unknown[]) => unknown;\n  };\n}\n\ninterface MongoOptions {\n  operations?: Operation[];\n  describeOperations?: boolean | Operation[];\n  useMongoose?: boolean;\n}\n\n/** Tracing integration for mongo package */\nexport class Mongo implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'Mongo';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = Mongo.id;\n\n  private _operations: Operation[];\n  private _describeOperations?: boolean | Operation[];\n  private _useMongoose: boolean;\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(options: MongoOptions = {}) {\n    this._operations = Array.isArray(options.operations) ? options.operations : (OPERATIONS as unknown as Operation[]);\n    this._describeOperations = 'describeOperations' in options ? options.describeOperations : true;\n    this._useMongoose = !!options.useMongoose;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(_: (callback: EventProcessor) => void, getCurrentHub: () => Hub): void {\n    const moduleName = this._useMongoose ? 'mongoose' : 'mongodb';\n    const pkg = loadModule<{ Collection: MongoCollection }>(moduleName);\n\n    if (!pkg) {\n      IS_DEBUG_BUILD && logger.error(`Mongo Integration was unable to require \\`${moduleName}\\` package.`);\n      return;\n    }\n\n    this._instrumentOperations(pkg.Collection, this._operations, getCurrentHub);\n  }\n\n  /**\n   * Patches original collection methods\n   */\n  private _instrumentOperations(collection: MongoCollection, operations: Operation[], getCurrentHub: () => Hub): void {\n    operations.forEach((operation: Operation) => this._patchOperation(collection, operation, getCurrentHub));\n  }\n\n  /**\n   * Patches original collection to utilize our tracing functionality\n   */\n  private _patchOperation(collection: MongoCollection, operation: Operation, getCurrentHub: () => Hub): void {\n    if (!(operation in collection.prototype)) return;\n\n    const getSpanContext = this._getSpanContextFromOperationArguments.bind(this);\n\n    fill(collection.prototype, operation, function (orig: () => void | Promise<unknown>) {\n      return function (this: unknown, ...args: unknown[]) {\n        const lastArg = args[args.length - 1];\n        const scope = getCurrentHub().getScope();\n        const parentSpan = scope?.getSpan();\n\n        // Check if the operation was passed a callback. (mapReduce requires a different check, as\n        // its (non-callback) arguments can also be functions.)\n        if (typeof lastArg !== 'function' || (operation === 'mapReduce' && args.length === 2)) {\n          const span = parentSpan?.startChild(getSpanContext(this, operation, args));\n          const maybePromise = orig.call(this, ...args) as Promise<unknown>;\n\n          if (isThenable(maybePromise)) {\n            return maybePromise.then((res: unknown) => {\n              span?.finish();\n              return res;\n            });\n          } else {\n            span?.finish();\n            return maybePromise;\n          }\n        }\n\n        const span = parentSpan?.startChild(getSpanContext(this, operation, args.slice(0, -1)));\n        return orig.call(this, ...args.slice(0, -1), function (err: Error, result: unknown) {\n          span?.finish();\n          lastArg(err, result);\n        });\n      };\n    });\n  }\n\n  /**\n   * Form a SpanContext based on the user input to a given operation.\n   */\n  private _getSpanContextFromOperationArguments(\n    collection: MongoCollection,\n    operation: Operation,\n    args: unknown[],\n  ): SpanContext {\n    const data: { [key: string]: string } = {\n      collectionName: collection.collectionName,\n      dbName: collection.dbName,\n      namespace: collection.namespace,\n    };\n    const spanContext: SpanContext = {\n      op: 'db',\n      description: operation,\n      data,\n    };\n\n    // If the operation takes no arguments besides `options` and `callback`, or if argument\n    // collection is disabled for this operation, just return early.\n    const signature = OPERATION_SIGNATURES[operation];\n    const shouldDescribe = Array.isArray(this._describeOperations)\n      ? this._describeOperations.includes(operation)\n      : this._describeOperations;\n\n    if (!signature || !shouldDescribe) {\n      return spanContext;\n    }\n\n    try {\n      // Special case for `mapReduce`, as the only one accepting functions as arguments.\n      if (operation === 'mapReduce') {\n        const [map, reduce] = args as { name?: string }[];\n        data[signature[0]] = typeof map === 'string' ? map : map.name || '<anonymous>';\n        data[signature[1]] = typeof reduce === 'string' ? reduce : reduce.name || '<anonymous>';\n      } else {\n        for (let i = 0; i < signature.length; i++) {\n          data[signature[i]] = JSON.stringify(args[i]);\n        }\n      }\n    } catch (_oO) {\n      // no-empty\n    }\n\n    return spanContext;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}