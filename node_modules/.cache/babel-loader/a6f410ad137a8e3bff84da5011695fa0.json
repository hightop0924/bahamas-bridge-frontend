{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { Severity } from '@sentry/types';\nimport { addExceptionMechanism, addExceptionTypeValue, createStackParser, extractExceptionKeysForMessage, isDOMError, isDOMException, isError, isErrorEvent, isEvent, isPlainObject, normalizeToSize, resolvedSyncPromise } from '@sentry/utils';\nimport { chromeStackParser, geckoStackParser, opera10StackParser, opera11StackParser, winjsStackParser } from './stack-parsers';\n/**\n * This function creates an exception from an TraceKitStackTrace\n * @param stacktrace TraceKitStackTrace that will be converted to an exception\n * @hidden\n */\nexport function exceptionFromError(ex) {\n  // Get the frames first since Opera can lose the stack if we touch anything else first\n  var frames = parseStackFrames(ex);\n  var exception = {\n    type: ex && ex.name,\n    value: extractMessage(ex)\n  };\n  if (frames.length) {\n    exception.stacktrace = {\n      frames: frames\n    };\n  }\n  if (exception.type === undefined && exception.value === '') {\n    exception.value = 'Unrecoverable error caught';\n  }\n  return exception;\n}\n/**\n * @hidden\n */\nexport function eventFromPlainObject(exception, syntheticException, isUnhandledRejection) {\n  var event = {\n    exception: {\n      values: [{\n        type: isEvent(exception) ? exception.constructor.name : isUnhandledRejection ? 'UnhandledRejection' : 'Error',\n        value: \"Non-Error \" + (isUnhandledRejection ? 'promise rejection' : 'exception') + \" captured with keys: \" + extractExceptionKeysForMessage(exception)\n      }]\n    },\n    extra: {\n      __serialized__: normalizeToSize(exception)\n    }\n  };\n  if (syntheticException) {\n    var frames_1 = parseStackFrames(syntheticException);\n    if (frames_1.length) {\n      event.stacktrace = {\n        frames: frames_1\n      };\n    }\n  }\n  return event;\n}\n/**\n * @hidden\n */\nexport function eventFromError(ex) {\n  return {\n    exception: {\n      values: [exceptionFromError(ex)]\n    }\n  };\n}\n/** Parses stack frames from an error */\nexport function parseStackFrames(ex) {\n  // Access and store the stacktrace property before doing ANYTHING\n  // else to it because Opera is not very good at providing it\n  // reliably in other circumstances.\n  var stacktrace = ex.stacktrace || ex.stack || '';\n  var popSize = getPopSize(ex);\n  try {\n    return createStackParser(opera10StackParser, opera11StackParser, chromeStackParser, winjsStackParser, geckoStackParser)(stacktrace, popSize);\n  } catch (e) {\n    // no-empty\n  }\n  return [];\n}\n// Based on our own mapping pattern - https://github.com/getsentry/sentry/blob/9f08305e09866c8bd6d0c24f5b0aabdd7dd6c59c/src/sentry/lang/javascript/errormapping.py#L83-L108\nvar reactMinifiedRegexp = /Minified React error #\\d+;/i;\nfunction getPopSize(ex) {\n  if (ex) {\n    if (typeof ex.framesToPop === 'number') {\n      return ex.framesToPop;\n    }\n    if (reactMinifiedRegexp.test(ex.message)) {\n      return 1;\n    }\n  }\n  return 0;\n}\n/**\n * There are cases where stacktrace.message is an Event object\n * https://github.com/getsentry/sentry-javascript/issues/1949\n * In this specific case we try to extract stacktrace.message.error.message\n */\nfunction extractMessage(ex) {\n  var message = ex && ex.message;\n  if (!message) {\n    return 'No error message';\n  }\n  if (message.error && typeof message.error.message === 'string') {\n    return message.error.message;\n  }\n  return message;\n}\n/**\n * Creates an {@link Event} from all inputs to `captureException` and non-primitive inputs to `captureMessage`.\n * @hidden\n */\nexport function eventFromException(exception, hint, attachStacktrace) {\n  var syntheticException = hint && hint.syntheticException || undefined;\n  var event = eventFromUnknownInput(exception, syntheticException, attachStacktrace);\n  addExceptionMechanism(event); // defaults to { type: 'generic', handled: true }\n  event.level = Severity.Error;\n  if (hint && hint.event_id) {\n    event.event_id = hint.event_id;\n  }\n  return resolvedSyncPromise(event);\n}\n/**\n * Builds and Event from a Message\n * @hidden\n */\nexport function eventFromMessage(message, level, hint, attachStacktrace) {\n  if (level === void 0) {\n    level = Severity.Info;\n  }\n  var syntheticException = hint && hint.syntheticException || undefined;\n  var event = eventFromString(message, syntheticException, attachStacktrace);\n  event.level = level;\n  if (hint && hint.event_id) {\n    event.event_id = hint.event_id;\n  }\n  return resolvedSyncPromise(event);\n}\n/**\n * @hidden\n */\nexport function eventFromUnknownInput(exception, syntheticException, attachStacktrace, isUnhandledRejection) {\n  var event;\n  if (isErrorEvent(exception) && exception.error) {\n    // If it is an ErrorEvent with `error` property, extract it to get actual Error\n    var errorEvent = exception;\n    return eventFromError(errorEvent.error);\n  }\n  // If it is a `DOMError` (which is a legacy API, but still supported in some browsers) then we just extract the name\n  // and message, as it doesn't provide anything else. According to the spec, all `DOMExceptions` should also be\n  // `Error`s, but that's not the case in IE11, so in that case we treat it the same as we do a `DOMError`.\n  //\n  // https://developer.mozilla.org/en-US/docs/Web/API/DOMError\n  // https://developer.mozilla.org/en-US/docs/Web/API/DOMException\n  // https://webidl.spec.whatwg.org/#es-DOMException-specialness\n  if (isDOMError(exception) || isDOMException(exception)) {\n    var domException = exception;\n    if ('stack' in exception) {\n      event = eventFromError(exception);\n    } else {\n      var name_1 = domException.name || (isDOMError(domException) ? 'DOMError' : 'DOMException');\n      var message = domException.message ? name_1 + \": \" + domException.message : name_1;\n      event = eventFromString(message, syntheticException, attachStacktrace);\n      addExceptionTypeValue(event, message);\n    }\n    if ('code' in domException) {\n      event.tags = __assign(__assign({}, event.tags), {\n        'DOMException.code': \"\" + domException.code\n      });\n    }\n    return event;\n  }\n  if (isError(exception)) {\n    // we have a real Error object, do nothing\n    return eventFromError(exception);\n  }\n  if (isPlainObject(exception) || isEvent(exception)) {\n    // If it's a plain object or an instance of `Event` (the built-in JS kind, not this SDK's `Event` type), serialize\n    // it manually. This will allow us to group events based on top-level keys which is much better than creating a new\n    // group on any key/value change.\n    var objectException = exception;\n    event = eventFromPlainObject(objectException, syntheticException, isUnhandledRejection);\n    addExceptionMechanism(event, {\n      synthetic: true\n    });\n    return event;\n  }\n  // If none of previous checks were valid, then it means that it's not:\n  // - an instance of DOMError\n  // - an instance of DOMException\n  // - an instance of Event\n  // - an instance of Error\n  // - a valid ErrorEvent (one with an error property)\n  // - a plain Object\n  //\n  // So bail out and capture it as a simple message:\n  event = eventFromString(exception, syntheticException, attachStacktrace);\n  addExceptionTypeValue(event, \"\" + exception, undefined);\n  addExceptionMechanism(event, {\n    synthetic: true\n  });\n  return event;\n}\n/**\n * @hidden\n */\nexport function eventFromString(input, syntheticException, attachStacktrace) {\n  var event = {\n    message: input\n  };\n  if (attachStacktrace && syntheticException) {\n    var frames_2 = parseStackFrames(syntheticException);\n    if (frames_2.length) {\n      event.stacktrace = {\n        frames: frames_2\n      };\n    }\n  }\n  return event;\n}","map":{"version":3,"sources":["../../../src/eventbuilder.ts"],"names":[],"mappings":"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","sourcesContent":["import { Event, EventHint, Exception, Severity, StackFrame } from '@sentry/types';\nimport {\n  addExceptionMechanism,\n  addExceptionTypeValue,\n  createStackParser,\n  extractExceptionKeysForMessage,\n  isDOMError,\n  isDOMException,\n  isError,\n  isErrorEvent,\n  isEvent,\n  isPlainObject,\n  normalizeToSize,\n  resolvedSyncPromise,\n} from '@sentry/utils';\n\nimport {\n  chromeStackParser,\n  geckoStackParser,\n  opera10StackParser,\n  opera11StackParser,\n  winjsStackParser,\n} from './stack-parsers';\n\n/**\n * This function creates an exception from an TraceKitStackTrace\n * @param stacktrace TraceKitStackTrace that will be converted to an exception\n * @hidden\n */\nexport function exceptionFromError(ex: Error): Exception {\n  // Get the frames first since Opera can lose the stack if we touch anything else first\n  const frames = parseStackFrames(ex);\n\n  const exception: Exception = {\n    type: ex && ex.name,\n    value: extractMessage(ex),\n  };\n\n  if (frames.length) {\n    exception.stacktrace = { frames };\n  }\n\n  if (exception.type === undefined && exception.value === '') {\n    exception.value = 'Unrecoverable error caught';\n  }\n\n  return exception;\n}\n\n/**\n * @hidden\n */\nexport function eventFromPlainObject(\n  exception: Record<string, unknown>,\n  syntheticException?: Error,\n  isUnhandledRejection?: boolean,\n): Event {\n  const event: Event = {\n    exception: {\n      values: [\n        {\n          type: isEvent(exception) ? exception.constructor.name : isUnhandledRejection ? 'UnhandledRejection' : 'Error',\n          value: `Non-Error ${\n            isUnhandledRejection ? 'promise rejection' : 'exception'\n          } captured with keys: ${extractExceptionKeysForMessage(exception)}`,\n        },\n      ],\n    },\n    extra: {\n      __serialized__: normalizeToSize(exception),\n    },\n  };\n\n  if (syntheticException) {\n    const frames = parseStackFrames(syntheticException);\n    if (frames.length) {\n      event.stacktrace = { frames };\n    }\n  }\n\n  return event;\n}\n\n/**\n * @hidden\n */\nexport function eventFromError(ex: Error): Event {\n  return {\n    exception: {\n      values: [exceptionFromError(ex)],\n    },\n  };\n}\n\n/** Parses stack frames from an error */\nexport function parseStackFrames(ex: Error & { framesToPop?: number; stacktrace?: string }): StackFrame[] {\n  // Access and store the stacktrace property before doing ANYTHING\n  // else to it because Opera is not very good at providing it\n  // reliably in other circumstances.\n  const stacktrace = ex.stacktrace || ex.stack || '';\n\n  const popSize = getPopSize(ex);\n\n  try {\n    return createStackParser(\n      opera10StackParser,\n      opera11StackParser,\n      chromeStackParser,\n      winjsStackParser,\n      geckoStackParser,\n    )(stacktrace, popSize);\n  } catch (e) {\n    // no-empty\n  }\n\n  return [];\n}\n\n// Based on our own mapping pattern - https://github.com/getsentry/sentry/blob/9f08305e09866c8bd6d0c24f5b0aabdd7dd6c59c/src/sentry/lang/javascript/errormapping.py#L83-L108\nconst reactMinifiedRegexp = /Minified React error #\\d+;/i;\n\nfunction getPopSize(ex: Error & { framesToPop?: number }): number {\n  if (ex) {\n    if (typeof ex.framesToPop === 'number') {\n      return ex.framesToPop;\n    }\n\n    if (reactMinifiedRegexp.test(ex.message)) {\n      return 1;\n    }\n  }\n\n  return 0;\n}\n\n/**\n * There are cases where stacktrace.message is an Event object\n * https://github.com/getsentry/sentry-javascript/issues/1949\n * In this specific case we try to extract stacktrace.message.error.message\n */\nfunction extractMessage(ex: Error & { message: { error?: Error } }): string {\n  const message = ex && ex.message;\n  if (!message) {\n    return 'No error message';\n  }\n  if (message.error && typeof message.error.message === 'string') {\n    return message.error.message;\n  }\n  return message;\n}\n\n/**\n * Creates an {@link Event} from all inputs to `captureException` and non-primitive inputs to `captureMessage`.\n * @hidden\n */\nexport function eventFromException(\n  exception: unknown,\n  hint?: EventHint,\n  attachStacktrace?: boolean,\n): PromiseLike<Event> {\n  const syntheticException = (hint && hint.syntheticException) || undefined;\n  const event = eventFromUnknownInput(exception, syntheticException, attachStacktrace);\n  addExceptionMechanism(event); // defaults to { type: 'generic', handled: true }\n  event.level = Severity.Error;\n  if (hint && hint.event_id) {\n    event.event_id = hint.event_id;\n  }\n  return resolvedSyncPromise(event);\n}\n\n/**\n * Builds and Event from a Message\n * @hidden\n */\nexport function eventFromMessage(\n  message: string,\n  level: Severity = Severity.Info,\n  hint?: EventHint,\n  attachStacktrace?: boolean,\n): PromiseLike<Event> {\n  const syntheticException = (hint && hint.syntheticException) || undefined;\n  const event = eventFromString(message, syntheticException, attachStacktrace);\n  event.level = level;\n  if (hint && hint.event_id) {\n    event.event_id = hint.event_id;\n  }\n  return resolvedSyncPromise(event);\n}\n\n/**\n * @hidden\n */\nexport function eventFromUnknownInput(\n  exception: unknown,\n  syntheticException?: Error,\n  attachStacktrace?: boolean,\n  isUnhandledRejection?: boolean,\n): Event {\n  let event: Event;\n\n  if (isErrorEvent(exception as ErrorEvent) && (exception as ErrorEvent).error) {\n    // If it is an ErrorEvent with `error` property, extract it to get actual Error\n    const errorEvent = exception as ErrorEvent;\n    return eventFromError(errorEvent.error as Error);\n  }\n\n  // If it is a `DOMError` (which is a legacy API, but still supported in some browsers) then we just extract the name\n  // and message, as it doesn't provide anything else. According to the spec, all `DOMExceptions` should also be\n  // `Error`s, but that's not the case in IE11, so in that case we treat it the same as we do a `DOMError`.\n  //\n  // https://developer.mozilla.org/en-US/docs/Web/API/DOMError\n  // https://developer.mozilla.org/en-US/docs/Web/API/DOMException\n  // https://webidl.spec.whatwg.org/#es-DOMException-specialness\n  if (isDOMError(exception as DOMError) || isDOMException(exception as DOMException)) {\n    const domException = exception as DOMException;\n\n    if ('stack' in (exception as Error)) {\n      event = eventFromError(exception as Error);\n    } else {\n      const name = domException.name || (isDOMError(domException) ? 'DOMError' : 'DOMException');\n      const message = domException.message ? `${name}: ${domException.message}` : name;\n      event = eventFromString(message, syntheticException, attachStacktrace);\n      addExceptionTypeValue(event, message);\n    }\n    if ('code' in domException) {\n      event.tags = { ...event.tags, 'DOMException.code': `${domException.code}` };\n    }\n\n    return event;\n  }\n  if (isError(exception)) {\n    // we have a real Error object, do nothing\n    return eventFromError(exception);\n  }\n  if (isPlainObject(exception) || isEvent(exception)) {\n    // If it's a plain object or an instance of `Event` (the built-in JS kind, not this SDK's `Event` type), serialize\n    // it manually. This will allow us to group events based on top-level keys which is much better than creating a new\n    // group on any key/value change.\n    const objectException = exception as Record<string, unknown>;\n    event = eventFromPlainObject(objectException, syntheticException, isUnhandledRejection);\n    addExceptionMechanism(event, {\n      synthetic: true,\n    });\n    return event;\n  }\n\n  // If none of previous checks were valid, then it means that it's not:\n  // - an instance of DOMError\n  // - an instance of DOMException\n  // - an instance of Event\n  // - an instance of Error\n  // - a valid ErrorEvent (one with an error property)\n  // - a plain Object\n  //\n  // So bail out and capture it as a simple message:\n  event = eventFromString(exception as string, syntheticException, attachStacktrace);\n  addExceptionTypeValue(event, `${exception}`, undefined);\n  addExceptionMechanism(event, {\n    synthetic: true,\n  });\n\n  return event;\n}\n\n/**\n * @hidden\n */\nexport function eventFromString(input: string, syntheticException?: Error, attachStacktrace?: boolean): Event {\n  const event: Event = {\n    message: input,\n  };\n\n  if (attachStacktrace && syntheticException) {\n    const frames = parseStackFrames(syntheticException);\n    if (frames.length) {\n      event.stacktrace = { frames };\n    }\n  }\n\n  return event;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}