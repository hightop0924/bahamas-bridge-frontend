{"ast":null,"code":"import { Contract, utils } from 'ethers';\nimport { logError } from 'lib/helpers';\nimport { NOT_ENOUGH_COLLECTED_SIGNATURES } from './message';\nexport const TOKENS_CLAIMED = 'Tokens already claimed';\nexport const fetchConfirmations = async (address, ethersProvider) => {\n  const abi = ['function requiredBlockConfirmations() view returns (uint256)'];\n  const ambContract = new Contract(address, abi, ethersProvider);\n  const requiredConfirmations = await ambContract.requiredBlockConfirmations().catch(blockConfirmationsError => logError({\n    blockConfirmationsError\n  }));\n  return parseInt(requiredConfirmations, 10);\n};\nexport const fetchAmbVersion = async (address, ethersProvider) => {\n  if (!ethersProvider) {\n    return {\n      major: 0,\n      minor: 0,\n      patch: 0\n    };\n  }\n  const abi = ['function getBridgeInterfacesVersion() external pure returns (uint64, uint64, uint64)'];\n  const ambContract = new Contract(address, abi, ethersProvider);\n  const ambVersion = await ambContract.getBridgeInterfacesVersion().catch(versionError => logError({\n    versionError\n  }));\n  return ambVersion.map(v => v.toNumber()).join('.');\n};\nfunction strip0x(input) {\n  return input.replace(/^0x/, '');\n}\nfunction signatureToVRS(rawSignature) {\n  const signature = strip0x(rawSignature);\n  const v = signature.substr(64 * 2);\n  const r = signature.substr(0, 32 * 2);\n  const s = signature.substr(32 * 2, 32 * 2);\n  return {\n    v,\n    r,\n    s\n  };\n}\nfunction packSignatures(array) {\n  const length = strip0x(utils.hexValue(array.length));\n  const msgLength = length.length === 1 ? `0${length}` : length;\n  let v = '';\n  let r = '';\n  let s = '';\n  array.forEach(e => {\n    v = v.concat(e.v);\n    r = r.concat(e.r);\n    s = s.concat(e.s);\n  });\n  return `0x${msgLength}${v}${r}${s}`;\n}\nconst REVERT_ERROR_CODES = ['-32000', '-32016', 'UNPREDICTABLE_GAS_LIMIT', 'CALL_EXCEPTION'];\nexport const isRevertedError = error => {\n  var _error$error, _error$error2;\n  return REVERT_ERROR_CODES.includes((error === null || error === void 0 ? void 0 : error.code) && (error === null || error === void 0 ? void 0 : error.code.toString())) || REVERT_ERROR_CODES.includes((error === null || error === void 0 ? void 0 : (_error$error = error.error) === null || _error$error === void 0 ? void 0 : _error$error.code) && (error === null || error === void 0 ? void 0 : (_error$error2 = error.error) === null || _error$error2 === void 0 ? void 0 : _error$error2.code.toString()));\n};\nexport const executeSignatures = async (ethersProvider, address, version, {\n  messageData,\n  signatures\n}) => {\n  const abi = ['function executeSignatures(bytes messageData, bytes signatures) external', 'function safeExecuteSignaturesWithAutoGasLimit(bytes _data, bytes _signatures) external'];\n  const ambContract = new Contract(address, abi, ethersProvider.getSigner());\n  let executeSignaturesFunc = ambContract.executeSignatures;\n  if (version > '5.6.0') {\n    executeSignaturesFunc = ambContract.safeExecuteSignaturesWithAutoGasLimit;\n  }\n  if (!signatures || signatures.length === 0) {\n    throw new Error(NOT_ENOUGH_COLLECTED_SIGNATURES);\n  }\n  try {\n    const signs = packSignatures(signatures.map(s => signatureToVRS(s)));\n    const tx = await executeSignaturesFunc(messageData, signs);\n    return tx;\n  } catch (error) {\n    if (isRevertedError(error)) {\n      throw new Error(TOKENS_CLAIMED);\n    } else {\n      throw error;\n    }\n  }\n};","map":{"version":3,"names":["Contract","utils","logError","NOT_ENOUGH_COLLECTED_SIGNATURES","TOKENS_CLAIMED","fetchConfirmations","address","ethersProvider","abi","ambContract","requiredConfirmations","requiredBlockConfirmations","catch","blockConfirmationsError","parseInt","fetchAmbVersion","major","minor","patch","ambVersion","getBridgeInterfacesVersion","versionError","map","v","toNumber","join","strip0x","input","replace","signatureToVRS","rawSignature","signature","substr","r","s","packSignatures","array","length","hexValue","msgLength","forEach","e","concat","REVERT_ERROR_CODES","isRevertedError","error","_error$error","_error$error2","includes","code","toString","executeSignatures","version","messageData","signatures","getSigner","executeSignaturesFunc","safeExecuteSignaturesWithAutoGasLimit","Error","signs","tx"],"sources":["/home/hightop/bahamas_bridge/omnibridge-ui/packages/dapp/src/lib/amb.js"],"sourcesContent":["import { Contract, utils } from 'ethers';\nimport { logError } from 'lib/helpers';\n\nimport { NOT_ENOUGH_COLLECTED_SIGNATURES } from './message';\n\nexport const TOKENS_CLAIMED = 'Tokens already claimed';\n\nexport const fetchConfirmations = async (address, ethersProvider) => {\n  const abi = ['function requiredBlockConfirmations() view returns (uint256)'];\n  const ambContract = new Contract(address, abi, ethersProvider);\n  const requiredConfirmations = await ambContract\n    .requiredBlockConfirmations()\n    .catch(blockConfirmationsError => logError({ blockConfirmationsError }));\n  return parseInt(requiredConfirmations, 10);\n};\n\nexport const fetchAmbVersion = async (address, ethersProvider) => {\n  if (!ethersProvider) {\n    return { major: 0, minor: 0, patch: 0 };\n  }\n  const abi = [\n    'function getBridgeInterfacesVersion() external pure returns (uint64, uint64, uint64)',\n  ];\n  const ambContract = new Contract(address, abi, ethersProvider);\n  const ambVersion = await ambContract\n    .getBridgeInterfacesVersion()\n    .catch(versionError => logError({ versionError }));\n  return ambVersion.map(v => v.toNumber()).join('.');\n};\n\nfunction strip0x(input) {\n  return input.replace(/^0x/, '');\n}\n\nfunction signatureToVRS(rawSignature) {\n  const signature = strip0x(rawSignature);\n  const v = signature.substr(64 * 2);\n  const r = signature.substr(0, 32 * 2);\n  const s = signature.substr(32 * 2, 32 * 2);\n  return { v, r, s };\n}\n\nfunction packSignatures(array) {\n  const length = strip0x(utils.hexValue(array.length));\n  const msgLength = length.length === 1 ? `0${length}` : length;\n  let v = '';\n  let r = '';\n  let s = '';\n  array.forEach(e => {\n    v = v.concat(e.v);\n    r = r.concat(e.r);\n    s = s.concat(e.s);\n  });\n  return `0x${msgLength}${v}${r}${s}`;\n}\n\nconst REVERT_ERROR_CODES = [\n  '-32000',\n  '-32016',\n  'UNPREDICTABLE_GAS_LIMIT',\n  'CALL_EXCEPTION',\n];\n\nexport const isRevertedError = error =>\n  REVERT_ERROR_CODES.includes(error?.code && error?.code.toString()) ||\n  REVERT_ERROR_CODES.includes(\n    error?.error?.code && error?.error?.code.toString(),\n  );\n\nexport const executeSignatures = async (\n  ethersProvider,\n  address,\n  version,\n  { messageData, signatures },\n) => {\n  const abi = [\n    'function executeSignatures(bytes messageData, bytes signatures) external',\n    'function safeExecuteSignaturesWithAutoGasLimit(bytes _data, bytes _signatures) external',\n  ];\n  const ambContract = new Contract(address, abi, ethersProvider.getSigner());\n\n  let executeSignaturesFunc = ambContract.executeSignatures;\n  if (version > '5.6.0') {\n    executeSignaturesFunc = ambContract.safeExecuteSignaturesWithAutoGasLimit;\n  }\n\n  if (!signatures || signatures.length === 0) {\n    throw new Error(NOT_ENOUGH_COLLECTED_SIGNATURES);\n  }\n\n  try {\n    const signs = packSignatures(signatures.map(s => signatureToVRS(s)));\n    const tx = await executeSignaturesFunc(messageData, signs);\n    return tx;\n  } catch (error) {\n    if (isRevertedError(error)) {\n      throw new Error(TOKENS_CLAIMED);\n    } else {\n      throw error;\n    }\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}