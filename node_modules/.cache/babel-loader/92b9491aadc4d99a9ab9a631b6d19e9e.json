{"ast":null,"code":"import { BigNumber, utils } from 'ethers';\nimport { getAddress } from 'ethers/lib/utils';\nimport { ADDRESS_ZERO, chainUrls, defaultTokensUrl, LOCAL_STORAGE_KEYS, nativeCurrencies, nativeCurrencyMediators, networkCurrencies, networkLabels, networkNames } from 'lib/constants';\nimport { BSC_XDAI_BRIDGE, defaultTokens, ETH_BSC_BRIDGE, ETH_XDAI_BRIDGE, KOVAN_SOKOL_BRIDGE, networks, POA_XDAI_BRIDGE } from 'lib/networks';\nimport { getOverriddenMediator, isOverridden } from './overrides';\nexport const getWalletProviderName = provider => {\n  var _provider$connection;\n  return (provider === null || provider === void 0 ? void 0 : (_provider$connection = provider.connection) === null || _provider$connection === void 0 ? void 0 : _provider$connection.url) || null;\n};\nexport const getNativeCurrency = chainId => nativeCurrencies[chainId || 1];\nexport const getNetworkName = chainId => networkNames[chainId] || 'Unknown Network';\nexport const getNetworkLabel = chainId => networkLabels[chainId] || 'Unknown';\nexport const getNetworkCurrency = chainId => networkCurrencies[chainId] || {\n  name: 'Unknown',\n  symbol: 'Unknown'\n};\nexport const getRPCUrl = (chainId, returnAsArray = false) => returnAsArray ? chainUrls[chainId || 1].rpc : chainUrls[chainId || 1].rpc[0];\nexport const getExplorerUrl = chainId => (chainUrls[chainId] || chainUrls[1]).explorer;\nexport const getTokenListUrl = chainId => defaultTokensUrl[chainId] || defaultTokensUrl[1];\nexport const removeElement = (array, index) => {\n  const cloneArr = [...array];\n  cloneArr.splice(index, 1);\n  return cloneArr;\n};\nexport const uniqueTokens = list => {\n  const seen = {};\n  return list.filter(token => {\n    const {\n      address\n    } = token;\n    const lowerCaseAddress = address.toLowerCase();\n    const isDuplicate = Object.prototype.hasOwnProperty.call(seen, lowerCaseAddress) ? false : seen[lowerCaseAddress] = true;\n    return isDuplicate;\n  });\n};\nexport const formatValue = (num, dec) => {\n  var _splitStr$;\n  const str = utils.formatUnits(num, dec);\n  const splitStr = str.split('.');\n  const beforeDecimal = splitStr[0];\n  const afterDecimal = `${((_splitStr$ = splitStr[1]) !== null && _splitStr$ !== void 0 ? _splitStr$ : '').slice(0, 4)}0000`;\n  const finalNum = Number(`${beforeDecimal}.${afterDecimal}`);\n  return finalNum.toLocaleString('en-US', {\n    maximumFractionDigits: 4,\n    minimumFractionDigits: 1\n  });\n};\nexport const formatUnitsReadable = num => {\n  const thresh = 1000;\n  if (Math.abs(num) < thresh) {\n    return num.toLocaleString('en-US', {\n      maximumFractionDigits: 4,\n      minimumFractionDigits: 1\n    });\n  }\n  const units = ['K', 'M', 'B', 'T'];\n  let u = -1;\n  do {\n    // eslint-disable-next-line no-param-reassign\n    num /= thresh;\n    u += 1;\n  } while (Math.abs(num) >= thresh && u < units.length - 1);\n  return num.toLocaleString('en-US', {\n    maximumFractionDigits: 2\n  }) + units[u];\n};\nexport const formatValueForLimits = (num, dec) => {\n  var _splitStr$2;\n  const str = utils.formatUnits(num, dec);\n  const splitStr = str.split('.');\n  const beforeDecimal = splitStr[0];\n  const afterDecimal = `${((_splitStr$2 = splitStr[1]) !== null && _splitStr$2 !== void 0 ? _splitStr$2 : '').slice(0, 4)}0000`;\n  if (Number(beforeDecimal) > 0) {\n    const finalNum = Number(`${beforeDecimal}.${afterDecimal}`);\n    return formatUnitsReadable(finalNum);\n  }\n  return str;\n};\nexport const parseValue = (num, dec) => {\n  if (!num || isNaN(Number(num))) {\n    return BigNumber.from(0);\n  }\n  return utils.parseUnits(num, dec);\n};\nexport const uriToHttp = uri => {\n  var _uri$match, _uri$match2;\n  const protocol = uri.split(':')[0].toLowerCase();\n  const hash = (_uri$match = uri.match(/^ipfs:(\\/\\/)?(.*)$/i)) === null || _uri$match === void 0 ? void 0 : _uri$match[2];\n  const name = (_uri$match2 = uri.match(/^ipns:(\\/\\/)?(.*)$/i)) === null || _uri$match2 === void 0 ? void 0 : _uri$match2[2];\n  switch (protocol) {\n    case 'https':\n      return [uri];\n    case 'http':\n      return [`https${uri.substr(4)}`, uri];\n    case 'ipfs':\n      return [`https://cloudflare-ipfs.com/ipfs/${hash}/`, `https://ipfs.io/ipfs/${hash}/`];\n    case 'ipns':\n      return [`https://cloudflare-ipfs.com/ipns/${name}/`, `https://ipfs.io/ipns/${name}/`];\n    default:\n      return [];\n  }\n};\nexport const fetchQueryParams = search => {\n  if (!search || !search.trim().length) return null;\n  return search.replace('?', '').split(/&/g).reduce((acc, keyValuePair) => {\n    const [key, value] = keyValuePair.split('=');\n    acc[key] = value;\n    return acc;\n  }, {});\n};\nexport const getAccountString = address => {\n  const account = getAddress(address);\n  const len = account.length;\n  return `0x${account.substr(2, 4)}...${account.substr(len - 4, len - 1)}`;\n};\nexport const logError = (...args) => {\n  // eslint-disable-next-line no-console\n  console.error(...args);\n};\nexport const logDebug = (...args) => {\n  if (process.env.REACT_APP_DEBUG_LOGS === 'true') {\n    // eslint-disable-next-line no-console\n    console.log(...args);\n  }\n};\nconst {\n  XDAI_RPC_URL,\n  POA_RPC_URL,\n  MAINNET_RPC_URL,\n  BSC_RPC_URL,\n  KOVAN_RPC_URL,\n  SOKOL_RPC_URL\n} = LOCAL_STORAGE_KEYS;\nexport const getRPCKeys = bridgeDirection => {\n  switch (bridgeDirection) {\n    case ETH_XDAI_BRIDGE:\n      return {\n        homeRPCKey: XDAI_RPC_URL,\n        foreignRPCKey: MAINNET_RPC_URL\n      };\n    case BSC_XDAI_BRIDGE:\n      return {\n        homeRPCKey: XDAI_RPC_URL,\n        foreignRPCKey: BSC_RPC_URL\n      };\n    case POA_XDAI_BRIDGE:\n      return {\n        homeRPCKey: XDAI_RPC_URL,\n        foreignRPCKey: POA_RPC_URL\n      };\n    case ETH_BSC_BRIDGE:\n      return {\n        homeRPCKey: BSC_RPC_URL,\n        foreignRPCKey: MAINNET_RPC_URL\n      };\n    case KOVAN_SOKOL_BRIDGE:\n    default:\n      return {\n        homeRPCKey: SOKOL_RPC_URL,\n        foreignRPCKey: KOVAN_RPC_URL\n      };\n  }\n};\nexport const getHelperContract = chainId => nativeCurrencyMediators[chainId || 1];\nexport const getMediatorAddressWithoutOverride = (bridgeDirection, chainId) => {\n  if (!bridgeDirection || !chainId) return null;\n  const {\n    homeChainId,\n    homeMediatorAddress,\n    foreignMediatorAddress\n  } = networks[bridgeDirection];\n  return homeChainId === chainId ? homeMediatorAddress.toLowerCase() : foreignMediatorAddress.toLowerCase();\n};\nexport const getMediatorAddress = (bridgeDirection, token) => {\n  if (!token || !token.chainId || !token.address) return null;\n  if (isOverridden(bridgeDirection, token)) {\n    return getOverriddenMediator(bridgeDirection, token);\n  }\n  return getMediatorAddressWithoutOverride(bridgeDirection, token.chainId);\n};\nexport const truncateText = (text, maxLength) => {\n  let truncated = text;\n  if (truncated.length > maxLength - 3) {\n    truncated = `${truncated.substr(0, maxLength - 3)}...`;\n  }\n  return truncated;\n};\nexport const getDefaultToken = (bridgeDirection, chainId) => {\n  const label = getNetworkLabel(chainId).toUpperCase();\n  const storageKey = `${bridgeDirection.toUpperCase()}-${label}-FROM-TOKEN`;\n  const tokenString = localStorage.getItem(storageKey);\n  const token = JSON.parse(tokenString);\n  const {\n    enableForeignCurrencyBridge\n  } = networks[bridgeDirection];\n  const defaultToken = defaultTokens[bridgeDirection][chainId];\n  const validToken = !!token && token.chainId === chainId && (token.address !== ADDRESS_ZERO || enableForeignCurrencyBridge);\n  return validToken ? token : defaultToken;\n};\nconst IMPOSSIBLE_ERROR = 'Unable to perform the operation. Reload the application and try again.';\nconst TRANSACTION_REPLACED_ERROR = 'Transaction was replaced by another. Reload the application and find the transaction in the history page.';\nexport const handleWalletError = (error, showError) => {\n  if (error !== null && error !== void 0 && error.message && (error === null || error === void 0 ? void 0 : error.message.length) <= 120) {\n    showError(error.message);\n  } else if (error !== null && error !== void 0 && error.message && error !== null && error !== void 0 && error.message.toLowerCase().includes('transaction was replaced')) {\n    showError(TRANSACTION_REPLACED_ERROR);\n  } else {\n    showError(IMPOSSIBLE_ERROR);\n  }\n};\n\n// eslint-disable-next-line no-promise-executor-return\nexport const timeout = ms => new Promise(resolve => setTimeout(resolve, ms));\nexport const withTimeout = (ms, promise) => new Promise((resolve, reject) => {\n  const timer = setTimeout(() => {\n    reject(new Error('timed out'));\n  }, ms);\n  promise.then(value => {\n    clearTimeout(timer);\n    resolve(value);\n  }).catch(error => {\n    clearTimeout(timer);\n    reject(error);\n  });\n});","map":{"version":3,"names":["BigNumber","utils","getAddress","ADDRESS_ZERO","chainUrls","defaultTokensUrl","LOCAL_STORAGE_KEYS","nativeCurrencies","nativeCurrencyMediators","networkCurrencies","networkLabels","networkNames","BSC_XDAI_BRIDGE","defaultTokens","ETH_BSC_BRIDGE","ETH_XDAI_BRIDGE","KOVAN_SOKOL_BRIDGE","networks","POA_XDAI_BRIDGE","getOverriddenMediator","isOverridden","getWalletProviderName","provider","_provider$connection","connection","url","getNativeCurrency","chainId","getNetworkName","getNetworkLabel","getNetworkCurrency","name","symbol","getRPCUrl","returnAsArray","rpc","getExplorerUrl","explorer","getTokenListUrl","removeElement","array","index","cloneArr","splice","uniqueTokens","list","seen","filter","token","address","lowerCaseAddress","toLowerCase","isDuplicate","Object","prototype","hasOwnProperty","call","formatValue","num","dec","_splitStr$","str","formatUnits","splitStr","split","beforeDecimal","afterDecimal","slice","finalNum","Number","toLocaleString","maximumFractionDigits","minimumFractionDigits","formatUnitsReadable","thresh","Math","abs","units","u","length","formatValueForLimits","_splitStr$2","parseValue","isNaN","from","parseUnits","uriToHttp","uri","_uri$match","_uri$match2","protocol","hash","match","substr","fetchQueryParams","search","trim","replace","reduce","acc","keyValuePair","key","value","getAccountString","account","len","logError","args","console","error","logDebug","process","env","REACT_APP_DEBUG_LOGS","log","XDAI_RPC_URL","POA_RPC_URL","MAINNET_RPC_URL","BSC_RPC_URL","KOVAN_RPC_URL","SOKOL_RPC_URL","getRPCKeys","bridgeDirection","homeRPCKey","foreignRPCKey","getHelperContract","getMediatorAddressWithoutOverride","homeChainId","homeMediatorAddress","foreignMediatorAddress","getMediatorAddress","truncateText","text","maxLength","truncated","getDefaultToken","label","toUpperCase","storageKey","tokenString","localStorage","getItem","JSON","parse","enableForeignCurrencyBridge","defaultToken","validToken","IMPOSSIBLE_ERROR","TRANSACTION_REPLACED_ERROR","handleWalletError","showError","message","includes","timeout","ms","Promise","resolve","setTimeout","withTimeout","promise","reject","timer","Error","then","clearTimeout","catch"],"sources":["/home/hightop/bahamas_bridge/omnibridge-ui/packages/dapp/src/lib/helpers.js"],"sourcesContent":["import { BigNumber, utils } from 'ethers';\nimport { getAddress } from 'ethers/lib/utils';\nimport {\n  ADDRESS_ZERO,\n  chainUrls,\n  defaultTokensUrl,\n  LOCAL_STORAGE_KEYS,\n  nativeCurrencies,\n  nativeCurrencyMediators,\n  networkCurrencies,\n  networkLabels,\n  networkNames,\n} from 'lib/constants';\nimport {\n  BSC_XDAI_BRIDGE,\n  defaultTokens,\n  ETH_BSC_BRIDGE,\n  ETH_XDAI_BRIDGE,\n  KOVAN_SOKOL_BRIDGE,\n  networks,\n  POA_XDAI_BRIDGE,\n} from 'lib/networks';\n\nimport { getOverriddenMediator, isOverridden } from './overrides';\n\nexport const getWalletProviderName = provider =>\n  provider?.connection?.url || null;\n\nexport const getNativeCurrency = chainId => nativeCurrencies[chainId || 1];\n\nexport const getNetworkName = chainId =>\n  networkNames[chainId] || 'Unknown Network';\n\nexport const getNetworkLabel = chainId => networkLabels[chainId] || 'Unknown';\n\nexport const getNetworkCurrency = chainId =>\n  networkCurrencies[chainId] || { name: 'Unknown', symbol: 'Unknown' };\n\nexport const getRPCUrl = (chainId, returnAsArray = false) =>\n  returnAsArray ? chainUrls[chainId || 1].rpc : chainUrls[chainId || 1].rpc[0];\n\nexport const getExplorerUrl = chainId =>\n  (chainUrls[chainId] || chainUrls[1]).explorer;\n\nexport const getTokenListUrl = chainId =>\n  defaultTokensUrl[chainId] || defaultTokensUrl[1];\n\nexport const removeElement = (array, index) => {\n  const cloneArr = [...array];\n  cloneArr.splice(index, 1);\n  return cloneArr;\n};\n\nexport const uniqueTokens = list => {\n  const seen = {};\n  return list.filter(token => {\n    const { address } = token;\n    const lowerCaseAddress = address.toLowerCase();\n    const isDuplicate = Object.prototype.hasOwnProperty.call(\n      seen,\n      lowerCaseAddress,\n    )\n      ? false\n      : (seen[lowerCaseAddress] = true);\n    return isDuplicate;\n  });\n};\n\nexport const formatValue = (num, dec) => {\n  const str = utils.formatUnits(num, dec);\n  const splitStr = str.split('.');\n  const beforeDecimal = splitStr[0];\n  const afterDecimal = `${(splitStr[1] ?? '').slice(0, 4)}0000`;\n\n  const finalNum = Number(`${beforeDecimal}.${afterDecimal}`);\n\n  return finalNum.toLocaleString('en-US', {\n    maximumFractionDigits: 4,\n    minimumFractionDigits: 1,\n  });\n};\n\nexport const formatUnitsReadable = num => {\n  const thresh = 1000;\n\n  if (Math.abs(num) < thresh) {\n    return num.toLocaleString('en-US', {\n      maximumFractionDigits: 4,\n      minimumFractionDigits: 1,\n    });\n  }\n\n  const units = ['K', 'M', 'B', 'T'];\n  let u = -1;\n\n  do {\n    // eslint-disable-next-line no-param-reassign\n    num /= thresh;\n    u += 1;\n  } while (Math.abs(num) >= thresh && u < units.length - 1);\n\n  return (\n    num.toLocaleString('en-US', {\n      maximumFractionDigits: 2,\n    }) + units[u]\n  );\n};\n\nexport const formatValueForLimits = (num, dec) => {\n  const str = utils.formatUnits(num, dec);\n  const splitStr = str.split('.');\n  const beforeDecimal = splitStr[0];\n  const afterDecimal = `${(splitStr[1] ?? '').slice(0, 4)}0000`;\n  if (Number(beforeDecimal) > 0) {\n    const finalNum = Number(`${beforeDecimal}.${afterDecimal}`);\n    return formatUnitsReadable(finalNum);\n  }\n  return str;\n};\n\nexport const parseValue = (num, dec) => {\n  if (!num || isNaN(Number(num))) {\n    return BigNumber.from(0);\n  }\n  return utils.parseUnits(num, dec);\n};\n\nexport const uriToHttp = uri => {\n  const protocol = uri.split(':')[0].toLowerCase();\n  const hash = uri.match(/^ipfs:(\\/\\/)?(.*)$/i)?.[2];\n  const name = uri.match(/^ipns:(\\/\\/)?(.*)$/i)?.[2];\n  switch (protocol) {\n    case 'https':\n      return [uri];\n    case 'http':\n      return [`https${uri.substr(4)}`, uri];\n    case 'ipfs':\n      return [\n        `https://cloudflare-ipfs.com/ipfs/${hash}/`,\n        `https://ipfs.io/ipfs/${hash}/`,\n      ];\n    case 'ipns':\n      return [\n        `https://cloudflare-ipfs.com/ipns/${name}/`,\n        `https://ipfs.io/ipns/${name}/`,\n      ];\n    default:\n      return [];\n  }\n};\n\nexport const fetchQueryParams = search => {\n  if (!search || !search.trim().length) return null;\n  return search\n    .replace('?', '')\n    .split(/&/g)\n    .reduce((acc, keyValuePair) => {\n      const [key, value] = keyValuePair.split('=');\n      acc[key] = value;\n      return acc;\n    }, {});\n};\n\nexport const getAccountString = address => {\n  const account = getAddress(address);\n  const len = account.length;\n  return `0x${account.substr(2, 4)}...${account.substr(len - 4, len - 1)}`;\n};\n\nexport const logError = (...args) => {\n  // eslint-disable-next-line no-console\n  console.error(...args);\n};\n\nexport const logDebug = (...args) => {\n  if (process.env.REACT_APP_DEBUG_LOGS === 'true') {\n    // eslint-disable-next-line no-console\n    console.log(...args);\n  }\n};\n\nconst {\n  XDAI_RPC_URL,\n  POA_RPC_URL,\n  MAINNET_RPC_URL,\n  BSC_RPC_URL,\n  KOVAN_RPC_URL,\n  SOKOL_RPC_URL,\n} = LOCAL_STORAGE_KEYS;\n\nexport const getRPCKeys = bridgeDirection => {\n  switch (bridgeDirection) {\n    case ETH_XDAI_BRIDGE:\n      return {\n        homeRPCKey: XDAI_RPC_URL,\n        foreignRPCKey: MAINNET_RPC_URL,\n      };\n    case BSC_XDAI_BRIDGE:\n      return {\n        homeRPCKey: XDAI_RPC_URL,\n        foreignRPCKey: BSC_RPC_URL,\n      };\n    case POA_XDAI_BRIDGE:\n      return {\n        homeRPCKey: XDAI_RPC_URL,\n        foreignRPCKey: POA_RPC_URL,\n      };\n    case ETH_BSC_BRIDGE:\n      return {\n        homeRPCKey: BSC_RPC_URL,\n        foreignRPCKey: MAINNET_RPC_URL,\n      };\n    case KOVAN_SOKOL_BRIDGE:\n    default:\n      return {\n        homeRPCKey: SOKOL_RPC_URL,\n        foreignRPCKey: KOVAN_RPC_URL,\n      };\n  }\n};\n\nexport const getHelperContract = chainId =>\n  nativeCurrencyMediators[chainId || 1];\n\nexport const getMediatorAddressWithoutOverride = (bridgeDirection, chainId) => {\n  if (!bridgeDirection || !chainId) return null;\n  const { homeChainId, homeMediatorAddress, foreignMediatorAddress } =\n    networks[bridgeDirection];\n  return homeChainId === chainId\n    ? homeMediatorAddress.toLowerCase()\n    : foreignMediatorAddress.toLowerCase();\n};\n\nexport const getMediatorAddress = (bridgeDirection, token) => {\n  if (!token || !token.chainId || !token.address) return null;\n  if (isOverridden(bridgeDirection, token)) {\n    return getOverriddenMediator(bridgeDirection, token);\n  }\n  return getMediatorAddressWithoutOverride(bridgeDirection, token.chainId);\n};\n\nexport const truncateText = (text, maxLength) => {\n  let truncated = text;\n\n  if (truncated.length > maxLength - 3) {\n    truncated = `${truncated.substr(0, maxLength - 3)}...`;\n  }\n  return truncated;\n};\n\nexport const getDefaultToken = (bridgeDirection, chainId) => {\n  const label = getNetworkLabel(chainId).toUpperCase();\n  const storageKey = `${bridgeDirection.toUpperCase()}-${label}-FROM-TOKEN`;\n  const tokenString = localStorage.getItem(storageKey);\n  const token = JSON.parse(tokenString);\n  const { enableForeignCurrencyBridge } = networks[bridgeDirection];\n  const defaultToken = defaultTokens[bridgeDirection][chainId];\n  const validToken =\n    !!token &&\n    token.chainId === chainId &&\n    (token.address !== ADDRESS_ZERO || enableForeignCurrencyBridge);\n\n  return validToken ? token : defaultToken;\n};\n\nconst IMPOSSIBLE_ERROR =\n  'Unable to perform the operation. Reload the application and try again.';\n\nconst TRANSACTION_REPLACED_ERROR =\n  'Transaction was replaced by another. Reload the application and find the transaction in the history page.';\n\nexport const handleWalletError = (error, showError) => {\n  if (error?.message && error?.message.length <= 120) {\n    showError(error.message);\n  } else if (\n    error?.message &&\n    error?.message.toLowerCase().includes('transaction was replaced')\n  ) {\n    showError(TRANSACTION_REPLACED_ERROR);\n  } else {\n    showError(IMPOSSIBLE_ERROR);\n  }\n};\n\n// eslint-disable-next-line no-promise-executor-return\nexport const timeout = ms => new Promise(resolve => setTimeout(resolve, ms));\n\nexport const withTimeout = (ms, promise) =>\n  new Promise((resolve, reject) => {\n    const timer = setTimeout(() => {\n      reject(new Error('timed out'));\n    }, ms);\n\n    promise\n      .then(value => {\n        clearTimeout(timer);\n        resolve(value);\n      })\n      .catch(error => {\n        clearTimeout(timer);\n        reject(error);\n      });\n  });\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}