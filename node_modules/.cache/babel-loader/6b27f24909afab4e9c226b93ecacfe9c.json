{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subscriber,_Subscription,_Observable,_Subject PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nexport function groupBy(keySelector, elementSelector, durationSelector, subjectSelector) {\n  return function (source) {\n    return source.lift(new GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector));\n  };\n}\nvar GroupByOperator = /*@__PURE__*/function () {\n  function GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector) {\n    this.keySelector = keySelector;\n    this.elementSelector = elementSelector;\n    this.durationSelector = durationSelector;\n    this.subjectSelector = subjectSelector;\n  }\n  GroupByOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new GroupBySubscriber(subscriber, this.keySelector, this.elementSelector, this.durationSelector, this.subjectSelector));\n  };\n  return GroupByOperator;\n}();\nvar GroupBySubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(GroupBySubscriber, _super);\n  function GroupBySubscriber(destination, keySelector, elementSelector, durationSelector, subjectSelector) {\n    var _this = _super.call(this, destination) || this;\n    _this.keySelector = keySelector;\n    _this.elementSelector = elementSelector;\n    _this.durationSelector = durationSelector;\n    _this.subjectSelector = subjectSelector;\n    _this.groups = null;\n    _this.attemptedToUnsubscribe = false;\n    _this.count = 0;\n    return _this;\n  }\n  GroupBySubscriber.prototype._next = function (value) {\n    var key;\n    try {\n      key = this.keySelector(value);\n    } catch (err) {\n      this.error(err);\n      return;\n    }\n    this._group(value, key);\n  };\n  GroupBySubscriber.prototype._group = function (value, key) {\n    var groups = this.groups;\n    if (!groups) {\n      groups = this.groups = new Map();\n    }\n    var group = groups.get(key);\n    var element;\n    if (this.elementSelector) {\n      try {\n        element = this.elementSelector(value);\n      } catch (err) {\n        this.error(err);\n      }\n    } else {\n      element = value;\n    }\n    if (!group) {\n      group = this.subjectSelector ? this.subjectSelector() : new Subject();\n      groups.set(key, group);\n      var groupedObservable = new GroupedObservable(key, group, this);\n      this.destination.next(groupedObservable);\n      if (this.durationSelector) {\n        var duration = void 0;\n        try {\n          duration = this.durationSelector(new GroupedObservable(key, group));\n        } catch (err) {\n          this.error(err);\n          return;\n        }\n        this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));\n      }\n    }\n    if (!group.closed) {\n      group.next(element);\n    }\n  };\n  GroupBySubscriber.prototype._error = function (err) {\n    var groups = this.groups;\n    if (groups) {\n      groups.forEach(function (group, key) {\n        group.error(err);\n      });\n      groups.clear();\n    }\n    this.destination.error(err);\n  };\n  GroupBySubscriber.prototype._complete = function () {\n    var groups = this.groups;\n    if (groups) {\n      groups.forEach(function (group, key) {\n        group.complete();\n      });\n      groups.clear();\n    }\n    this.destination.complete();\n  };\n  GroupBySubscriber.prototype.removeGroup = function (key) {\n    this.groups.delete(key);\n  };\n  GroupBySubscriber.prototype.unsubscribe = function () {\n    if (!this.closed) {\n      this.attemptedToUnsubscribe = true;\n      if (this.count === 0) {\n        _super.prototype.unsubscribe.call(this);\n      }\n    }\n  };\n  return GroupBySubscriber;\n}(Subscriber);\nvar GroupDurationSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(GroupDurationSubscriber, _super);\n  function GroupDurationSubscriber(key, group, parent) {\n    var _this = _super.call(this, group) || this;\n    _this.key = key;\n    _this.group = group;\n    _this.parent = parent;\n    return _this;\n  }\n  GroupDurationSubscriber.prototype._next = function (value) {\n    this.complete();\n  };\n  GroupDurationSubscriber.prototype._unsubscribe = function () {\n    var _a = this,\n      parent = _a.parent,\n      key = _a.key;\n    this.key = this.parent = null;\n    if (parent) {\n      parent.removeGroup(key);\n    }\n  };\n  return GroupDurationSubscriber;\n}(Subscriber);\nvar GroupedObservable = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(GroupedObservable, _super);\n  function GroupedObservable(key, groupSubject, refCountSubscription) {\n    var _this = _super.call(this) || this;\n    _this.key = key;\n    _this.groupSubject = groupSubject;\n    _this.refCountSubscription = refCountSubscription;\n    return _this;\n  }\n  GroupedObservable.prototype._subscribe = function (subscriber) {\n    var subscription = new Subscription();\n    var _a = this,\n      refCountSubscription = _a.refCountSubscription,\n      groupSubject = _a.groupSubject;\n    if (refCountSubscription && !refCountSubscription.closed) {\n      subscription.add(new InnerRefCountSubscription(refCountSubscription));\n    }\n    subscription.add(groupSubject.subscribe(subscriber));\n    return subscription;\n  };\n  return GroupedObservable;\n}(Observable);\nexport { GroupedObservable };\nvar InnerRefCountSubscription = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(InnerRefCountSubscription, _super);\n  function InnerRefCountSubscription(parent) {\n    var _this = _super.call(this) || this;\n    _this.parent = parent;\n    parent.count++;\n    return _this;\n  }\n  InnerRefCountSubscription.prototype.unsubscribe = function () {\n    var parent = this.parent;\n    if (!parent.closed && !this.closed) {\n      _super.prototype.unsubscribe.call(this);\n      parent.count -= 1;\n      if (parent.count === 0 && parent.attemptedToUnsubscribe) {\n        parent.unsubscribe();\n      }\n    }\n  };\n  return InnerRefCountSubscription;\n}(Subscription);","map":{"version":3,"sources":["../../../src/internal/operators/groupBy.ts"],"names":[],"mappings":"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","sourcesContent":["/** PURE_IMPORTS_START tslib,_Subscriber,_Subscription,_Observable,_Subject PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nexport function groupBy(keySelector, elementSelector, durationSelector, subjectSelector) {\n    return function (source) {\n        return source.lift(new GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector));\n    };\n}\nvar GroupByOperator = /*@__PURE__*/ (function () {\n    function GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector) {\n        this.keySelector = keySelector;\n        this.elementSelector = elementSelector;\n        this.durationSelector = durationSelector;\n        this.subjectSelector = subjectSelector;\n    }\n    GroupByOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new GroupBySubscriber(subscriber, this.keySelector, this.elementSelector, this.durationSelector, this.subjectSelector));\n    };\n    return GroupByOperator;\n}());\nvar GroupBySubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(GroupBySubscriber, _super);\n    function GroupBySubscriber(destination, keySelector, elementSelector, durationSelector, subjectSelector) {\n        var _this = _super.call(this, destination) || this;\n        _this.keySelector = keySelector;\n        _this.elementSelector = elementSelector;\n        _this.durationSelector = durationSelector;\n        _this.subjectSelector = subjectSelector;\n        _this.groups = null;\n        _this.attemptedToUnsubscribe = false;\n        _this.count = 0;\n        return _this;\n    }\n    GroupBySubscriber.prototype._next = function (value) {\n        var key;\n        try {\n            key = this.keySelector(value);\n        }\n        catch (err) {\n            this.error(err);\n            return;\n        }\n        this._group(value, key);\n    };\n    GroupBySubscriber.prototype._group = function (value, key) {\n        var groups = this.groups;\n        if (!groups) {\n            groups = this.groups = new Map();\n        }\n        var group = groups.get(key);\n        var element;\n        if (this.elementSelector) {\n            try {\n                element = this.elementSelector(value);\n            }\n            catch (err) {\n                this.error(err);\n            }\n        }\n        else {\n            element = value;\n        }\n        if (!group) {\n            group = (this.subjectSelector ? this.subjectSelector() : new Subject());\n            groups.set(key, group);\n            var groupedObservable = new GroupedObservable(key, group, this);\n            this.destination.next(groupedObservable);\n            if (this.durationSelector) {\n                var duration = void 0;\n                try {\n                    duration = this.durationSelector(new GroupedObservable(key, group));\n                }\n                catch (err) {\n                    this.error(err);\n                    return;\n                }\n                this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));\n            }\n        }\n        if (!group.closed) {\n            group.next(element);\n        }\n    };\n    GroupBySubscriber.prototype._error = function (err) {\n        var groups = this.groups;\n        if (groups) {\n            groups.forEach(function (group, key) {\n                group.error(err);\n            });\n            groups.clear();\n        }\n        this.destination.error(err);\n    };\n    GroupBySubscriber.prototype._complete = function () {\n        var groups = this.groups;\n        if (groups) {\n            groups.forEach(function (group, key) {\n                group.complete();\n            });\n            groups.clear();\n        }\n        this.destination.complete();\n    };\n    GroupBySubscriber.prototype.removeGroup = function (key) {\n        this.groups.delete(key);\n    };\n    GroupBySubscriber.prototype.unsubscribe = function () {\n        if (!this.closed) {\n            this.attemptedToUnsubscribe = true;\n            if (this.count === 0) {\n                _super.prototype.unsubscribe.call(this);\n            }\n        }\n    };\n    return GroupBySubscriber;\n}(Subscriber));\nvar GroupDurationSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(GroupDurationSubscriber, _super);\n    function GroupDurationSubscriber(key, group, parent) {\n        var _this = _super.call(this, group) || this;\n        _this.key = key;\n        _this.group = group;\n        _this.parent = parent;\n        return _this;\n    }\n    GroupDurationSubscriber.prototype._next = function (value) {\n        this.complete();\n    };\n    GroupDurationSubscriber.prototype._unsubscribe = function () {\n        var _a = this, parent = _a.parent, key = _a.key;\n        this.key = this.parent = null;\n        if (parent) {\n            parent.removeGroup(key);\n        }\n    };\n    return GroupDurationSubscriber;\n}(Subscriber));\nvar GroupedObservable = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(GroupedObservable, _super);\n    function GroupedObservable(key, groupSubject, refCountSubscription) {\n        var _this = _super.call(this) || this;\n        _this.key = key;\n        _this.groupSubject = groupSubject;\n        _this.refCountSubscription = refCountSubscription;\n        return _this;\n    }\n    GroupedObservable.prototype._subscribe = function (subscriber) {\n        var subscription = new Subscription();\n        var _a = this, refCountSubscription = _a.refCountSubscription, groupSubject = _a.groupSubject;\n        if (refCountSubscription && !refCountSubscription.closed) {\n            subscription.add(new InnerRefCountSubscription(refCountSubscription));\n        }\n        subscription.add(groupSubject.subscribe(subscriber));\n        return subscription;\n    };\n    return GroupedObservable;\n}(Observable));\nexport { GroupedObservable };\nvar InnerRefCountSubscription = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(InnerRefCountSubscription, _super);\n    function InnerRefCountSubscription(parent) {\n        var _this = _super.call(this) || this;\n        _this.parent = parent;\n        parent.count++;\n        return _this;\n    }\n    InnerRefCountSubscription.prototype.unsubscribe = function () {\n        var parent = this.parent;\n        if (!parent.closed && !this.closed) {\n            _super.prototype.unsubscribe.call(this);\n            parent.count -= 1;\n            if (parent.count === 0 && parent.attemptedToUnsubscribe) {\n                parent.unsubscribe();\n            }\n        }\n    };\n    return InnerRefCountSubscription;\n}(Subscription));\n//# sourceMappingURL=groupBy.js.map\n"]},"metadata":{},"sourceType":"module"}