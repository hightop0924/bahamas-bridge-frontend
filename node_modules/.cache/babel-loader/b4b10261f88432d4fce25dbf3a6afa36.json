{"ast":null,"code":"/** PURE_IMPORTS_START _observable_concat PURE_IMPORTS_END */\nimport { concat as concatStatic } from '../observable/concat';\nexport function concat() {\n  var observables = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    observables[_i] = arguments[_i];\n  }\n  return function (source) {\n    return source.lift.call(concatStatic.apply(void 0, [source].concat(observables)));\n  };\n}","map":{"version":3,"sources":["../../../src/internal/operators/concat.ts"],"names":[],"mappings":"AAAA;AA0BA,SAAM,MAAA,IAAU,YAAM,QAAA,sBAAA;AAAO,OAAA,SAAA,MAAA,CAAA,EAA2D;MAA3D,WAAA,GAAA,EAAA;EAAA,KAAA,IAAA,EAAA,GAAA,CAAA,EAAA,EAAA,GAAA,SAAA,CAAA,MAA2D,EAAA,EAAA,EAAA,EAAA;;EACtF;EACD,OAAA,UAAA,MAAA,EAAA;IAAA,OAAA,MAAA,CAAA,IAAA,CAAA,IAAA,CAAA,YAAA,CAAA,KAAA,CAAA,KAAA,CAAA,EAAA,CAAA,MAAA,CAAA,CAAA,MAAA,CAAA,WAAA,CAAA,CAAA,CAAA;EAAA,CAAA","sourcesContent":["/** PURE_IMPORTS_START _observable_concat PURE_IMPORTS_END */\nimport { concat as concatStatic } from '../observable/concat';\nexport function concat() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i] = arguments[_i];\n    }\n    return function (source) { return source.lift.call(concatStatic.apply(void 0, [source].concat(observables))); };\n}\n//# sourceMappingURL=concat.js.map\n"]},"metadata":{},"sourceType":"module"}