{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Action PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Action } from './Action';\nvar AsyncAction = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(AsyncAction, _super);\n  function AsyncAction(scheduler, work) {\n    var _this = _super.call(this, scheduler, work) || this;\n    _this.scheduler = scheduler;\n    _this.work = work;\n    _this.pending = false;\n    return _this;\n  }\n  AsyncAction.prototype.schedule = function (state, delay) {\n    if (delay === void 0) {\n      delay = 0;\n    }\n    if (this.closed) {\n      return this;\n    }\n    this.state = state;\n    var id = this.id;\n    var scheduler = this.scheduler;\n    if (id != null) {\n      this.id = this.recycleAsyncId(scheduler, id, delay);\n    }\n    this.pending = true;\n    this.delay = delay;\n    this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);\n    return this;\n  };\n  AsyncAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n    if (delay === void 0) {\n      delay = 0;\n    }\n    return setInterval(scheduler.flush.bind(scheduler, this), delay);\n  };\n  AsyncAction.prototype.recycleAsyncId = function (scheduler, id, delay) {\n    if (delay === void 0) {\n      delay = 0;\n    }\n    if (delay !== null && this.delay === delay && this.pending === false) {\n      return id;\n    }\n    clearInterval(id);\n    return undefined;\n  };\n  AsyncAction.prototype.execute = function (state, delay) {\n    if (this.closed) {\n      return new Error('executing a cancelled action');\n    }\n    this.pending = false;\n    var error = this._execute(state, delay);\n    if (error) {\n      return error;\n    } else if (this.pending === false && this.id != null) {\n      this.id = this.recycleAsyncId(this.scheduler, this.id, null);\n    }\n  };\n  AsyncAction.prototype._execute = function (state, delay) {\n    var errored = false;\n    var errorValue = undefined;\n    try {\n      this.work(state);\n    } catch (e) {\n      errored = true;\n      errorValue = !!e && e || new Error(e);\n    }\n    if (errored) {\n      this.unsubscribe();\n      return errorValue;\n    }\n  };\n  AsyncAction.prototype._unsubscribe = function () {\n    var id = this.id;\n    var scheduler = this.scheduler;\n    var actions = scheduler.actions;\n    var index = actions.indexOf(this);\n    this.work = null;\n    this.state = null;\n    this.pending = false;\n    this.scheduler = null;\n    if (index !== -1) {\n      actions.splice(index, 1);\n    }\n    if (id != null) {\n      this.id = this.recycleAsyncId(scheduler, id, null);\n    }\n    this.delay = null;\n  };\n  return AsyncAction;\n}(Action);\nexport { AsyncAction };","map":{"version":3,"sources":["../../../src/internal/scheduler/AsyncAction.ts"],"names":[],"mappings":"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","sourcesContent":["/** PURE_IMPORTS_START tslib,_Action PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Action } from './Action';\nvar AsyncAction = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(AsyncAction, _super);\n    function AsyncAction(scheduler, work) {\n        var _this = _super.call(this, scheduler, work) || this;\n        _this.scheduler = scheduler;\n        _this.work = work;\n        _this.pending = false;\n        return _this;\n    }\n    AsyncAction.prototype.schedule = function (state, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        if (this.closed) {\n            return this;\n        }\n        this.state = state;\n        var id = this.id;\n        var scheduler = this.scheduler;\n        if (id != null) {\n            this.id = this.recycleAsyncId(scheduler, id, delay);\n        }\n        this.pending = true;\n        this.delay = delay;\n        this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);\n        return this;\n    };\n    AsyncAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        return setInterval(scheduler.flush.bind(scheduler, this), delay);\n    };\n    AsyncAction.prototype.recycleAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        if (delay !== null && this.delay === delay && this.pending === false) {\n            return id;\n        }\n        clearInterval(id);\n        return undefined;\n    };\n    AsyncAction.prototype.execute = function (state, delay) {\n        if (this.closed) {\n            return new Error('executing a cancelled action');\n        }\n        this.pending = false;\n        var error = this._execute(state, delay);\n        if (error) {\n            return error;\n        }\n        else if (this.pending === false && this.id != null) {\n            this.id = this.recycleAsyncId(this.scheduler, this.id, null);\n        }\n    };\n    AsyncAction.prototype._execute = function (state, delay) {\n        var errored = false;\n        var errorValue = undefined;\n        try {\n            this.work(state);\n        }\n        catch (e) {\n            errored = true;\n            errorValue = !!e && e || new Error(e);\n        }\n        if (errored) {\n            this.unsubscribe();\n            return errorValue;\n        }\n    };\n    AsyncAction.prototype._unsubscribe = function () {\n        var id = this.id;\n        var scheduler = this.scheduler;\n        var actions = scheduler.actions;\n        var index = actions.indexOf(this);\n        this.work = null;\n        this.state = null;\n        this.pending = false;\n        this.scheduler = null;\n        if (index !== -1) {\n            actions.splice(index, 1);\n        }\n        if (id != null) {\n            this.id = this.recycleAsyncId(scheduler, id, null);\n        }\n        this.delay = null;\n    };\n    return AsyncAction;\n}(Action));\nexport { AsyncAction };\n//# sourceMappingURL=AsyncAction.js.map\n"]},"metadata":{},"sourceType":"module"}