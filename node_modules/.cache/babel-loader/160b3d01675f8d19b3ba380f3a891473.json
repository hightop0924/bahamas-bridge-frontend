{"ast":null,"code":"import { __read, __spread } from \"tslib\";\nimport { logger } from '@sentry/utils';\nimport { IS_DEBUG_BUILD } from '../../flags';\n/**\n * Express integration\n *\n * Provides an request and error handler for Express framework as well as tracing capabilities\n */\nvar Express = /** @class */function () {\n  /**\n   * @inheritDoc\n   */\n  function Express(options) {\n    if (options === void 0) {\n      options = {};\n    }\n    /**\n     * @inheritDoc\n     */\n    this.name = Express.id;\n    this._router = options.router || options.app;\n    this._methods = (Array.isArray(options.methods) ? options.methods : []).concat('use');\n  }\n  /**\n   * @inheritDoc\n   */\n  Express.prototype.setupOnce = function () {\n    if (!this._router) {\n      IS_DEBUG_BUILD && logger.error('ExpressIntegration is missing an Express instance');\n      return;\n    }\n    instrumentMiddlewares(this._router, this._methods);\n  };\n  /**\n   * @inheritDoc\n   */\n  Express.id = 'Express';\n  return Express;\n}();\nexport { Express };\n/**\n * Wraps original middleware function in a tracing call, which stores the info about the call as a span,\n * and finishes it once the middleware is done invoking.\n *\n * Express middlewares have 3 various forms, thus we have to take care of all of them:\n * // sync\n * app.use(function (req, res) { ... })\n * // async\n * app.use(function (req, res, next) { ... })\n * // error handler\n * app.use(function (err, req, res, next) { ... })\n *\n * They all internally delegate to the `router[method]` of the given application instance.\n */\n// eslint-disable-next-line @typescript-eslint/ban-types, @typescript-eslint/no-explicit-any\nfunction wrap(fn, method) {\n  var arity = fn.length;\n  switch (arity) {\n    case 2:\n      {\n        return function (req, res) {\n          var transaction = res.__sentry_transaction;\n          if (transaction) {\n            var span_1 = transaction.startChild({\n              description: fn.name,\n              op: \"express.middleware.\" + method\n            });\n            res.once('finish', function () {\n              span_1.finish();\n            });\n          }\n          return fn.call(this, req, res);\n        };\n      }\n    case 3:\n      {\n        return function (req, res, next) {\n          var _a;\n          var transaction = res.__sentry_transaction;\n          var span = (_a = transaction) === null || _a === void 0 ? void 0 : _a.startChild({\n            description: fn.name,\n            op: \"express.middleware.\" + method\n          });\n          fn.call(this, req, res, function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n              args[_i] = arguments[_i];\n            }\n            var _a;\n            (_a = span) === null || _a === void 0 ? void 0 : _a.finish();\n            next.call.apply(next, __spread([this], args));\n          });\n        };\n      }\n    case 4:\n      {\n        return function (err, req, res, next) {\n          var _a;\n          var transaction = res.__sentry_transaction;\n          var span = (_a = transaction) === null || _a === void 0 ? void 0 : _a.startChild({\n            description: fn.name,\n            op: \"express.middleware.\" + method\n          });\n          fn.call(this, err, req, res, function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n              args[_i] = arguments[_i];\n            }\n            var _a;\n            (_a = span) === null || _a === void 0 ? void 0 : _a.finish();\n            next.call.apply(next, __spread([this], args));\n          });\n        };\n      }\n    default:\n      {\n        throw new Error(\"Express middleware takes 2-4 arguments. Got: \" + arity);\n      }\n  }\n}\n/**\n * Takes all the function arguments passed to the original `app` or `router` method, eg. `app.use` or `router.use`\n * and wraps every function, as well as array of functions with a call to our `wrap` method.\n * We have to take care of the arrays as well as iterate over all of the arguments,\n * as `app.use` can accept middlewares in few various forms.\n *\n * app.use([<path>], <fn>)\n * app.use([<path>], <fn>, ...<fn>)\n * app.use([<path>], ...<fn>[])\n */\nfunction wrapMiddlewareArgs(args, method) {\n  return args.map(function (arg) {\n    if (typeof arg === 'function') {\n      return wrap(arg, method);\n    }\n    if (Array.isArray(arg)) {\n      return arg.map(function (a) {\n        if (typeof a === 'function') {\n          return wrap(a, method);\n        }\n        return a;\n      });\n    }\n    return arg;\n  });\n}\n/**\n * Patches original router to utilize our tracing functionality\n */\nfunction patchMiddleware(router, method) {\n  var originalCallback = router[method];\n  router[method] = function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    return originalCallback.call.apply(originalCallback, __spread([this], wrapMiddlewareArgs(args, method)));\n  };\n  return router;\n}\n/**\n * Patches original router methods\n */\nfunction instrumentMiddlewares(router, methods) {\n  if (methods === void 0) {\n    methods = [];\n  }\n  methods.forEach(function (method) {\n    return patchMiddleware(router, method);\n  });\n}","map":{"version":3,"sources":["../../../../../src/integrations/node/express.ts"],"names":[],"mappings":"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","sourcesContent":["import { Integration, Transaction } from '@sentry/types';\nimport { logger } from '@sentry/utils';\n\nimport { IS_DEBUG_BUILD } from '../../flags';\n\ntype Method =\n  | 'all'\n  | 'get'\n  | 'post'\n  | 'put'\n  | 'delete'\n  | 'patch'\n  | 'options'\n  | 'head'\n  | 'checkout'\n  | 'copy'\n  | 'lock'\n  | 'merge'\n  | 'mkactivity'\n  | 'mkcol'\n  | 'move'\n  | 'm-search'\n  | 'notify'\n  | 'purge'\n  | 'report'\n  | 'search'\n  | 'subscribe'\n  | 'trace'\n  | 'unlock'\n  | 'unsubscribe'\n  | 'use';\n\ntype Router = {\n  [method in Method]: (...args: any) => any; // eslint-disable-line @typescript-eslint/no-explicit-any\n};\n\ninterface ExpressResponse {\n  once(name: string, callback: () => void): void;\n}\n\n/**\n * Internal helper for `__sentry_transaction`\n * @hidden\n */\ninterface SentryTracingResponse {\n  __sentry_transaction?: Transaction;\n}\n\n/**\n * Express integration\n *\n * Provides an request and error handler for Express framework as well as tracing capabilities\n */\nexport class Express implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'Express';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = Express.id;\n\n  /**\n   * Express App instance\n   */\n  private readonly _router?: Router;\n  private readonly _methods?: Method[];\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(options: { app?: Router; router?: Router; methods?: Method[] } = {}) {\n    this._router = options.router || options.app;\n    this._methods = (Array.isArray(options.methods) ? options.methods : []).concat('use');\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    if (!this._router) {\n      IS_DEBUG_BUILD && logger.error('ExpressIntegration is missing an Express instance');\n      return;\n    }\n    instrumentMiddlewares(this._router, this._methods);\n  }\n}\n\n/**\n * Wraps original middleware function in a tracing call, which stores the info about the call as a span,\n * and finishes it once the middleware is done invoking.\n *\n * Express middlewares have 3 various forms, thus we have to take care of all of them:\n * // sync\n * app.use(function (req, res) { ... })\n * // async\n * app.use(function (req, res, next) { ... })\n * // error handler\n * app.use(function (err, req, res, next) { ... })\n *\n * They all internally delegate to the `router[method]` of the given application instance.\n */\n// eslint-disable-next-line @typescript-eslint/ban-types, @typescript-eslint/no-explicit-any\nfunction wrap(fn: Function, method: Method): (...args: any[]) => void {\n  const arity = fn.length;\n\n  switch (arity) {\n    case 2: {\n      return function (this: NodeJS.Global, req: unknown, res: ExpressResponse & SentryTracingResponse): void {\n        const transaction = res.__sentry_transaction;\n        if (transaction) {\n          const span = transaction.startChild({\n            description: fn.name,\n            op: `express.middleware.${method}`,\n          });\n          res.once('finish', () => {\n            span.finish();\n          });\n        }\n        return fn.call(this, req, res);\n      };\n    }\n    case 3: {\n      return function (\n        this: NodeJS.Global,\n        req: unknown,\n        res: ExpressResponse & SentryTracingResponse,\n        next: () => void,\n      ): void {\n        const transaction = res.__sentry_transaction;\n        const span = transaction?.startChild({\n          description: fn.name,\n          op: `express.middleware.${method}`,\n        });\n        fn.call(this, req, res, function (this: NodeJS.Global, ...args: unknown[]): void {\n          span?.finish();\n          next.call(this, ...args);\n        });\n      };\n    }\n    case 4: {\n      return function (\n        this: NodeJS.Global,\n        err: Error,\n        req: Request,\n        res: Response & SentryTracingResponse,\n        next: () => void,\n      ): void {\n        const transaction = res.__sentry_transaction;\n        const span = transaction?.startChild({\n          description: fn.name,\n          op: `express.middleware.${method}`,\n        });\n        fn.call(this, err, req, res, function (this: NodeJS.Global, ...args: unknown[]): void {\n          span?.finish();\n          next.call(this, ...args);\n        });\n      };\n    }\n    default: {\n      throw new Error(`Express middleware takes 2-4 arguments. Got: ${arity}`);\n    }\n  }\n}\n\n/**\n * Takes all the function arguments passed to the original `app` or `router` method, eg. `app.use` or `router.use`\n * and wraps every function, as well as array of functions with a call to our `wrap` method.\n * We have to take care of the arrays as well as iterate over all of the arguments,\n * as `app.use` can accept middlewares in few various forms.\n *\n * app.use([<path>], <fn>)\n * app.use([<path>], <fn>, ...<fn>)\n * app.use([<path>], ...<fn>[])\n */\nfunction wrapMiddlewareArgs(args: unknown[], method: Method): unknown[] {\n  return args.map((arg: unknown) => {\n    if (typeof arg === 'function') {\n      return wrap(arg, method);\n    }\n\n    if (Array.isArray(arg)) {\n      return arg.map((a: unknown) => {\n        if (typeof a === 'function') {\n          return wrap(a, method);\n        }\n        return a;\n      });\n    }\n\n    return arg;\n  });\n}\n\n/**\n * Patches original router to utilize our tracing functionality\n */\nfunction patchMiddleware(router: Router, method: Method): Router {\n  const originalCallback = router[method];\n\n  router[method] = function (...args: unknown[]): void {\n    return originalCallback.call(this, ...wrapMiddlewareArgs(args, method));\n  };\n\n  return router;\n}\n\n/**\n * Patches original router methods\n */\nfunction instrumentMiddlewares(router: Router, methods: Method[] = []): void {\n  methods.forEach((method: Method) => patchMiddleware(router, method));\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}