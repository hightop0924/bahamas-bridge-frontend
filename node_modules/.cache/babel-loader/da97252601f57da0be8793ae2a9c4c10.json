{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subscriber,_util_ArgumentOutOfRangeError,_observable_empty PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { empty } from '../observable/empty';\nexport function take(count) {\n  return function (source) {\n    if (count === 0) {\n      return empty();\n    } else {\n      return source.lift(new TakeOperator(count));\n    }\n  };\n}\nvar TakeOperator = /*@__PURE__*/function () {\n  function TakeOperator(total) {\n    this.total = total;\n    if (this.total < 0) {\n      throw new ArgumentOutOfRangeError();\n    }\n  }\n  TakeOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new TakeSubscriber(subscriber, this.total));\n  };\n  return TakeOperator;\n}();\nvar TakeSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(TakeSubscriber, _super);\n  function TakeSubscriber(destination, total) {\n    var _this = _super.call(this, destination) || this;\n    _this.total = total;\n    _this.count = 0;\n    return _this;\n  }\n  TakeSubscriber.prototype._next = function (value) {\n    var total = this.total;\n    var count = ++this.count;\n    if (count <= total) {\n      this.destination.next(value);\n      if (count === total) {\n        this.destination.complete();\n        this.unsubscribe();\n      }\n    }\n  };\n  return TakeSubscriber;\n}(Subscriber);","map":{"version":3,"sources":["../../../src/internal/operators/take.ts"],"names":[],"mappings":";AACA,OAAO,KAAE,OAAU,MAAE,OAAM;AAC3B,SAAS,UAAA,QAAA,eAA+B;AACxC,SAAS,uBAAa,QAAA,iCAAsB;AAkD5C,SAAM,KAAA,QAAkB,qBAAa;AACnC,OAAA,SAAO,IAAA,CAAC,KAAA,EAAqB;EAC3B,OAAA,UAAS,MAAQ,EAAA;QACf,KAAA,KAAO,CAAA,EAAK;MACb,OAAA,KAAA,CAAA,CAAA;KAAM,MACL;MACD,OAAA,MAAA,CAAA,IAAA,CAAA,IAAA,YAAA,CAAA,KAAA,CAAA,CAAA;IACD;EACH,CAAA;AAED;IACE,YAAA,GAAA,aAAiC,YAAA;EAAb,SAAA,YAAA,CAAK,KAAQ,EAAA;IAC/B,IAAI,CAAA,KAAK,GAAA,KAAS;QAChB,IAAA,CAAA,KAAU,GAAA,CAAA,EAAA;MACX,MAAA,IAAA,uBAAA,CAAA,CAAA;IACF;EAED;EACE,YAAO,CAAA,SAAO,CAAA,IAAS,GAAC,UAAI,UAAe,EAAA,MAAU,EAAE;IACxD,OAAA,MAAA,CAAA,SAAA,CAAA,IAAA,cAAA,CAAA,UAAA,EAAA,IAAA,CAAA,KAAA,CAAA,CAAA;EACH,CAAA;EAAC,OAAA,YAAA;AAOD,CAAA,CAAA,CAAA;IAAgC,cAAA,GAAA,aAAA,UAAa,MAAA,EAAA;EAG3C,OAAA,CAAA,SAAA,CAAA,cAAY,EAAA,MAAoC,CAAA;EAAhD,SAAA,cACE,CAAA,WAAM,EAAA,KAAA,EAAA;IADwC,IAAA,KAAA,GAAA,MAAA,CAAK,IAAQ,CAAA,IAAA,EAAA,WAAA,CAAA,IAAA,IAAA;IAFrD,KAAA,CAAA,KAAK,GAAW,KAAE;;IAIzB,OAAA,KAAA;EAED;EACE,cAAW,CAAA,SAAQ,CAAA,KAAM,GAAA,UAAA,KAAA,EAAA;IACzB,IAAM,KAAK,GAAG,IAAE,CAAA,KAAK;IACrB,IAAI,KAAK,GAAA,EAAI,IAAK,CAAA,KAAE;QAClB,KAAK,IAAA,KAAA,EAAW;MAChB,IAAI,CAAA,WAAU,CAAA,IAAO,CAAA,KAAA,CAAA;UACnB,KAAK,KAAA,KAAA,EAAY;QACjB,IAAI,CAAC,WAAW,CAAA,QAAG,CAAA,CAAA;QACpB,IAAA,CAAA,WAAA,CAAA,CAAA;MACF;IACF;EACH,CAAA;EAlBgC,OAAA,cAkB/B","sourcesContent":["/** PURE_IMPORTS_START tslib,_Subscriber,_util_ArgumentOutOfRangeError,_observable_empty PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { empty } from '../observable/empty';\nexport function take(count) {\n    return function (source) {\n        if (count === 0) {\n            return empty();\n        }\n        else {\n            return source.lift(new TakeOperator(count));\n        }\n    };\n}\nvar TakeOperator = /*@__PURE__*/ (function () {\n    function TakeOperator(total) {\n        this.total = total;\n        if (this.total < 0) {\n            throw new ArgumentOutOfRangeError;\n        }\n    }\n    TakeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new TakeSubscriber(subscriber, this.total));\n    };\n    return TakeOperator;\n}());\nvar TakeSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(TakeSubscriber, _super);\n    function TakeSubscriber(destination, total) {\n        var _this = _super.call(this, destination) || this;\n        _this.total = total;\n        _this.count = 0;\n        return _this;\n    }\n    TakeSubscriber.prototype._next = function (value) {\n        var total = this.total;\n        var count = ++this.count;\n        if (count <= total) {\n            this.destination.next(value);\n            if (count === total) {\n                this.destination.complete();\n                this.unsubscribe();\n            }\n        }\n    };\n    return TakeSubscriber;\n}(Subscriber));\n//# sourceMappingURL=take.js.map\n"]},"metadata":{},"sourceType":"module"}