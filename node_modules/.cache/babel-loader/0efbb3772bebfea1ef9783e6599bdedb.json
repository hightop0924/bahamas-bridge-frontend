{"ast":null,"code":"import { __read } from \"tslib\";\nimport { SentryError } from './error';\nimport { IS_DEBUG_BUILD } from './flags';\n/** Regular expression used to parse a Dsn. */\nvar DSN_REGEX = /^(?:(\\w+):)\\/\\/(?:(\\w+)(?::(\\w+))?@)([\\w.-]+)(?::(\\d+))?\\/(.+)/;\nfunction isValidProtocol(protocol) {\n  return protocol === 'http' || protocol === 'https';\n}\n/**\n * Renders the string representation of this Dsn.\n *\n * By default, this will render the public representation without the password\n * component. To get the deprecated private representation, set `withPassword`\n * to true.\n *\n * @param withPassword When set to true, the password will be included.\n */\nexport function dsnToString(dsn, withPassword) {\n  if (withPassword === void 0) {\n    withPassword = false;\n  }\n  var host = dsn.host,\n    path = dsn.path,\n    pass = dsn.pass,\n    port = dsn.port,\n    projectId = dsn.projectId,\n    protocol = dsn.protocol,\n    publicKey = dsn.publicKey;\n  return protocol + \"://\" + publicKey + (withPassword && pass ? \":\" + pass : '') + (\"@\" + host + (port ? \":\" + port : '') + \"/\" + (path ? path + \"/\" : path) + projectId);\n}\nfunction dsnFromString(str) {\n  var match = DSN_REGEX.exec(str);\n  if (!match) {\n    throw new SentryError(\"Invalid Sentry Dsn: \" + str);\n  }\n  var _a = __read(match.slice(1), 6),\n    protocol = _a[0],\n    publicKey = _a[1],\n    _b = _a[2],\n    pass = _b === void 0 ? '' : _b,\n    host = _a[3],\n    _c = _a[4],\n    port = _c === void 0 ? '' : _c,\n    lastPath = _a[5];\n  var path = '';\n  var projectId = lastPath;\n  var split = projectId.split('/');\n  if (split.length > 1) {\n    path = split.slice(0, -1).join('/');\n    projectId = split.pop();\n  }\n  if (projectId) {\n    var projectMatch = projectId.match(/^\\d+/);\n    if (projectMatch) {\n      projectId = projectMatch[0];\n    }\n  }\n  return dsnFromComponents({\n    host: host,\n    pass: pass,\n    path: path,\n    projectId: projectId,\n    port: port,\n    protocol: protocol,\n    publicKey: publicKey\n  });\n}\nfunction dsnFromComponents(components) {\n  // TODO this is for backwards compatibility, and can be removed in a future version\n  if ('user' in components && !('publicKey' in components)) {\n    components.publicKey = components.user;\n  }\n  return {\n    user: components.publicKey || '',\n    protocol: components.protocol,\n    publicKey: components.publicKey || '',\n    pass: components.pass || '',\n    host: components.host,\n    port: components.port || '',\n    path: components.path || '',\n    projectId: components.projectId\n  };\n}\nfunction validateDsn(dsn) {\n  if (!IS_DEBUG_BUILD) {\n    return;\n  }\n  var port = dsn.port,\n    projectId = dsn.projectId,\n    protocol = dsn.protocol;\n  var requiredComponents = ['protocol', 'publicKey', 'host', 'projectId'];\n  requiredComponents.forEach(function (component) {\n    if (!dsn[component]) {\n      throw new SentryError(\"Invalid Sentry Dsn: \" + component + \" missing\");\n    }\n  });\n  if (!projectId.match(/^\\d+$/)) {\n    throw new SentryError(\"Invalid Sentry Dsn: Invalid projectId \" + projectId);\n  }\n  if (!isValidProtocol(protocol)) {\n    throw new SentryError(\"Invalid Sentry Dsn: Invalid protocol \" + protocol);\n  }\n  if (port && isNaN(parseInt(port, 10))) {\n    throw new SentryError(\"Invalid Sentry Dsn: Invalid port \" + port);\n  }\n  return true;\n}\n/** The Sentry Dsn, identifying a Sentry instance and project. */\nexport function makeDsn(from) {\n  var components = typeof from === 'string' ? dsnFromString(from) : dsnFromComponents(from);\n  validateDsn(components);\n  return components;\n}","map":{"version":3,"sources":["../../src/dsn.ts"],"names":[],"mappings":"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","sourcesContent":["import { DsnComponents, DsnLike, DsnProtocol } from '@sentry/types';\n\nimport { SentryError } from './error';\nimport { IS_DEBUG_BUILD } from './flags';\n\n/** Regular expression used to parse a Dsn. */\nconst DSN_REGEX = /^(?:(\\w+):)\\/\\/(?:(\\w+)(?::(\\w+))?@)([\\w.-]+)(?::(\\d+))?\\/(.+)/;\n\nfunction isValidProtocol(protocol?: string): protocol is DsnProtocol {\n  return protocol === 'http' || protocol === 'https';\n}\n\n/**\n * Renders the string representation of this Dsn.\n *\n * By default, this will render the public representation without the password\n * component. To get the deprecated private representation, set `withPassword`\n * to true.\n *\n * @param withPassword When set to true, the password will be included.\n */\nexport function dsnToString(dsn: DsnComponents, withPassword: boolean = false): string {\n  const { host, path, pass, port, projectId, protocol, publicKey } = dsn;\n  return (\n    `${protocol}://${publicKey}${withPassword && pass ? `:${pass}` : ''}` +\n    `@${host}${port ? `:${port}` : ''}/${path ? `${path}/` : path}${projectId}`\n  );\n}\n\nfunction dsnFromString(str: string): DsnComponents {\n  const match = DSN_REGEX.exec(str);\n\n  if (!match) {\n    throw new SentryError(`Invalid Sentry Dsn: ${str}`);\n  }\n\n  const [protocol, publicKey, pass = '', host, port = '', lastPath] = match.slice(1);\n  let path = '';\n  let projectId = lastPath;\n\n  const split = projectId.split('/');\n  if (split.length > 1) {\n    path = split.slice(0, -1).join('/');\n    projectId = split.pop() as string;\n  }\n\n  if (projectId) {\n    const projectMatch = projectId.match(/^\\d+/);\n    if (projectMatch) {\n      projectId = projectMatch[0];\n    }\n  }\n\n  return dsnFromComponents({ host, pass, path, projectId, port, protocol: protocol as DsnProtocol, publicKey });\n}\n\nfunction dsnFromComponents(components: DsnComponents): DsnComponents {\n  // TODO this is for backwards compatibility, and can be removed in a future version\n  if ('user' in components && !('publicKey' in components)) {\n    components.publicKey = components.user;\n  }\n\n  return {\n    user: components.publicKey || '',\n    protocol: components.protocol,\n    publicKey: components.publicKey || '',\n    pass: components.pass || '',\n    host: components.host,\n    port: components.port || '',\n    path: components.path || '',\n    projectId: components.projectId,\n  };\n}\n\nfunction validateDsn(dsn: DsnComponents): boolean | void {\n  if (!IS_DEBUG_BUILD) {\n    return;\n  }\n\n  const { port, projectId, protocol } = dsn;\n\n  const requiredComponents: ReadonlyArray<keyof DsnComponents> = ['protocol', 'publicKey', 'host', 'projectId'];\n  requiredComponents.forEach(component => {\n    if (!dsn[component]) {\n      throw new SentryError(`Invalid Sentry Dsn: ${component} missing`);\n    }\n  });\n\n  if (!projectId.match(/^\\d+$/)) {\n    throw new SentryError(`Invalid Sentry Dsn: Invalid projectId ${projectId}`);\n  }\n\n  if (!isValidProtocol(protocol)) {\n    throw new SentryError(`Invalid Sentry Dsn: Invalid protocol ${protocol}`);\n  }\n\n  if (port && isNaN(parseInt(port, 10))) {\n    throw new SentryError(`Invalid Sentry Dsn: Invalid port ${port}`);\n  }\n\n  return true;\n}\n\n/** The Sentry Dsn, identifying a Sentry instance and project. */\nexport function makeDsn(from: DsnLike): DsnComponents {\n  const components = typeof from === 'string' ? dsnFromString(from) : dsnFromComponents(from);\n\n  validateDsn(components);\n\n  return components;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}