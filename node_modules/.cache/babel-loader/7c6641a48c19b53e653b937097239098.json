{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nexport function scan(accumulator, seed) {\n  var hasSeed = false;\n  if (arguments.length >= 2) {\n    hasSeed = true;\n  }\n  return function scanOperatorFunction(source) {\n    return source.lift(new ScanOperator(accumulator, seed, hasSeed));\n  };\n}\nvar ScanOperator = /*@__PURE__*/function () {\n  function ScanOperator(accumulator, seed, hasSeed) {\n    if (hasSeed === void 0) {\n      hasSeed = false;\n    }\n    this.accumulator = accumulator;\n    this.seed = seed;\n    this.hasSeed = hasSeed;\n  }\n  ScanOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));\n  };\n  return ScanOperator;\n}();\nvar ScanSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(ScanSubscriber, _super);\n  function ScanSubscriber(destination, accumulator, _seed, hasSeed) {\n    var _this = _super.call(this, destination) || this;\n    _this.accumulator = accumulator;\n    _this._seed = _seed;\n    _this.hasSeed = hasSeed;\n    _this.index = 0;\n    return _this;\n  }\n  Object.defineProperty(ScanSubscriber.prototype, \"seed\", {\n    get: function () {\n      return this._seed;\n    },\n    set: function (value) {\n      this.hasSeed = true;\n      this._seed = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  ScanSubscriber.prototype._next = function (value) {\n    if (!this.hasSeed) {\n      this.seed = value;\n      this.destination.next(value);\n    } else {\n      return this._tryNext(value);\n    }\n  };\n  ScanSubscriber.prototype._tryNext = function (value) {\n    var index = this.index++;\n    var result;\n    try {\n      result = this.accumulator(this.seed, value, index);\n    } catch (err) {\n      this.destination.error(err);\n    }\n    this.seed = result;\n    this.destination.next(result);\n  };\n  return ScanSubscriber;\n}(Subscriber);","map":{"version":3,"sources":["../../../src/internal/operators/scan.ts"],"names":[],"mappings":";AAEA,OAAO,KAAE,OAAU,MAAE,OAAM;AAoD3B,SAAM,UAAU,QAAW,eAAiE;AAC1F,OAAA,SAAW,IAAG,CAAA,WAAM,EAAA,IAAA,EAAA;EAMpB,IAAI,OAAA,GAAU,KAAA;MACZ,SAAO,CAAG,MAAK,IAAA,CAAA,EAAA;IAChB,OAAA,GAAA,IAAA;EAED;EACE,OAAA,SAAO,oBAAgB,CAAA,MAAa,EAAA;IACpC,OAAA,MAAA,CAAA,IAAA,CAAA,IAAA,YAAA,CAAA,WAAA,EAAA,IAAA,EAAA,OAAA,CAAA,CAAA;EACH,CAAA;AAED;IACE,YAAA,GAAA,aAAoB,YAAmF;EAAA,SAAA,YAAA,CAAA,WAAA,EAAA,IAAA,EAAA,OAAwB,EAAA;IAA3G,IAAA,OAAA,KAAA,KAAA,CAAA,EAAA;MAA6D,OAAA,GAAA,KAAY;IAAU;IAA4B,IAAA,CAAA,WAAA,GAAA,WAAA;IAEnI,IAAA,CAAA,IAAA,GAAA,IAAA;IACE,IAAA,CAAA,OAAO,GAAO,OAAA;EAChB;EACF,YAAA,CAAA,SAAC,CAAA,IAAA,GAAA,UAAA,UAAA,EAAA,MAAA,EAAA;IAAA,OAAA,MAAA,CAAA,SAAA,CAAA,IAAA,cAAA,CAAA,UAAA,EAAA,IAAA,CAAA,WAAA,EAAA,IAAA,CAAA,IAAA,EAAA,IAAA,CAAA,OAAA,CAAA,CAAA;EAOD,CAAA;EAAmC,OAAA,YAAA;GAYjC;IAAA,cAAA,GAEE,aAAA,UAAM,MAAY,EAAA;EAF4B,OAAA,CAAA,SAAA,CAAA,cAAA,EAAA,MAAmD,CAAA;EAAU,SAAA,cAAK,CAAO,WAAA,EAAA,WAAA,EAAA,KAAA,EAAA,OAAA,EAAA;IACrG,IAAA,KAAA,GAAA,MAAA,CAAA,IAAO,CAAS,IAAA,EAAA,WAAA,CAAA,IAAA,IAAA;IAZ5B,KAAA,CAAA,WAAkB,GAAA,WAAA;;IAczB,KAAA,CAAA,OAAA,GAAA,OAAA;IAZD,KAAA,CAAA,KAAA,GAAA,CAAA;IAAA,OAAA,KAAA;EACE;EACF,MAAC,CAAA,cAAA,CAAA,cAAA,CAAA,SAAA,EAAA,MAAA,EAAA;SAED,SAAA,CAAA,EAAS;MACP,OAAK,IAAA,CAAO,KAAG;KACf;IACF,GAAC,EAAA,SAAA,CAAA,KAAA,EAAA;;;IALA,CAAA;IAYS,UAAA,EAAA,IAAV;IACE,YAAU,EAAA;IACR;EACA,cAAK,CAAA,SAAW,CAAC,KAAK,GAAA,UAAO,KAAA,EAAA;IAC9B,IAAA,CAAA,IAAA,CAAA,OAAA,EAAA;MAAM,IAAA,CAAA,IAAA,GAAA,KAAA;MACL,IAAA,CAAA,WAAY,CAAA,IAAS,CAAA,KAAM,CAAC;KAC7B,MACF;MAEO,OAAA,IAAA,CAAA,QAAA,CAAA,KAAQ,CAAhB;IACE;GACA;EACA,cAAI,CAAA,SAAA,CAAA,QAAA,GAAA,UAAA,KAAA,EAAA;QACF,KAAA,GAAM,IAAG,CAAI,KAAC,EAAA;IACf,IAAA,MAAA;IAAC,IAAA;MACA,MAAK,GAAA,IAAA,CAAA,WAAkB,CAAG,IAAE,CAAA,IAAA,EAAA,KAAA,EAAA,KAAA,CAAA;KAC7B,CACD,OAAK,GAAI,EAAG;MACR,IAAC,CAAA,WAAY,CAAI,KAAC,CAAA,GAAQ,CAAA;IAC/B;IACH,IAAA,CAAA,IAAA,GAAA,MAAC;IArCkC,IAAU,CAAA,WAqC5C,CAAA,IAAA,CAAA,MAAA,CAAA","sourcesContent":["/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nexport function scan(accumulator, seed) {\n    var hasSeed = false;\n    if (arguments.length >= 2) {\n        hasSeed = true;\n    }\n    return function scanOperatorFunction(source) {\n        return source.lift(new ScanOperator(accumulator, seed, hasSeed));\n    };\n}\nvar ScanOperator = /*@__PURE__*/ (function () {\n    function ScanOperator(accumulator, seed, hasSeed) {\n        if (hasSeed === void 0) {\n            hasSeed = false;\n        }\n        this.accumulator = accumulator;\n        this.seed = seed;\n        this.hasSeed = hasSeed;\n    }\n    ScanOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));\n    };\n    return ScanOperator;\n}());\nvar ScanSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(ScanSubscriber, _super);\n    function ScanSubscriber(destination, accumulator, _seed, hasSeed) {\n        var _this = _super.call(this, destination) || this;\n        _this.accumulator = accumulator;\n        _this._seed = _seed;\n        _this.hasSeed = hasSeed;\n        _this.index = 0;\n        return _this;\n    }\n    Object.defineProperty(ScanSubscriber.prototype, \"seed\", {\n        get: function () {\n            return this._seed;\n        },\n        set: function (value) {\n            this.hasSeed = true;\n            this._seed = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ScanSubscriber.prototype._next = function (value) {\n        if (!this.hasSeed) {\n            this.seed = value;\n            this.destination.next(value);\n        }\n        else {\n            return this._tryNext(value);\n        }\n    };\n    ScanSubscriber.prototype._tryNext = function (value) {\n        var index = this.index++;\n        var result;\n        try {\n            result = this.accumulator(this.seed, value, index);\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n        this.seed = result;\n        this.destination.next(result);\n    };\n    return ScanSubscriber;\n}(Subscriber));\n//# sourceMappingURL=scan.js.map\n"]},"metadata":{},"sourceType":"module"}