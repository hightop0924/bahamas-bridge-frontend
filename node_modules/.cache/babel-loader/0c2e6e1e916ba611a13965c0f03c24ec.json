{"ast":null,"code":"import { utils } from 'ethers';\nimport { getExplorerUrl, getNetworkCurrency, getNetworkName, getRPCUrl, logError } from 'lib/helpers';\nexport const addTokenToMetamask = async ({\n  address,\n  symbol,\n  decimals\n}) => window.ethereum.request({\n  method: 'wallet_watchAsset',\n  params: {\n    type: 'ERC20',\n    options: {\n      address,\n      symbol,\n      decimals\n    }\n  }\n});\nconst trySwitchChain = async chainId => window.ethereum.request({\n  method: 'wallet_switchEthereumChain',\n  params: [{\n    chainId: utils.hexValue(chainId)\n  }]\n});\nconst tryAddChain = async (chainId, currency) => window.ethereum.request({\n  method: 'wallet_addEthereumChain',\n  params: [{\n    chainId: utils.hexValue(chainId),\n    chainName: getNetworkName(chainId),\n    nativeCurrency: currency,\n    rpcUrls: [getRPCUrl(chainId)],\n    blockExplorerUrls: [getExplorerUrl(chainId)]\n  }]\n});\nexport const addChainToMetaMask = async chainId => {\n  const {\n    name,\n    symbol\n  } = getNetworkCurrency(chainId);\n  const currency = {\n    name,\n    symbol,\n    decimals: 18\n  };\n  const add = ![1, 3, 4, 5, 42].includes(chainId);\n  if (add) {\n    try {\n      await tryAddChain(chainId, currency);\n      return true;\n    } catch (addError) {\n      logError({\n        addError\n      });\n    }\n    return false;\n  }\n  try {\n    await trySwitchChain(chainId);\n    return true;\n  } catch (switchError) {\n    // This error code indicates that the chain has not been added to MetaMask.\n    if (switchError.code === 4902) {\n      try {\n        await tryAddChain(chainId, currency);\n        return true;\n      } catch (addError) {\n        logError({\n          addError\n        });\n      }\n    } else {\n      logError({\n        switchError\n      });\n    }\n  }\n  return false;\n};","map":{"version":3,"names":["utils","getExplorerUrl","getNetworkCurrency","getNetworkName","getRPCUrl","logError","addTokenToMetamask","address","symbol","decimals","window","ethereum","request","method","params","type","options","trySwitchChain","chainId","hexValue","tryAddChain","currency","chainName","nativeCurrency","rpcUrls","blockExplorerUrls","addChainToMetaMask","name","add","includes","addError","switchError","code"],"sources":["/home/hightop/bahamas_bridge/omnibridge-ui/packages/dapp/src/lib/metamask.js"],"sourcesContent":["import { utils } from 'ethers';\nimport {\n  getExplorerUrl,\n  getNetworkCurrency,\n  getNetworkName,\n  getRPCUrl,\n  logError,\n} from 'lib/helpers';\n\nexport const addTokenToMetamask = async ({ address, symbol, decimals }) =>\n  window.ethereum.request({\n    method: 'wallet_watchAsset',\n    params: {\n      type: 'ERC20',\n      options: {\n        address,\n        symbol,\n        decimals,\n      },\n    },\n  });\n\nconst trySwitchChain = async chainId =>\n  window.ethereum.request({\n    method: 'wallet_switchEthereumChain',\n    params: [\n      {\n        chainId: utils.hexValue(chainId),\n      },\n    ],\n  });\n\nconst tryAddChain = async (chainId, currency) =>\n  window.ethereum.request({\n    method: 'wallet_addEthereumChain',\n    params: [\n      {\n        chainId: utils.hexValue(chainId),\n        chainName: getNetworkName(chainId),\n        nativeCurrency: currency,\n        rpcUrls: [getRPCUrl(chainId)],\n        blockExplorerUrls: [getExplorerUrl(chainId)],\n      },\n    ],\n  });\n\nexport const addChainToMetaMask = async chainId => {\n  const { name, symbol } = getNetworkCurrency(chainId);\n  const currency = { name, symbol, decimals: 18 };\n\n  const add = ![1, 3, 4, 5, 42].includes(chainId);\n  if (add) {\n    try {\n      await tryAddChain(chainId, currency);\n      return true;\n    } catch (addError) {\n      logError({ addError });\n    }\n    return false;\n  }\n\n  try {\n    await trySwitchChain(chainId);\n    return true;\n  } catch (switchError) {\n    // This error code indicates that the chain has not been added to MetaMask.\n    if (switchError.code === 4902) {\n      try {\n        await tryAddChain(chainId, currency);\n        return true;\n      } catch (addError) {\n        logError({ addError });\n      }\n    } else {\n      logError({ switchError });\n    }\n  }\n  return false;\n};\n"],"mappings":"AAAA,SAASA,KAAK,QAAQ,QAAQ;AAC9B,SACEC,cAAc,EACdC,kBAAkB,EAClBC,cAAc,EACdC,SAAS,EACTC,QAAQ,QACH,aAAa;AAEpB,OAAO,MAAMC,kBAAkB,GAAG,MAAAA,CAAO;EAAEC,OAAO;EAAEC,MAAM;EAAEC;AAAS,CAAC,KACpEC,MAAM,CAACC,QAAQ,CAACC,OAAO,CAAC;EACtBC,MAAM,EAAE,mBAAmB;EAC3BC,MAAM,EAAE;IACNC,IAAI,EAAE,OAAO;IACbC,OAAO,EAAE;MACPT,OAAO;MACPC,MAAM;MACNC;IACF;EACF;AACF,CAAC,CAAC;AAEJ,MAAMQ,cAAc,GAAG,MAAMC,OAAO,IAClCR,MAAM,CAACC,QAAQ,CAACC,OAAO,CAAC;EACtBC,MAAM,EAAE,4BAA4B;EACpCC,MAAM,EAAE,CACN;IACEI,OAAO,EAAElB,KAAK,CAACmB,QAAQ,CAACD,OAAO;EACjC,CAAC;AAEL,CAAC,CAAC;AAEJ,MAAME,WAAW,GAAG,MAAAA,CAAOF,OAAO,EAAEG,QAAQ,KAC1CX,MAAM,CAACC,QAAQ,CAACC,OAAO,CAAC;EACtBC,MAAM,EAAE,yBAAyB;EACjCC,MAAM,EAAE,CACN;IACEI,OAAO,EAAElB,KAAK,CAACmB,QAAQ,CAACD,OAAO,CAAC;IAChCI,SAAS,EAAEnB,cAAc,CAACe,OAAO,CAAC;IAClCK,cAAc,EAAEF,QAAQ;IACxBG,OAAO,EAAE,CAACpB,SAAS,CAACc,OAAO,CAAC,CAAC;IAC7BO,iBAAiB,EAAE,CAACxB,cAAc,CAACiB,OAAO,CAAC;EAC7C,CAAC;AAEL,CAAC,CAAC;AAEJ,OAAO,MAAMQ,kBAAkB,GAAG,MAAMR,OAAO,IAAI;EACjD,MAAM;IAAES,IAAI;IAAEnB;EAAO,CAAC,GAAGN,kBAAkB,CAACgB,OAAO,CAAC;EACpD,MAAMG,QAAQ,GAAG;IAAEM,IAAI;IAAEnB,MAAM;IAAEC,QAAQ,EAAE;EAAG,CAAC;EAE/C,MAAMmB,GAAG,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAACC,QAAQ,CAACX,OAAO,CAAC;EAC/C,IAAIU,GAAG,EAAE;IACP,IAAI;MACF,MAAMR,WAAW,CAACF,OAAO,EAAEG,QAAQ,CAAC;MACpC,OAAO,IAAI;IACb,CAAC,CAAC,OAAOS,QAAQ,EAAE;MACjBzB,QAAQ,CAAC;QAAEyB;MAAS,CAAC,CAAC;IACxB;IACA,OAAO,KAAK;EACd;EAEA,IAAI;IACF,MAAMb,cAAc,CAACC,OAAO,CAAC;IAC7B,OAAO,IAAI;EACb,CAAC,CAAC,OAAOa,WAAW,EAAE;IACpB;IACA,IAAIA,WAAW,CAACC,IAAI,KAAK,IAAI,EAAE;MAC7B,IAAI;QACF,MAAMZ,WAAW,CAACF,OAAO,EAAEG,QAAQ,CAAC;QACpC,OAAO,IAAI;MACb,CAAC,CAAC,OAAOS,QAAQ,EAAE;QACjBzB,QAAQ,CAAC;UAAEyB;QAAS,CAAC,CAAC;MACxB;IACF,CAAC,MAAM;MACLzB,QAAQ,CAAC;QAAE0B;MAAY,CAAC,CAAC;IAC3B;EACF;EACA,OAAO,KAAK;AACd,CAAC"},"metadata":{},"sourceType":"module"}