{"ast":null,"code":"import { __extends, __values } from \"tslib\";\nimport { logger, timestampWithMs } from '@sentry/utils';\nimport { FINISH_REASON_TAG, IDLE_TRANSACTION_FINISH_REASONS } from './constants';\nimport { IS_DEBUG_BUILD } from './flags';\nimport { SpanRecorder } from './span';\nimport { Transaction } from './transaction';\nexport var DEFAULT_IDLE_TIMEOUT = 1000;\nexport var HEARTBEAT_INTERVAL = 5000;\n/**\n * @inheritDoc\n */\nvar IdleTransactionSpanRecorder = /** @class */function (_super) {\n  __extends(IdleTransactionSpanRecorder, _super);\n  function IdleTransactionSpanRecorder(_pushActivity, _popActivity, transactionSpanId, maxlen) {\n    if (transactionSpanId === void 0) {\n      transactionSpanId = '';\n    }\n    var _this = _super.call(this, maxlen) || this;\n    _this._pushActivity = _pushActivity;\n    _this._popActivity = _popActivity;\n    _this.transactionSpanId = transactionSpanId;\n    return _this;\n  }\n  /**\n   * @inheritDoc\n   */\n  IdleTransactionSpanRecorder.prototype.add = function (span) {\n    var _this = this;\n    // We should make sure we do not push and pop activities for\n    // the transaction that this span recorder belongs to.\n    if (span.spanId !== this.transactionSpanId) {\n      // We patch span.finish() to pop an activity after setting an endTimestamp.\n      span.finish = function (endTimestamp) {\n        span.endTimestamp = typeof endTimestamp === 'number' ? endTimestamp : timestampWithMs();\n        _this._popActivity(span.spanId);\n      };\n      // We should only push new activities if the span does not have an end timestamp.\n      if (span.endTimestamp === undefined) {\n        this._pushActivity(span.spanId);\n      }\n    }\n    _super.prototype.add.call(this, span);\n  };\n  return IdleTransactionSpanRecorder;\n}(SpanRecorder);\nexport { IdleTransactionSpanRecorder };\n/**\n * An IdleTransaction is a transaction that automatically finishes. It does this by tracking child spans as activities.\n * You can have multiple IdleTransactions active, but if the `onScope` option is specified, the idle transaction will\n * put itself on the scope on creation.\n */\nvar IdleTransaction = /** @class */function (_super) {\n  __extends(IdleTransaction, _super);\n  function IdleTransaction(transactionContext, _idleHub,\n  /**\n   * The time to wait in ms until the idle transaction will be finished.\n   * @default 1000\n   */\n  _idleTimeout,\n  // Whether or not the transaction should put itself on the scope when it starts and pop itself off when it ends\n  _onScope) {\n    if (_idleTimeout === void 0) {\n      _idleTimeout = DEFAULT_IDLE_TIMEOUT;\n    }\n    if (_onScope === void 0) {\n      _onScope = false;\n    }\n    var _this = _super.call(this, transactionContext, _idleHub) || this;\n    _this._idleHub = _idleHub;\n    _this._idleTimeout = _idleTimeout;\n    _this._onScope = _onScope;\n    // Activities store a list of active spans\n    _this.activities = {};\n    // Amount of times heartbeat has counted. Will cause transaction to finish after 3 beats.\n    _this._heartbeatCounter = 0;\n    // We should not use heartbeat if we finished a transaction\n    _this._finished = false;\n    _this._beforeFinishCallbacks = [];\n    if (_idleHub && _onScope) {\n      // There should only be one active transaction on the scope\n      clearActiveTransaction(_idleHub);\n      // We set the transaction here on the scope so error events pick up the trace\n      // context and attach it to the error.\n      IS_DEBUG_BUILD && logger.log(\"Setting idle transaction on scope. Span ID: \" + _this.spanId);\n      _idleHub.configureScope(function (scope) {\n        return scope.setSpan(_this);\n      });\n    }\n    _this._initTimeout = setTimeout(function () {\n      if (!_this._finished) {\n        _this.finish();\n      }\n    }, _this._idleTimeout);\n    return _this;\n  }\n  /** {@inheritDoc} */\n  IdleTransaction.prototype.finish = function (endTimestamp) {\n    var e_1, _a;\n    var _this = this;\n    if (endTimestamp === void 0) {\n      endTimestamp = timestampWithMs();\n    }\n    this._finished = true;\n    this.activities = {};\n    if (this.spanRecorder) {\n      IS_DEBUG_BUILD && logger.log('[Tracing] finishing IdleTransaction', new Date(endTimestamp * 1000).toISOString(), this.op);\n      try {\n        for (var _b = __values(this._beforeFinishCallbacks), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var callback = _c.value;\n          callback(this, endTimestamp);\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n      this.spanRecorder.spans = this.spanRecorder.spans.filter(function (span) {\n        // If we are dealing with the transaction itself, we just return it\n        if (span.spanId === _this.spanId) {\n          return true;\n        }\n        // We cancel all pending spans with status \"cancelled\" to indicate the idle transaction was finished early\n        if (!span.endTimestamp) {\n          span.endTimestamp = endTimestamp;\n          span.setStatus('cancelled');\n          IS_DEBUG_BUILD && logger.log('[Tracing] cancelling span since transaction ended early', JSON.stringify(span, undefined, 2));\n        }\n        var keepSpan = span.startTimestamp < endTimestamp;\n        if (!keepSpan) {\n          IS_DEBUG_BUILD && logger.log('[Tracing] discarding Span since it happened after Transaction was finished', JSON.stringify(span, undefined, 2));\n        }\n        return keepSpan;\n      });\n      IS_DEBUG_BUILD && logger.log('[Tracing] flushing IdleTransaction');\n    } else {\n      IS_DEBUG_BUILD && logger.log('[Tracing] No active IdleTransaction');\n    }\n    // if `this._onScope` is `true`, the transaction put itself on the scope when it started\n    if (this._onScope) {\n      clearActiveTransaction(this._idleHub);\n    }\n    return _super.prototype.finish.call(this, endTimestamp);\n  };\n  /**\n   * Register a callback function that gets excecuted before the transaction finishes.\n   * Useful for cleanup or if you want to add any additional spans based on current context.\n   *\n   * This is exposed because users have no other way of running something before an idle transaction\n   * finishes.\n   */\n  IdleTransaction.prototype.registerBeforeFinishCallback = function (callback) {\n    this._beforeFinishCallbacks.push(callback);\n  };\n  /**\n   * @inheritDoc\n   */\n  IdleTransaction.prototype.initSpanRecorder = function (maxlen) {\n    var _this = this;\n    if (!this.spanRecorder) {\n      var pushActivity = function (id) {\n        if (_this._finished) {\n          return;\n        }\n        _this._pushActivity(id);\n      };\n      var popActivity = function (id) {\n        if (_this._finished) {\n          return;\n        }\n        _this._popActivity(id);\n      };\n      this.spanRecorder = new IdleTransactionSpanRecorder(pushActivity, popActivity, this.spanId, maxlen);\n      // Start heartbeat so that transactions do not run forever.\n      IS_DEBUG_BUILD && logger.log('Starting heartbeat');\n      this._pingHeartbeat();\n    }\n    this.spanRecorder.add(this);\n  };\n  /**\n   * Start tracking a specific activity.\n   * @param spanId The span id that represents the activity\n   */\n  IdleTransaction.prototype._pushActivity = function (spanId) {\n    if (this._initTimeout) {\n      clearTimeout(this._initTimeout);\n      this._initTimeout = undefined;\n    }\n    IS_DEBUG_BUILD && logger.log(\"[Tracing] pushActivity: \" + spanId);\n    this.activities[spanId] = true;\n    IS_DEBUG_BUILD && logger.log('[Tracing] new activities count', Object.keys(this.activities).length);\n  };\n  /**\n   * Remove an activity from usage\n   * @param spanId The span id that represents the activity\n   */\n  IdleTransaction.prototype._popActivity = function (spanId) {\n    var _this = this;\n    if (this.activities[spanId]) {\n      IS_DEBUG_BUILD && logger.log(\"[Tracing] popActivity \" + spanId);\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete this.activities[spanId];\n      IS_DEBUG_BUILD && logger.log('[Tracing] new activities count', Object.keys(this.activities).length);\n    }\n    if (Object.keys(this.activities).length === 0) {\n      var timeout = this._idleTimeout;\n      // We need to add the timeout here to have the real endtimestamp of the transaction\n      // Remember timestampWithMs is in seconds, timeout is in ms\n      var end_1 = timestampWithMs() + timeout / 1000;\n      setTimeout(function () {\n        if (!_this._finished) {\n          _this.setTag(FINISH_REASON_TAG, IDLE_TRANSACTION_FINISH_REASONS[1]);\n          _this.finish(end_1);\n        }\n      }, timeout);\n    }\n  };\n  /**\n   * Checks when entries of this.activities are not changing for 3 beats.\n   * If this occurs we finish the transaction.\n   */\n  IdleTransaction.prototype._beat = function () {\n    // We should not be running heartbeat if the idle transaction is finished.\n    if (this._finished) {\n      return;\n    }\n    var heartbeatString = Object.keys(this.activities).join('');\n    if (heartbeatString === this._prevHeartbeatString) {\n      this._heartbeatCounter += 1;\n    } else {\n      this._heartbeatCounter = 1;\n    }\n    this._prevHeartbeatString = heartbeatString;\n    if (this._heartbeatCounter >= 3) {\n      IS_DEBUG_BUILD && logger.log('[Tracing] Transaction finished because of no change for 3 heart beats');\n      this.setStatus('deadline_exceeded');\n      this.setTag(FINISH_REASON_TAG, IDLE_TRANSACTION_FINISH_REASONS[0]);\n      this.finish();\n    } else {\n      this._pingHeartbeat();\n    }\n  };\n  /**\n   * Pings the heartbeat\n   */\n  IdleTransaction.prototype._pingHeartbeat = function () {\n    var _this = this;\n    IS_DEBUG_BUILD && logger.log(\"pinging Heartbeat -> current counter: \" + this._heartbeatCounter);\n    setTimeout(function () {\n      _this._beat();\n    }, HEARTBEAT_INTERVAL);\n  };\n  return IdleTransaction;\n}(Transaction);\nexport { IdleTransaction };\n/**\n * Reset transaction on scope to `undefined`\n */\nfunction clearActiveTransaction(hub) {\n  if (hub) {\n    var scope = hub.getScope();\n    if (scope) {\n      var transaction = scope.getTransaction();\n      if (transaction) {\n        scope.setSpan(undefined);\n      }\n    }\n  }\n}","map":{"version":3,"sources":["../../../src/idletransaction.ts"],"names":[],"mappings":"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","sourcesContent":["import { Hub } from '@sentry/hub';\nimport { TransactionContext } from '@sentry/types';\nimport { logger, timestampWithMs } from '@sentry/utils';\n\nimport { FINISH_REASON_TAG, IDLE_TRANSACTION_FINISH_REASONS } from './constants';\nimport { IS_DEBUG_BUILD } from './flags';\nimport { Span, SpanRecorder } from './span';\nimport { Transaction } from './transaction';\n\nexport const DEFAULT_IDLE_TIMEOUT = 1000;\nexport const HEARTBEAT_INTERVAL = 5000;\n\n/**\n * @inheritDoc\n */\nexport class IdleTransactionSpanRecorder extends SpanRecorder {\n  public constructor(\n    private readonly _pushActivity: (id: string) => void,\n    private readonly _popActivity: (id: string) => void,\n    public transactionSpanId: string = '',\n    maxlen?: number,\n  ) {\n    super(maxlen);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public add(span: Span): void {\n    // We should make sure we do not push and pop activities for\n    // the transaction that this span recorder belongs to.\n    if (span.spanId !== this.transactionSpanId) {\n      // We patch span.finish() to pop an activity after setting an endTimestamp.\n      span.finish = (endTimestamp?: number) => {\n        span.endTimestamp = typeof endTimestamp === 'number' ? endTimestamp : timestampWithMs();\n        this._popActivity(span.spanId);\n      };\n\n      // We should only push new activities if the span does not have an end timestamp.\n      if (span.endTimestamp === undefined) {\n        this._pushActivity(span.spanId);\n      }\n    }\n\n    super.add(span);\n  }\n}\n\nexport type BeforeFinishCallback = (transactionSpan: IdleTransaction, endTimestamp: number) => void;\n\n/**\n * An IdleTransaction is a transaction that automatically finishes. It does this by tracking child spans as activities.\n * You can have multiple IdleTransactions active, but if the `onScope` option is specified, the idle transaction will\n * put itself on the scope on creation.\n */\nexport class IdleTransaction extends Transaction {\n  // Activities store a list of active spans\n  public activities: Record<string, boolean> = {};\n\n  // Track state of activities in previous heartbeat\n  private _prevHeartbeatString: string | undefined;\n\n  // Amount of times heartbeat has counted. Will cause transaction to finish after 3 beats.\n  private _heartbeatCounter: number = 0;\n\n  // We should not use heartbeat if we finished a transaction\n  private _finished: boolean = false;\n\n  private readonly _beforeFinishCallbacks: BeforeFinishCallback[] = [];\n\n  /**\n   * If a transaction is created and no activities are added, we want to make sure that\n   * it times out properly. This is cleared and not used when activities are added.\n   */\n  private _initTimeout: ReturnType<typeof setTimeout> | undefined;\n\n  public constructor(\n    transactionContext: TransactionContext,\n    private readonly _idleHub?: Hub,\n    /**\n     * The time to wait in ms until the idle transaction will be finished.\n     * @default 1000\n     */\n    private readonly _idleTimeout: number = DEFAULT_IDLE_TIMEOUT,\n    // Whether or not the transaction should put itself on the scope when it starts and pop itself off when it ends\n    private readonly _onScope: boolean = false,\n  ) {\n    super(transactionContext, _idleHub);\n\n    if (_idleHub && _onScope) {\n      // There should only be one active transaction on the scope\n      clearActiveTransaction(_idleHub);\n\n      // We set the transaction here on the scope so error events pick up the trace\n      // context and attach it to the error.\n      IS_DEBUG_BUILD && logger.log(`Setting idle transaction on scope. Span ID: ${this.spanId}`);\n      _idleHub.configureScope(scope => scope.setSpan(this));\n    }\n\n    this._initTimeout = setTimeout(() => {\n      if (!this._finished) {\n        this.finish();\n      }\n    }, this._idleTimeout);\n  }\n\n  /** {@inheritDoc} */\n  public finish(endTimestamp: number = timestampWithMs()): string | undefined {\n    this._finished = true;\n    this.activities = {};\n\n    if (this.spanRecorder) {\n      IS_DEBUG_BUILD &&\n        logger.log('[Tracing] finishing IdleTransaction', new Date(endTimestamp * 1000).toISOString(), this.op);\n\n      for (const callback of this._beforeFinishCallbacks) {\n        callback(this, endTimestamp);\n      }\n\n      this.spanRecorder.spans = this.spanRecorder.spans.filter((span: Span) => {\n        // If we are dealing with the transaction itself, we just return it\n        if (span.spanId === this.spanId) {\n          return true;\n        }\n\n        // We cancel all pending spans with status \"cancelled\" to indicate the idle transaction was finished early\n        if (!span.endTimestamp) {\n          span.endTimestamp = endTimestamp;\n          span.setStatus('cancelled');\n          IS_DEBUG_BUILD &&\n            logger.log('[Tracing] cancelling span since transaction ended early', JSON.stringify(span, undefined, 2));\n        }\n\n        const keepSpan = span.startTimestamp < endTimestamp;\n        if (!keepSpan) {\n          IS_DEBUG_BUILD &&\n            logger.log(\n              '[Tracing] discarding Span since it happened after Transaction was finished',\n              JSON.stringify(span, undefined, 2),\n            );\n        }\n        return keepSpan;\n      });\n\n      IS_DEBUG_BUILD && logger.log('[Tracing] flushing IdleTransaction');\n    } else {\n      IS_DEBUG_BUILD && logger.log('[Tracing] No active IdleTransaction');\n    }\n\n    // if `this._onScope` is `true`, the transaction put itself on the scope when it started\n    if (this._onScope) {\n      clearActiveTransaction(this._idleHub);\n    }\n\n    return super.finish(endTimestamp);\n  }\n\n  /**\n   * Register a callback function that gets excecuted before the transaction finishes.\n   * Useful for cleanup or if you want to add any additional spans based on current context.\n   *\n   * This is exposed because users have no other way of running something before an idle transaction\n   * finishes.\n   */\n  public registerBeforeFinishCallback(callback: BeforeFinishCallback): void {\n    this._beforeFinishCallbacks.push(callback);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public initSpanRecorder(maxlen?: number): void {\n    if (!this.spanRecorder) {\n      const pushActivity = (id: string): void => {\n        if (this._finished) {\n          return;\n        }\n        this._pushActivity(id);\n      };\n      const popActivity = (id: string): void => {\n        if (this._finished) {\n          return;\n        }\n        this._popActivity(id);\n      };\n\n      this.spanRecorder = new IdleTransactionSpanRecorder(pushActivity, popActivity, this.spanId, maxlen);\n\n      // Start heartbeat so that transactions do not run forever.\n      IS_DEBUG_BUILD && logger.log('Starting heartbeat');\n      this._pingHeartbeat();\n    }\n    this.spanRecorder.add(this);\n  }\n\n  /**\n   * Start tracking a specific activity.\n   * @param spanId The span id that represents the activity\n   */\n  private _pushActivity(spanId: string): void {\n    if (this._initTimeout) {\n      clearTimeout(this._initTimeout);\n      this._initTimeout = undefined;\n    }\n    IS_DEBUG_BUILD && logger.log(`[Tracing] pushActivity: ${spanId}`);\n    this.activities[spanId] = true;\n    IS_DEBUG_BUILD && logger.log('[Tracing] new activities count', Object.keys(this.activities).length);\n  }\n\n  /**\n   * Remove an activity from usage\n   * @param spanId The span id that represents the activity\n   */\n  private _popActivity(spanId: string): void {\n    if (this.activities[spanId]) {\n      IS_DEBUG_BUILD && logger.log(`[Tracing] popActivity ${spanId}`);\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete this.activities[spanId];\n      IS_DEBUG_BUILD && logger.log('[Tracing] new activities count', Object.keys(this.activities).length);\n    }\n\n    if (Object.keys(this.activities).length === 0) {\n      const timeout = this._idleTimeout;\n      // We need to add the timeout here to have the real endtimestamp of the transaction\n      // Remember timestampWithMs is in seconds, timeout is in ms\n      const end = timestampWithMs() + timeout / 1000;\n\n      setTimeout(() => {\n        if (!this._finished) {\n          this.setTag(FINISH_REASON_TAG, IDLE_TRANSACTION_FINISH_REASONS[1]);\n          this.finish(end);\n        }\n      }, timeout);\n    }\n  }\n\n  /**\n   * Checks when entries of this.activities are not changing for 3 beats.\n   * If this occurs we finish the transaction.\n   */\n  private _beat(): void {\n    // We should not be running heartbeat if the idle transaction is finished.\n    if (this._finished) {\n      return;\n    }\n\n    const heartbeatString = Object.keys(this.activities).join('');\n\n    if (heartbeatString === this._prevHeartbeatString) {\n      this._heartbeatCounter += 1;\n    } else {\n      this._heartbeatCounter = 1;\n    }\n\n    this._prevHeartbeatString = heartbeatString;\n\n    if (this._heartbeatCounter >= 3) {\n      IS_DEBUG_BUILD && logger.log('[Tracing] Transaction finished because of no change for 3 heart beats');\n      this.setStatus('deadline_exceeded');\n      this.setTag(FINISH_REASON_TAG, IDLE_TRANSACTION_FINISH_REASONS[0]);\n      this.finish();\n    } else {\n      this._pingHeartbeat();\n    }\n  }\n\n  /**\n   * Pings the heartbeat\n   */\n  private _pingHeartbeat(): void {\n    IS_DEBUG_BUILD && logger.log(`pinging Heartbeat -> current counter: ${this._heartbeatCounter}`);\n    setTimeout(() => {\n      this._beat();\n    }, HEARTBEAT_INTERVAL);\n  }\n}\n\n/**\n * Reset transaction on scope to `undefined`\n */\nfunction clearActiveTransaction(hub?: Hub): void {\n  if (hub) {\n    const scope = hub.getScope();\n    if (scope) {\n      const transaction = scope.getTransaction();\n      if (transaction) {\n        scope.setSpan(undefined);\n      }\n    }\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}