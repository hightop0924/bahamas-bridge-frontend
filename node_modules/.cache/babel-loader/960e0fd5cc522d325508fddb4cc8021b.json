{"ast":null,"code":"import { getGlobalObject } from '@sentry/utils';\nvar global = getGlobalObject();\n/**\n * Creates routing instrumentation for React Router v3\n * Works for React Router >= 3.2.0 and < 4.0.0\n *\n * @param history object from the `history` library\n * @param routes a list of all routes, should be\n * @param match `Router.match` utility\n */\nexport function reactRouterV3Instrumentation(history, routes, match) {\n  return function (startTransaction, startTransactionOnPageLoad, startTransactionOnLocationChange) {\n    if (startTransactionOnPageLoad === void 0) {\n      startTransactionOnPageLoad = true;\n    }\n    if (startTransactionOnLocationChange === void 0) {\n      startTransactionOnLocationChange = true;\n    }\n    var activeTransaction;\n    var prevName;\n    // Have to use global.location because history.location might not be defined.\n    if (startTransactionOnPageLoad && global && global.location) {\n      normalizeTransactionName(routes, global.location, match, function (localName) {\n        prevName = localName;\n        activeTransaction = startTransaction({\n          name: prevName,\n          op: 'pageload',\n          tags: {\n            'routing.instrumentation': 'react-router-v3'\n          }\n        });\n      });\n    }\n    if (startTransactionOnLocationChange && history.listen) {\n      history.listen(function (location) {\n        if (location.action === 'PUSH' || location.action === 'POP') {\n          if (activeTransaction) {\n            activeTransaction.finish();\n          }\n          var tags_1 = {\n            'routing.instrumentation': 'react-router-v3'\n          };\n          if (prevName) {\n            tags_1.from = prevName;\n          }\n          normalizeTransactionName(routes, location, match, function (localName) {\n            prevName = localName;\n            activeTransaction = startTransaction({\n              name: prevName,\n              op: 'navigation',\n              tags: tags_1\n            });\n          });\n        }\n      });\n    }\n  };\n}\n/**\n * Normalize transaction names using `Router.match`\n */\nfunction normalizeTransactionName(appRoutes, location, match, callback) {\n  var name = location.pathname;\n  match({\n    location: location,\n    routes: appRoutes\n  }, function (error, _redirectLocation, renderProps) {\n    if (error || !renderProps) {\n      return callback(name);\n    }\n    var routePath = getRouteStringFromRoutes(renderProps.routes || []);\n    if (routePath.length === 0 || routePath === '/*') {\n      return callback(name);\n    }\n    name = routePath;\n    return callback(name);\n  });\n}\n/**\n * Generate route name from array of routes\n */\nfunction getRouteStringFromRoutes(routes) {\n  if (!Array.isArray(routes) || routes.length === 0) {\n    return '';\n  }\n  var routesWithPaths = routes.filter(function (route) {\n    return !!route.path;\n  });\n  var index = -1;\n  for (var x = routesWithPaths.length - 1; x >= 0; x--) {\n    var route = routesWithPaths[x];\n    if (route.path && route.path.startsWith('/')) {\n      index = x;\n      break;\n    }\n  }\n  return routesWithPaths.slice(index).filter(function (_a) {\n    var path = _a.path;\n    return !!path;\n  }).map(function (_a) {\n    var path = _a.path;\n    return path;\n  }).join('');\n}","map":{"version":3,"sources":["../../src/reactrouterv3.ts"],"names":[],"mappings":"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","sourcesContent":["import { Primitive, Transaction, TransactionContext } from '@sentry/types';\nimport { getGlobalObject } from '@sentry/utils';\n\nimport { Location, ReactRouterInstrumentation } from './types';\n\n// Many of the types below had to be mocked out to prevent typescript issues\n// these types are required for correct functionality.\n\ntype HistoryV3 = {\n  location?: Location;\n  listen?(cb: (location: Location) => void): void;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n} & Record<string, any>;\n\nexport type Route = { path?: string; childRoutes?: Route[] };\n\nexport type Match = (\n  props: { location: Location; routes: Route[] },\n  cb: (error?: Error, _redirectLocation?: Location, renderProps?: { routes?: Route[] }) => void,\n) => void;\n\nconst global = getGlobalObject<Window>();\n\n/**\n * Creates routing instrumentation for React Router v3\n * Works for React Router >= 3.2.0 and < 4.0.0\n *\n * @param history object from the `history` library\n * @param routes a list of all routes, should be\n * @param match `Router.match` utility\n */\nexport function reactRouterV3Instrumentation(\n  history: HistoryV3,\n  routes: Route[],\n  match: Match,\n): ReactRouterInstrumentation {\n  return (\n    startTransaction: (context: TransactionContext) => Transaction | undefined,\n    startTransactionOnPageLoad: boolean = true,\n    startTransactionOnLocationChange: boolean = true,\n  ) => {\n    let activeTransaction: Transaction | undefined;\n    let prevName: string | undefined;\n\n    // Have to use global.location because history.location might not be defined.\n    if (startTransactionOnPageLoad && global && global.location) {\n      normalizeTransactionName(routes, global.location as unknown as Location, match, (localName: string) => {\n        prevName = localName;\n        activeTransaction = startTransaction({\n          name: prevName,\n          op: 'pageload',\n          tags: {\n            'routing.instrumentation': 'react-router-v3',\n          },\n        });\n      });\n    }\n\n    if (startTransactionOnLocationChange && history.listen) {\n      history.listen(location => {\n        if (location.action === 'PUSH' || location.action === 'POP') {\n          if (activeTransaction) {\n            activeTransaction.finish();\n          }\n          const tags: Record<string, Primitive> = {\n            'routing.instrumentation': 'react-router-v3',\n          };\n          if (prevName) {\n            tags.from = prevName;\n          }\n          normalizeTransactionName(routes, location, match, (localName: string) => {\n            prevName = localName;\n            activeTransaction = startTransaction({\n              name: prevName,\n              op: 'navigation',\n              tags,\n            });\n          });\n        }\n      });\n    }\n  };\n}\n\n/**\n * Normalize transaction names using `Router.match`\n */\nfunction normalizeTransactionName(\n  appRoutes: Route[],\n  location: Location,\n  match: Match,\n  callback: (pathname: string) => void,\n): void {\n  let name = location.pathname;\n  match(\n    {\n      location,\n      routes: appRoutes,\n    },\n    (error, _redirectLocation, renderProps) => {\n      if (error || !renderProps) {\n        return callback(name);\n      }\n\n      const routePath = getRouteStringFromRoutes(renderProps.routes || []);\n      if (routePath.length === 0 || routePath === '/*') {\n        return callback(name);\n      }\n\n      name = routePath;\n      return callback(name);\n    },\n  );\n}\n\n/**\n * Generate route name from array of routes\n */\nfunction getRouteStringFromRoutes(routes: Route[]): string {\n  if (!Array.isArray(routes) || routes.length === 0) {\n    return '';\n  }\n\n  const routesWithPaths: Route[] = routes.filter((route: Route) => !!route.path);\n\n  let index = -1;\n  for (let x = routesWithPaths.length - 1; x >= 0; x--) {\n    const route = routesWithPaths[x];\n    if (route.path && route.path.startsWith('/')) {\n      index = x;\n      break;\n    }\n  }\n\n  return routesWithPaths\n    .slice(index)\n    .filter(({ path }) => !!path)\n    .map(({ path }) => path)\n    .join('');\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}