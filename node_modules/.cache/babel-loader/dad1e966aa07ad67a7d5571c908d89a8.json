{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useWeb3Context } from 'contexts/Web3Context';\nimport { Contract } from 'ethers';\nimport { useBridgeDirection } from 'hooks/useBridgeDirection';\nimport { logError } from 'lib/helpers';\nimport { getEthersProvider } from 'lib/providers';\nimport { useCallback, useEffect, useState } from 'react';\nexport const useMediatorInfo = () => {\n  _s();\n  const {\n    homeChainId,\n    homeMediatorAddress\n  } = useBridgeDirection();\n  const [currentDay, setCurrentDay] = useState();\n  const [feeManagerAddress, setFeeManagerAddress] = useState();\n  const [fetching, setFetching] = useState(false);\n  const {\n    account\n  } = useWeb3Context();\n  const [isRewardAddress, setRewardAddress] = useState(false);\n  const [homeToForeignFeeType, setHomeToForeignFeeType] = useState('0x741ede137d0537e88e0ea0ff25b1f22d837903dbbee8980b4a06e8523247ee26');\n  const [foreignToHomeFeeType, setForeignToHomeFeeType] = useState('0x03be2b2875cb41e0e77355e802a16769bb8dfcf825061cde185c73bf94f12625');\n  const calculateFees = useCallback(async (managerAddress, chainId) => {\n    const ethersProvider = await getEthersProvider(chainId);\n    const abi = ['function FOREIGN_TO_HOME_FEE() view returns (bytes32)', 'function HOME_TO_FOREIGN_FEE() view returns (bytes32)'];\n    const feeManagerContract = new Contract(managerAddress, abi, ethersProvider);\n    const [home, foreign] = await Promise.all([feeManagerContract.FOREIGN_TO_HOME_FEE(), feeManagerContract.HOME_TO_FOREIGN_FEE()]);\n    setForeignToHomeFeeType(home);\n    setHomeToForeignFeeType(foreign);\n  }, []);\n  const checkRewardAddress = useCallback(async (managerAddress, chainId) => {\n    if (!account) {\n      setRewardAddress(false);\n      return;\n    }\n    const ethersProvider = await getEthersProvider(chainId);\n    const abi = ['function isRewardAddress(address) view returns (bool)'];\n    const feeManagerContract = new Contract(managerAddress, abi, ethersProvider);\n    const is = await feeManagerContract.isRewardAddress(account);\n    setRewardAddress(is);\n  }, [account]);\n  useEffect(() => {\n    const processMediatorData = async () => {\n      try {\n        setFetching(true);\n        const ethersProvider = await getEthersProvider(homeChainId);\n        const abi = ['function getCurrentDay() view returns (uint256)', 'function feeManager() public view returns (address)', 'function getBridgeInterfacesVersion() external pure returns (uint64, uint64, uint64)'];\n        const mediatorContract = new Contract(homeMediatorAddress, abi, ethersProvider);\n        const [versionArray, day] = await Promise.all([mediatorContract.getBridgeInterfacesVersion(), mediatorContract.getCurrentDay()]);\n        setCurrentDay(day);\n        const version = versionArray.map(v => v.toNumber()).join('.');\n        let managerAddress = homeMediatorAddress;\n        if (version >= '2.1.0') {\n          managerAddress = await mediatorContract.feeManager();\n        }\n        setFeeManagerAddress(managerAddress);\n        await Promise.all([checkRewardAddress(managerAddress, homeChainId), calculateFees(managerAddress, homeChainId)]);\n      } catch (error) {\n        logError('Error fetching mediator info:', error);\n      } finally {\n        setFetching(false);\n      }\n    };\n    processMediatorData();\n  }, [homeMediatorAddress, homeChainId, calculateFees, checkRewardAddress]);\n  return {\n    fetching,\n    currentDay,\n    feeManagerAddress,\n    isRewardAddress,\n    homeToForeignFeeType,\n    foreignToHomeFeeType\n  };\n};\n_s(useMediatorInfo, \"t00Jw6TinDXJ3MBu9gViYoRv8Jo=\", false, function () {\n  return [useBridgeDirection, useWeb3Context];\n});","map":{"version":3,"names":["useWeb3Context","Contract","useBridgeDirection","logError","getEthersProvider","useCallback","useEffect","useState","useMediatorInfo","_s","homeChainId","homeMediatorAddress","currentDay","setCurrentDay","feeManagerAddress","setFeeManagerAddress","fetching","setFetching","account","isRewardAddress","setRewardAddress","homeToForeignFeeType","setHomeToForeignFeeType","foreignToHomeFeeType","setForeignToHomeFeeType","calculateFees","managerAddress","chainId","ethersProvider","abi","feeManagerContract","home","foreign","Promise","all","FOREIGN_TO_HOME_FEE","HOME_TO_FOREIGN_FEE","checkRewardAddress","is","processMediatorData","mediatorContract","versionArray","day","getBridgeInterfacesVersion","getCurrentDay","version","map","v","toNumber","join","feeManager","error"],"sources":["/home/hightop/bahamas_bridge/omnibridge-ui/packages/dapp/src/hooks/useMediatorInfo.js"],"sourcesContent":["import { useWeb3Context } from 'contexts/Web3Context';\nimport { Contract } from 'ethers';\nimport { useBridgeDirection } from 'hooks/useBridgeDirection';\nimport { logError } from 'lib/helpers';\nimport { getEthersProvider } from 'lib/providers';\nimport { useCallback, useEffect, useState } from 'react';\n\nexport const useMediatorInfo = () => {\n  const { homeChainId, homeMediatorAddress } = useBridgeDirection();\n  const [currentDay, setCurrentDay] = useState();\n  const [feeManagerAddress, setFeeManagerAddress] = useState();\n  const [fetching, setFetching] = useState(false);\n  const { account } = useWeb3Context();\n\n  const [isRewardAddress, setRewardAddress] = useState(false);\n  const [homeToForeignFeeType, setHomeToForeignFeeType] = useState(\n    '0x741ede137d0537e88e0ea0ff25b1f22d837903dbbee8980b4a06e8523247ee26',\n  );\n  const [foreignToHomeFeeType, setForeignToHomeFeeType] = useState(\n    '0x03be2b2875cb41e0e77355e802a16769bb8dfcf825061cde185c73bf94f12625',\n  );\n\n  const calculateFees = useCallback(async (managerAddress, chainId) => {\n    const ethersProvider = await getEthersProvider(chainId);\n    const abi = [\n      'function FOREIGN_TO_HOME_FEE() view returns (bytes32)',\n      'function HOME_TO_FOREIGN_FEE() view returns (bytes32)',\n    ];\n    const feeManagerContract = new Contract(\n      managerAddress,\n      abi,\n      ethersProvider,\n    );\n\n    const [home, foreign] = await Promise.all([\n      feeManagerContract.FOREIGN_TO_HOME_FEE(),\n      feeManagerContract.HOME_TO_FOREIGN_FEE(),\n    ]);\n    setForeignToHomeFeeType(home);\n    setHomeToForeignFeeType(foreign);\n  }, []);\n\n  const checkRewardAddress = useCallback(\n    async (managerAddress, chainId) => {\n      if (!account) {\n        setRewardAddress(false);\n        return;\n      }\n      const ethersProvider = await getEthersProvider(chainId);\n      const abi = ['function isRewardAddress(address) view returns (bool)'];\n      const feeManagerContract = new Contract(\n        managerAddress,\n        abi,\n        ethersProvider,\n      );\n      const is = await feeManagerContract.isRewardAddress(account);\n\n      setRewardAddress(is);\n    },\n    [account],\n  );\n\n  useEffect(() => {\n    const processMediatorData = async () => {\n      try {\n        setFetching(true);\n        const ethersProvider = await getEthersProvider(homeChainId);\n        const abi = [\n          'function getCurrentDay() view returns (uint256)',\n          'function feeManager() public view returns (address)',\n          'function getBridgeInterfacesVersion() external pure returns (uint64, uint64, uint64)',\n        ];\n\n        const mediatorContract = new Contract(\n          homeMediatorAddress,\n          abi,\n          ethersProvider,\n        );\n\n        const [versionArray, day] = await Promise.all([\n          mediatorContract.getBridgeInterfacesVersion(),\n          mediatorContract.getCurrentDay(),\n        ]);\n\n        setCurrentDay(day);\n\n        const version = versionArray.map(v => v.toNumber()).join('.');\n        let managerAddress = homeMediatorAddress;\n        if (version >= '2.1.0') {\n          managerAddress = await mediatorContract.feeManager();\n        }\n\n        setFeeManagerAddress(managerAddress);\n        await Promise.all([\n          checkRewardAddress(managerAddress, homeChainId),\n          calculateFees(managerAddress, homeChainId),\n        ]);\n      } catch (error) {\n        logError('Error fetching mediator info:', error);\n      } finally {\n        setFetching(false);\n      }\n    };\n    processMediatorData();\n  }, [homeMediatorAddress, homeChainId, calculateFees, checkRewardAddress]);\n\n  return {\n    fetching,\n    currentDay,\n    feeManagerAddress,\n    isRewardAddress,\n    homeToForeignFeeType,\n    foreignToHomeFeeType,\n  };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}