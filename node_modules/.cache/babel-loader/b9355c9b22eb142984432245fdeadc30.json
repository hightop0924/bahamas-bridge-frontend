{"ast":null,"code":"import { SentryError } from './error';\nimport { rejectedSyncPromise, resolvedSyncPromise, SyncPromise } from './syncpromise';\n/**\n * Creates an new PromiseBuffer object with the specified limit\n * @param limit max number of promises that can be stored in the buffer\n */\nexport function makePromiseBuffer(limit) {\n  var buffer = [];\n  function isReady() {\n    return limit === undefined || buffer.length < limit;\n  }\n  /**\n   * Remove a promise from the queue.\n   *\n   * @param task Can be any PromiseLike<T>\n   * @returns Removed promise.\n   */\n  function remove(task) {\n    return buffer.splice(buffer.indexOf(task), 1)[0];\n  }\n  /**\n   * Add a promise (representing an in-flight action) to the queue, and set it to remove itself on fulfillment.\n   *\n   * @param taskProducer A function producing any PromiseLike<T>; In previous versions this used to be `task:\n   *        PromiseLike<T>`, but under that model, Promises were instantly created on the call-site and their executor\n   *        functions therefore ran immediately. Thus, even if the buffer was full, the action still happened. By\n   *        requiring the promise to be wrapped in a function, we can defer promise creation until after the buffer\n   *        limit check.\n   * @returns The original promise.\n   */\n  function add(taskProducer) {\n    if (!isReady()) {\n      return rejectedSyncPromise(new SentryError('Not adding Promise due to buffer limit reached.'));\n    }\n    // start the task and add its promise to the queue\n    var task = taskProducer();\n    if (buffer.indexOf(task) === -1) {\n      buffer.push(task);\n    }\n    void task.then(function () {\n      return remove(task);\n    })\n    // Use `then(null, rejectionHandler)` rather than `catch(rejectionHandler)` so that we can use `PromiseLike`\n    // rather than `Promise`. `PromiseLike` doesn't have a `.catch` method, making its polyfill smaller. (ES5 didn't\n    // have promises, so TS has to polyfill when down-compiling.)\n    .then(null, function () {\n      return remove(task).then(null, function () {\n        // We have to add another catch here because `remove()` starts a new promise chain.\n      });\n    });\n    return task;\n  }\n  /**\n   * Wait for all promises in the queue to resolve or for timeout to expire, whichever comes first.\n   *\n   * @param timeout The time, in ms, after which to resolve to `false` if the queue is still non-empty. Passing `0` (or\n   * not passing anything) will make the promise wait as long as it takes for the queue to drain before resolving to\n   * `true`.\n   * @returns A promise which will resolve to `true` if the queue is already empty or drains before the timeout, and\n   * `false` otherwise\n   */\n  function drain(timeout) {\n    return new SyncPromise(function (resolve, reject) {\n      var counter = buffer.length;\n      if (!counter) {\n        return resolve(true);\n      }\n      // wait for `timeout` ms and then resolve to `false` (if not cancelled first)\n      var capturedSetTimeout = setTimeout(function () {\n        if (timeout && timeout > 0) {\n          resolve(false);\n        }\n      }, timeout);\n      // if all promises resolve in time, cancel the timer and resolve to `true`\n      buffer.forEach(function (item) {\n        void resolvedSyncPromise(item).then(function () {\n          // eslint-disable-next-line no-plusplus\n          if (! --counter) {\n            clearTimeout(capturedSetTimeout);\n            resolve(true);\n          }\n        }, reject);\n      });\n    });\n  }\n  return {\n    $: buffer,\n    add: add,\n    drain: drain\n  };\n}","map":{"version":3,"sources":["../../src/promisebuffer.ts"],"names":[],"mappings":"AAAA,SAAS,WAAW,QAAQ,SAAS;AACrC,SAAS,mBAAmB,EAAE,mBAAmB,EAAE,WAAW,QAAQ,eAAe;AAUrF;;;AAGG;AACH,OAAM,SAAU,iBAAiB,CAAI,KAAc,EAAA;EACjD,IAAM,MAAM,GAA0B,EAAE;EAExC,SAAS,OAAO,CAAA,EAAA;IACd,OAAO,KAAK,KAAK,SAAS,IAAI,MAAM,CAAC,MAAM,GAAG,KAAK;EACrD;EAEA;;;;;AAKG;EACH,SAAS,MAAM,CAAC,IAAoB,EAAA;IAClC,OAAO,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;EAClD;EAEA;;;;;;;;;AASG;EACH,SAAS,GAAG,CAAC,YAAkC,EAAA;IAC7C,IAAI,CAAC,OAAO,CAAA,CAAE,EAAE;MACd,OAAO,mBAAmB,CAAC,IAAI,WAAW,CAAC,iDAAiD,CAAC,CAAC;IAC/F;IAED;IACA,IAAM,IAAI,GAAG,YAAY,CAAA,CAAE;IAC3B,IAAI,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE;MAC/B,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC;IAClB;IACD,KAAK,IAAI,CACN,IAAI,CAAC,YAAA;MAAM,OAAA,MAAM,CAAC,IAAI,CAAC;IAAZ,CAAY;IACxB;IACA;IACA;IAAA,CACC,IAAI,CAAC,IAAI,EAAE,YAAA;MACV,OAAA,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,YAAA;QACtB;MAAA,CACD,CAAC;IAFF,CAEE,CACH;IACH,OAAO,IAAI;EACb;EAEA;;;;;;;;AAQG;EACH,SAAS,KAAK,CAAC,OAAgB,EAAA;IAC7B,OAAO,IAAI,WAAW,CAAU,UAAC,OAAO,EAAE,MAAM,EAAA;MAC9C,IAAI,OAAO,GAAG,MAAM,CAAC,MAAM;MAE3B,IAAI,CAAC,OAAO,EAAE;QACZ,OAAO,OAAO,CAAC,IAAI,CAAC;MACrB;MAED;MACA,IAAM,kBAAkB,GAAG,UAAU,CAAC,YAAA;QACpC,IAAI,OAAO,IAAI,OAAO,GAAG,CAAC,EAAE;UAC1B,OAAO,CAAC,KAAK,CAAC;QACf;MACH,CAAC,EAAE,OAAO,CAAC;MAEX;MACA,MAAM,CAAC,OAAO,CAAC,UAAA,IAAI,EAAA;QACjB,KAAK,mBAAmB,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,YAAA;UAClC;UACA,IAAI,CAAC,GAAE,OAAO,EAAE;YACd,YAAY,CAAC,kBAAkB,CAAC;YAChC,OAAO,CAAC,IAAI,CAAC;UACd;QACH,CAAC,EAAE,MAAM,CAAC;MACZ,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;EAEA,OAAO;IACL,CAAC,EAAE,MAAM;IACT,GAAG,EAAA,GAAA;IACH,KAAK,EAAA;GACN;AACH","sourcesContent":["import { SentryError } from './error';\nimport { rejectedSyncPromise, resolvedSyncPromise, SyncPromise } from './syncpromise';\n\nexport interface PromiseBuffer<T> {\n  // exposes the internal array so tests can assert on the state of it.\n  // XXX: this really should not be public api.\n  $: Array<PromiseLike<T>>;\n  add(taskProducer: () => PromiseLike<T>): PromiseLike<T>;\n  drain(timeout?: number): PromiseLike<boolean>;\n}\n\n/**\n * Creates an new PromiseBuffer object with the specified limit\n * @param limit max number of promises that can be stored in the buffer\n */\nexport function makePromiseBuffer<T>(limit?: number): PromiseBuffer<T> {\n  const buffer: Array<PromiseLike<T>> = [];\n\n  function isReady(): boolean {\n    return limit === undefined || buffer.length < limit;\n  }\n\n  /**\n   * Remove a promise from the queue.\n   *\n   * @param task Can be any PromiseLike<T>\n   * @returns Removed promise.\n   */\n  function remove(task: PromiseLike<T>): PromiseLike<T> {\n    return buffer.splice(buffer.indexOf(task), 1)[0];\n  }\n\n  /**\n   * Add a promise (representing an in-flight action) to the queue, and set it to remove itself on fulfillment.\n   *\n   * @param taskProducer A function producing any PromiseLike<T>; In previous versions this used to be `task:\n   *        PromiseLike<T>`, but under that model, Promises were instantly created on the call-site and their executor\n   *        functions therefore ran immediately. Thus, even if the buffer was full, the action still happened. By\n   *        requiring the promise to be wrapped in a function, we can defer promise creation until after the buffer\n   *        limit check.\n   * @returns The original promise.\n   */\n  function add(taskProducer: () => PromiseLike<T>): PromiseLike<T> {\n    if (!isReady()) {\n      return rejectedSyncPromise(new SentryError('Not adding Promise due to buffer limit reached.'));\n    }\n\n    // start the task and add its promise to the queue\n    const task = taskProducer();\n    if (buffer.indexOf(task) === -1) {\n      buffer.push(task);\n    }\n    void task\n      .then(() => remove(task))\n      // Use `then(null, rejectionHandler)` rather than `catch(rejectionHandler)` so that we can use `PromiseLike`\n      // rather than `Promise`. `PromiseLike` doesn't have a `.catch` method, making its polyfill smaller. (ES5 didn't\n      // have promises, so TS has to polyfill when down-compiling.)\n      .then(null, () =>\n        remove(task).then(null, () => {\n          // We have to add another catch here because `remove()` starts a new promise chain.\n        }),\n      );\n    return task;\n  }\n\n  /**\n   * Wait for all promises in the queue to resolve or for timeout to expire, whichever comes first.\n   *\n   * @param timeout The time, in ms, after which to resolve to `false` if the queue is still non-empty. Passing `0` (or\n   * not passing anything) will make the promise wait as long as it takes for the queue to drain before resolving to\n   * `true`.\n   * @returns A promise which will resolve to `true` if the queue is already empty or drains before the timeout, and\n   * `false` otherwise\n   */\n  function drain(timeout?: number): PromiseLike<boolean> {\n    return new SyncPromise<boolean>((resolve, reject) => {\n      let counter = buffer.length;\n\n      if (!counter) {\n        return resolve(true);\n      }\n\n      // wait for `timeout` ms and then resolve to `false` (if not cancelled first)\n      const capturedSetTimeout = setTimeout(() => {\n        if (timeout && timeout > 0) {\n          resolve(false);\n        }\n      }, timeout);\n\n      // if all promises resolve in time, cancel the timer and resolve to `true`\n      buffer.forEach(item => {\n        void resolvedSyncPromise(item).then(() => {\n          // eslint-disable-next-line no-plusplus\n          if (!--counter) {\n            clearTimeout(capturedSetTimeout);\n            resolve(true);\n          }\n        }, reject);\n      });\n    });\n  }\n\n  return {\n    $: buffer,\n    add,\n    drain,\n  };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}