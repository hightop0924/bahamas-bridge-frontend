{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SafeAppProvider = void 0;\nconst events_1 = require(\"events\");\nconst utils_1 = require(\"./utils\");\n// The API is based on Ethereum JavaScript API Provider Standard. Link: https://eips.ethereum.org/EIPS/eip-1193\nclass SafeAppProvider extends events_1.EventEmitter {\n  constructor(safe, sdk) {\n    super();\n    this.submittedTxs = new Map();\n    this.safe = safe;\n    this.sdk = sdk;\n  }\n  async connect() {\n    this.emit('connect', {\n      chainId: this.chainId\n    });\n    return;\n  }\n  async disconnect() {\n    return;\n  }\n  get chainId() {\n    return this.safe.chainId;\n  }\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  async request(request) {\n    const {\n      method,\n      params = []\n    } = request;\n    switch (method) {\n      case 'eth_accounts':\n        return [this.safe.safeAddress];\n      case 'net_version':\n      case 'eth_chainId':\n        return `0x${this.chainId.toString(16)}`;\n      case 'personal_sign':\n        {\n          const [message, address] = params;\n          if (this.safe.safeAddress.toLowerCase() !== address.toLowerCase()) {\n            throw new Error('The address or message hash is invalid');\n          }\n          await this.sdk.txs.signMessage(message);\n          return '0x';\n        }\n      case 'eth_sign':\n        {\n          const [address, messageHash] = params;\n          if (this.safe.safeAddress.toLowerCase() !== address.toLowerCase() || !messageHash.startsWith('0x')) {\n            throw new Error('The address or message hash is invalid');\n          }\n          await this.sdk.txs.signMessage(messageHash);\n          return '0x';\n        }\n      case 'eth_sendTransaction':\n        const tx = Object.assign({\n          value: '0',\n          data: '0x'\n        }, params[0]);\n        const resp = await this.sdk.txs.send({\n          txs: [tx]\n        });\n        // Store fake transaction\n        this.submittedTxs.set(resp.safeTxHash, {\n          from: this.safe.safeAddress,\n          hash: resp.safeTxHash,\n          gas: 0,\n          gasPrice: '0x00',\n          nonce: 0,\n          input: tx.data,\n          value: tx.value,\n          to: tx.to,\n          blockHash: null,\n          blockNumber: null,\n          transactionIndex: null\n        });\n        return resp.safeTxHash;\n      case 'eth_blockNumber':\n        const block = await this.sdk.eth.getBlockByNumber(['latest']);\n        return block.number;\n      case 'eth_getBalance':\n        return this.sdk.eth.getBalance([(0, utils_1.getLowerCase)(params[0]), params[1]]);\n      case 'eth_getCode':\n        return this.sdk.eth.getCode([(0, utils_1.getLowerCase)(params[0]), params[1]]);\n      case 'eth_getTransactionCount':\n        return this.sdk.eth.getTransactionCount([(0, utils_1.getLowerCase)(params[0]), params[1]]);\n      case 'eth_getStorageAt':\n        return this.sdk.eth.getStorageAt([(0, utils_1.getLowerCase)(params[0]), params[1], params[2]]);\n      case 'eth_getBlockByNumber':\n        return this.sdk.eth.getBlockByNumber([params[0], params[1]]);\n      case 'eth_getBlockByHash':\n        return this.sdk.eth.getBlockByHash([params[0], params[1]]);\n      case 'eth_getTransactionByHash':\n        let txHash = params[0];\n        try {\n          const resp = await this.sdk.txs.getBySafeTxHash(txHash);\n          txHash = resp.txHash || txHash;\n        } catch (e) {}\n        // Use fake transaction if we don't have a real tx hash\n        if (this.submittedTxs.has(txHash)) {\n          return this.submittedTxs.get(txHash);\n        }\n        return this.sdk.eth.getTransactionByHash([txHash]).then(tx => {\n          // We set the tx hash to the one requested, as some provider assert this\n          if (tx) {\n            tx.hash = params[0];\n          }\n          return tx;\n        });\n      case 'eth_getTransactionReceipt':\n        {\n          let txHash = params[0];\n          try {\n            const resp = await this.sdk.txs.getBySafeTxHash(txHash);\n            txHash = resp.txHash || txHash;\n          } catch (e) {}\n          return this.sdk.eth.getTransactionReceipt([txHash]).then(tx => {\n            // We set the tx hash to the one requested, as some provider assert this\n            if (tx) {\n              tx.transactionHash = params[0];\n            }\n            return tx;\n          });\n        }\n      case 'eth_estimateGas':\n        {\n          return this.sdk.eth.getEstimateGas(params[0]);\n        }\n      case 'eth_call':\n        {\n          return this.sdk.eth.call([params[0], params[1]]);\n        }\n      case 'eth_getLogs':\n        return this.sdk.eth.getPastLogs([params[0]]);\n      case 'eth_gasPrice':\n        return this.sdk.eth.getGasPrice();\n      default:\n        throw Error(`\"${request.method}\" not implemented`);\n    }\n  }\n  // this method is needed for ethers v4\n  // https://github.com/ethers-io/ethers.js/blob/427e16826eb15d52d25c4f01027f8db22b74b76c/src.ts/providers/web3-provider.ts#L41-L55\n  send(request, callback) {\n    if (!request) callback('Undefined request');\n    this.request(request).then(result => callback(null, {\n      jsonrpc: '2.0',\n      id: request.id,\n      result\n    })).catch(error => callback(error, null));\n  }\n}\nexports.SafeAppProvider = SafeAppProvider;","map":{"version":3,"sources":["../src/provider.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SafeAppProvider = void 0;\nconst events_1 = require(\"events\");\nconst utils_1 = require(\"./utils\");\n// The API is based on Ethereum JavaScript API Provider Standard. Link: https://eips.ethereum.org/EIPS/eip-1193\nclass SafeAppProvider extends events_1.EventEmitter {\n    constructor(safe, sdk) {\n        super();\n        this.submittedTxs = new Map();\n        this.safe = safe;\n        this.sdk = sdk;\n    }\n    async connect() {\n        this.emit('connect', { chainId: this.chainId });\n        return;\n    }\n    async disconnect() {\n        return;\n    }\n    get chainId() {\n        return this.safe.chainId;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    async request(request) {\n        const { method, params = [] } = request;\n        switch (method) {\n            case 'eth_accounts':\n                return [this.safe.safeAddress];\n            case 'net_version':\n            case 'eth_chainId':\n                return `0x${this.chainId.toString(16)}`;\n            case 'personal_sign': {\n                const [message, address] = params;\n                if (this.safe.safeAddress.toLowerCase() !== address.toLowerCase()) {\n                    throw new Error('The address or message hash is invalid');\n                }\n                await this.sdk.txs.signMessage(message);\n                return '0x';\n            }\n            case 'eth_sign': {\n                const [address, messageHash] = params;\n                if (this.safe.safeAddress.toLowerCase() !== address.toLowerCase() || !messageHash.startsWith('0x')) {\n                    throw new Error('The address or message hash is invalid');\n                }\n                await this.sdk.txs.signMessage(messageHash);\n                return '0x';\n            }\n            case 'eth_sendTransaction':\n                const tx = Object.assign({ value: '0', data: '0x' }, params[0]);\n                const resp = await this.sdk.txs.send({\n                    txs: [tx],\n                });\n                // Store fake transaction\n                this.submittedTxs.set(resp.safeTxHash, {\n                    from: this.safe.safeAddress,\n                    hash: resp.safeTxHash,\n                    gas: 0,\n                    gasPrice: '0x00',\n                    nonce: 0,\n                    input: tx.data,\n                    value: tx.value,\n                    to: tx.to,\n                    blockHash: null,\n                    blockNumber: null,\n                    transactionIndex: null,\n                });\n                return resp.safeTxHash;\n            case 'eth_blockNumber':\n                const block = await this.sdk.eth.getBlockByNumber(['latest']);\n                return block.number;\n            case 'eth_getBalance':\n                return this.sdk.eth.getBalance([(0, utils_1.getLowerCase)(params[0]), params[1]]);\n            case 'eth_getCode':\n                return this.sdk.eth.getCode([(0, utils_1.getLowerCase)(params[0]), params[1]]);\n            case 'eth_getTransactionCount':\n                return this.sdk.eth.getTransactionCount([(0, utils_1.getLowerCase)(params[0]), params[1]]);\n            case 'eth_getStorageAt':\n                return this.sdk.eth.getStorageAt([(0, utils_1.getLowerCase)(params[0]), params[1], params[2]]);\n            case 'eth_getBlockByNumber':\n                return this.sdk.eth.getBlockByNumber([params[0], params[1]]);\n            case 'eth_getBlockByHash':\n                return this.sdk.eth.getBlockByHash([params[0], params[1]]);\n            case 'eth_getTransactionByHash':\n                let txHash = params[0];\n                try {\n                    const resp = await this.sdk.txs.getBySafeTxHash(txHash);\n                    txHash = resp.txHash || txHash;\n                }\n                catch (e) { }\n                // Use fake transaction if we don't have a real tx hash\n                if (this.submittedTxs.has(txHash)) {\n                    return this.submittedTxs.get(txHash);\n                }\n                return this.sdk.eth.getTransactionByHash([txHash]).then((tx) => {\n                    // We set the tx hash to the one requested, as some provider assert this\n                    if (tx) {\n                        tx.hash = params[0];\n                    }\n                    return tx;\n                });\n            case 'eth_getTransactionReceipt': {\n                let txHash = params[0];\n                try {\n                    const resp = await this.sdk.txs.getBySafeTxHash(txHash);\n                    txHash = resp.txHash || txHash;\n                }\n                catch (e) { }\n                return this.sdk.eth.getTransactionReceipt([txHash]).then((tx) => {\n                    // We set the tx hash to the one requested, as some provider assert this\n                    if (tx) {\n                        tx.transactionHash = params[0];\n                    }\n                    return tx;\n                });\n            }\n            case 'eth_estimateGas': {\n                return this.sdk.eth.getEstimateGas(params[0]);\n            }\n            case 'eth_call': {\n                return this.sdk.eth.call([params[0], params[1]]);\n            }\n            case 'eth_getLogs':\n                return this.sdk.eth.getPastLogs([params[0]]);\n            case 'eth_gasPrice':\n                return this.sdk.eth.getGasPrice();\n            default:\n                throw Error(`\"${request.method}\" not implemented`);\n        }\n    }\n    // this method is needed for ethers v4\n    // https://github.com/ethers-io/ethers.js/blob/427e16826eb15d52d25c4f01027f8db22b74b76c/src.ts/providers/web3-provider.ts#L41-L55\n    send(request, callback) {\n        if (!request)\n            callback('Undefined request');\n        this.request(request)\n            .then((result) => callback(null, { jsonrpc: '2.0', id: request.id, result }))\n            .catch((error) => callback(error, null));\n    }\n}\nexports.SafeAppProvider = SafeAppProvider;\n//# sourceMappingURL=provider.js.map"]},"metadata":{},"sourceType":"script"}