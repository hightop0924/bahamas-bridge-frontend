{"ast":null,"code":"import schema from '@uniswap/token-lists/src/tokenlist.schema.json';\nimport Ajv from 'ajv';\nimport { gql, request } from 'graphql-request';\nimport { getTokenListUrl, logError, uniqueTokens } from './helpers';\nimport { renamexDaiTokensAsGnosis } from './token';\nconst tokenListValidator = new Ajv({\n  allErrors: true\n}).compile(schema);\nconst fetchDefaultTokens = async chainId => {\n  try {\n    const url = getTokenListUrl(chainId);\n    if (url) {\n      const response = await fetch(url);\n      if (response.ok) {\n        const json = await response.json();\n        if (chainId === 56) {\n          json.tokens = json.tokens.map(token => ({\n            ...token,\n            chainId\n          }));\n        }\n        if (tokenListValidator(json) || chainId === 56) {\n          return json.tokens.filter(token => token.chainId === chainId);\n        }\n      }\n    }\n  } catch (defaultTokensError) {\n    logError({\n      defaultTokensError\n    });\n  }\n  return [];\n};\nconst homeTokensQuery = gql`\n  query homeTokens {\n    tokens(where: { homeAddress_contains: \"0x\" }, first: 1000) {\n      chainId: homeChainId\n      address: homeAddress\n      name: homeName\n      symbol\n      decimals\n    }\n  }\n`;\nconst foreignTokensQuery = gql`\n  query foreignTokens {\n    tokens(where: { foreignAddress_contains: \"0x\" }, first: 1000) {\n      chainId: foreignChainId\n      address: foreignAddress\n      name: foreignName\n      symbol\n      decimals\n    }\n  }\n`;\nconst fetchTokensFromSubgraph = async (homeEndpoint, foreignEndpoint) => {\n  try {\n    const [homeData, foreignData] = await Promise.all([request(homeEndpoint, homeTokensQuery), request(foreignEndpoint, foreignTokensQuery)]);\n    const homeTokens = homeData && homeData.tokens ? homeData.tokens : [];\n    const foreignTokens = foreignData && foreignData.tokens ? foreignData.tokens : [];\n    return homeTokens.concat(foreignTokens);\n  } catch (subgraphTokensError) {\n    logError({\n      subgraphTokensError\n    });\n  }\n  return [];\n};\nexport function memoize(method) {\n  const cache = {};\n  return async function memoized(...args) {\n    const argString = JSON.stringify(args);\n    cache[argString] = cache[argString] || (await method(...args));\n    return cache[argString];\n  };\n}\nexport const fetchTokenList = memoize(async (chainId, homeEndpoint, foreignEndpoint) => {\n  const [defaultTokens, subgraphTokens] = await Promise.all([fetchDefaultTokens(chainId), fetchTokensFromSubgraph(homeEndpoint, foreignEndpoint)]);\n  const tokens = uniqueTokens(defaultTokens.concat(subgraphTokens));\n  return tokens.map(token => ({\n    ...token,\n    name: renamexDaiTokensAsGnosis(token.name)\n  }));\n});","map":{"version":3,"names":["schema","Ajv","gql","request","getTokenListUrl","logError","uniqueTokens","renamexDaiTokensAsGnosis","tokenListValidator","allErrors","compile","fetchDefaultTokens","chainId","url","response","fetch","ok","json","tokens","map","token","filter","defaultTokensError","homeTokensQuery","foreignTokensQuery","fetchTokensFromSubgraph","homeEndpoint","foreignEndpoint","homeData","foreignData","Promise","all","homeTokens","foreignTokens","concat","subgraphTokensError","memoize","method","cache","memoized","args","argString","JSON","stringify","fetchTokenList","defaultTokens","subgraphTokens","name"],"sources":["/home/hightop/bahamas_bridge/omnibridge-ui/packages/dapp/src/lib/tokenList.js"],"sourcesContent":["import schema from '@uniswap/token-lists/src/tokenlist.schema.json';\nimport Ajv from 'ajv';\nimport { gql, request } from 'graphql-request';\n\nimport { getTokenListUrl, logError, uniqueTokens } from './helpers';\nimport { renamexDaiTokensAsGnosis } from './token';\n\nconst tokenListValidator = new Ajv({ allErrors: true }).compile(schema);\n\nconst fetchDefaultTokens = async chainId => {\n  try {\n    const url = getTokenListUrl(chainId);\n    if (url) {\n      const response = await fetch(url);\n      if (response.ok) {\n        const json = await response.json();\n        if (chainId === 56) {\n          json.tokens = json.tokens.map(token => ({ ...token, chainId }));\n        }\n        if (tokenListValidator(json) || chainId === 56) {\n          return json.tokens.filter(token => token.chainId === chainId);\n        }\n      }\n    }\n  } catch (defaultTokensError) {\n    logError({ defaultTokensError });\n  }\n  return [];\n};\n\nconst homeTokensQuery = gql`\n  query homeTokens {\n    tokens(where: { homeAddress_contains: \"0x\" }, first: 1000) {\n      chainId: homeChainId\n      address: homeAddress\n      name: homeName\n      symbol\n      decimals\n    }\n  }\n`;\n\nconst foreignTokensQuery = gql`\n  query foreignTokens {\n    tokens(where: { foreignAddress_contains: \"0x\" }, first: 1000) {\n      chainId: foreignChainId\n      address: foreignAddress\n      name: foreignName\n      symbol\n      decimals\n    }\n  }\n`;\n\nconst fetchTokensFromSubgraph = async (homeEndpoint, foreignEndpoint) => {\n  try {\n    const [homeData, foreignData] = await Promise.all([\n      request(homeEndpoint, homeTokensQuery),\n      request(foreignEndpoint, foreignTokensQuery),\n    ]);\n    const homeTokens = homeData && homeData.tokens ? homeData.tokens : [];\n    const foreignTokens =\n      foreignData && foreignData.tokens ? foreignData.tokens : [];\n    return homeTokens.concat(foreignTokens);\n  } catch (subgraphTokensError) {\n    logError({ subgraphTokensError });\n  }\n  return [];\n};\n\nexport function memoize(method) {\n  const cache = {};\n\n  return async function memoized(...args) {\n    const argString = JSON.stringify(args);\n    cache[argString] = cache[argString] || (await method(...args));\n    return cache[argString];\n  };\n}\n\nexport const fetchTokenList = memoize(\n  async (chainId, homeEndpoint, foreignEndpoint) => {\n    const [defaultTokens, subgraphTokens] = await Promise.all([\n      fetchDefaultTokens(chainId),\n      fetchTokensFromSubgraph(homeEndpoint, foreignEndpoint),\n    ]);\n    const tokens = uniqueTokens(defaultTokens.concat(subgraphTokens));\n    return tokens.map(token => ({\n      ...token,\n      name: renamexDaiTokensAsGnosis(token.name),\n    }));\n  },\n);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}