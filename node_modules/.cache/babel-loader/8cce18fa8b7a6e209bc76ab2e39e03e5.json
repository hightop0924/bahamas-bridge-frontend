{"ast":null,"code":"/* eslint-disable @typescript-eslint/explicit-function-return-type */\n/* eslint-disable @typescript-eslint/typedef */\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { isThenable } from './is';\n/**\n * Creates a resolved sync promise.\n *\n * @param value the value to resolve the promise with\n * @returns the resolved sync promise\n */\nexport function resolvedSyncPromise(value) {\n  return new SyncPromise(function (resolve) {\n    resolve(value);\n  });\n}\n/**\n * Creates a rejected sync promise.\n *\n * @param value the value to reject the promise with\n * @returns the rejected sync promise\n */\nexport function rejectedSyncPromise(reason) {\n  return new SyncPromise(function (_, reject) {\n    reject(reason);\n  });\n}\n/**\n * Thenable class that behaves like a Promise and follows it's interface\n * but is not async internally\n */\nvar SyncPromise = /** @class */function () {\n  function SyncPromise(executor) {\n    var _this = this;\n    this._state = 0 /* PENDING */;\n    this._handlers = [];\n    /** JSDoc */\n    this._resolve = function (value) {\n      _this._setResult(1 /* RESOLVED */, value);\n    };\n    /** JSDoc */\n    this._reject = function (reason) {\n      _this._setResult(2 /* REJECTED */, reason);\n    };\n    /** JSDoc */\n    this._setResult = function (state, value) {\n      if (_this._state !== 0 /* PENDING */) {\n        return;\n      }\n      if (isThenable(value)) {\n        void value.then(_this._resolve, _this._reject);\n        return;\n      }\n      _this._state = state;\n      _this._value = value;\n      _this._executeHandlers();\n    };\n    /** JSDoc */\n    this._executeHandlers = function () {\n      if (_this._state === 0 /* PENDING */) {\n        return;\n      }\n      var cachedHandlers = _this._handlers.slice();\n      _this._handlers = [];\n      cachedHandlers.forEach(function (handler) {\n        if (handler[0]) {\n          return;\n        }\n        if (_this._state === 1 /* RESOLVED */) {\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          handler[1](_this._value);\n        }\n        if (_this._state === 2 /* REJECTED */) {\n          handler[2](_this._value);\n        }\n        handler[0] = true;\n      });\n    };\n    try {\n      executor(this._resolve, this._reject);\n    } catch (e) {\n      this._reject(e);\n    }\n  }\n  /** JSDoc */\n  SyncPromise.prototype.then = function (onfulfilled, onrejected) {\n    var _this = this;\n    return new SyncPromise(function (resolve, reject) {\n      _this._handlers.push([false, function (result) {\n        if (!onfulfilled) {\n          // TODO: ¯\\_(ツ)_/¯\n          // TODO: FIXME\n          resolve(result);\n        } else {\n          try {\n            resolve(onfulfilled(result));\n          } catch (e) {\n            reject(e);\n          }\n        }\n      }, function (reason) {\n        if (!onrejected) {\n          reject(reason);\n        } else {\n          try {\n            resolve(onrejected(reason));\n          } catch (e) {\n            reject(e);\n          }\n        }\n      }]);\n      _this._executeHandlers();\n    });\n  };\n  /** JSDoc */\n  SyncPromise.prototype.catch = function (onrejected) {\n    return this.then(function (val) {\n      return val;\n    }, onrejected);\n  };\n  /** JSDoc */\n  SyncPromise.prototype.finally = function (onfinally) {\n    var _this = this;\n    return new SyncPromise(function (resolve, reject) {\n      var val;\n      var isRejected;\n      return _this.then(function (value) {\n        isRejected = false;\n        val = value;\n        if (onfinally) {\n          onfinally();\n        }\n      }, function (reason) {\n        isRejected = true;\n        val = reason;\n        if (onfinally) {\n          onfinally();\n        }\n      }).then(function () {\n        if (isRejected) {\n          reject(val);\n          return;\n        }\n        resolve(val);\n      });\n    });\n  };\n  return SyncPromise;\n}();\nexport { SyncPromise };","map":{"version":3,"sources":["../../src/syncpromise.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/explicit-function-return-type */\n/* eslint-disable @typescript-eslint/typedef */\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { isThenable } from './is';\n\n/** SyncPromise internal states */\nconst enum States {\n  /** Pending */\n  PENDING = 0,\n  /** Resolved / OK */\n  RESOLVED = 1,\n  /** Rejected / Error */\n  REJECTED = 2,\n}\n\n/**\n * Creates a resolved sync promise.\n *\n * @param value the value to resolve the promise with\n * @returns the resolved sync promise\n */\nexport function resolvedSyncPromise<T>(value: T | PromiseLike<T>): PromiseLike<T> {\n  return new SyncPromise(resolve => {\n    resolve(value);\n  });\n}\n\n/**\n * Creates a rejected sync promise.\n *\n * @param value the value to reject the promise with\n * @returns the rejected sync promise\n */\nexport function rejectedSyncPromise<T = never>(reason?: any): PromiseLike<T> {\n  return new SyncPromise((_, reject) => {\n    reject(reason);\n  });\n}\n\n/**\n * Thenable class that behaves like a Promise and follows it's interface\n * but is not async internally\n */\nclass SyncPromise<T> implements PromiseLike<T> {\n  private _state: States = States.PENDING;\n  private _handlers: Array<[boolean, (value: T) => void, (reason: any) => any]> = [];\n  private _value: any;\n\n  public constructor(\n    executor: (resolve: (value?: T | PromiseLike<T> | null) => void, reject: (reason?: any) => void) => void,\n  ) {\n    try {\n      executor(this._resolve, this._reject);\n    } catch (e) {\n      this._reject(e);\n    }\n  }\n\n  /** JSDoc */\n  public then<TResult1 = T, TResult2 = never>(\n    onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | null,\n    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | null,\n  ): PromiseLike<TResult1 | TResult2> {\n    return new SyncPromise((resolve, reject) => {\n      this._handlers.push([\n        false,\n        result => {\n          if (!onfulfilled) {\n            // TODO: ¯\\_(ツ)_/¯\n            // TODO: FIXME\n            resolve(result as any);\n          } else {\n            try {\n              resolve(onfulfilled(result));\n            } catch (e) {\n              reject(e);\n            }\n          }\n        },\n        reason => {\n          if (!onrejected) {\n            reject(reason);\n          } else {\n            try {\n              resolve(onrejected(reason));\n            } catch (e) {\n              reject(e);\n            }\n          }\n        },\n      ]);\n      this._executeHandlers();\n    });\n  }\n\n  /** JSDoc */\n  public catch<TResult = never>(\n    onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | null,\n  ): PromiseLike<T | TResult> {\n    return this.then(val => val, onrejected);\n  }\n\n  /** JSDoc */\n  public finally<TResult>(onfinally?: (() => void) | null): PromiseLike<TResult> {\n    return new SyncPromise<TResult>((resolve, reject) => {\n      let val: TResult | any;\n      let isRejected: boolean;\n\n      return this.then(\n        value => {\n          isRejected = false;\n          val = value;\n          if (onfinally) {\n            onfinally();\n          }\n        },\n        reason => {\n          isRejected = true;\n          val = reason;\n          if (onfinally) {\n            onfinally();\n          }\n        },\n      ).then(() => {\n        if (isRejected) {\n          reject(val);\n          return;\n        }\n\n        resolve(val as unknown as any);\n      });\n    });\n  }\n\n  /** JSDoc */\n  private readonly _resolve = (value?: T | PromiseLike<T> | null) => {\n    this._setResult(States.RESOLVED, value);\n  };\n\n  /** JSDoc */\n  private readonly _reject = (reason?: any) => {\n    this._setResult(States.REJECTED, reason);\n  };\n\n  /** JSDoc */\n  private readonly _setResult = (state: States, value?: T | PromiseLike<T> | any) => {\n    if (this._state !== States.PENDING) {\n      return;\n    }\n\n    if (isThenable(value)) {\n      void (value as PromiseLike<T>).then(this._resolve, this._reject);\n      return;\n    }\n\n    this._state = state;\n    this._value = value;\n\n    this._executeHandlers();\n  };\n\n  /** JSDoc */\n  private readonly _executeHandlers = () => {\n    if (this._state === States.PENDING) {\n      return;\n    }\n\n    const cachedHandlers = this._handlers.slice();\n    this._handlers = [];\n\n    cachedHandlers.forEach(handler => {\n      if (handler[0]) {\n        return;\n      }\n\n      if (this._state === States.RESOLVED) {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        handler[1](this._value as unknown as any);\n      }\n\n      if (this._state === States.REJECTED) {\n        handler[2](this._value);\n      }\n\n      handler[0] = true;\n    });\n  };\n}\n\nexport { SyncPromise };\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}