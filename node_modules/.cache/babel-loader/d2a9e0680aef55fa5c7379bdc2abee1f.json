{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GasPriceOracle = void 0;\nconst axios_1 = __importDefault(require(\"axios\"));\nconst config_1 = require(\"./config\");\nconst bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\nconst defaultFastGas = 22;\nclass GasPriceOracle {\n  constructor(options) {\n    this.configuration = {\n      chainId: config_1.ChainId.MAINNET,\n      defaultRpc: 'https://api.mycryptoapi.com/eth',\n      timeout: 10000,\n      defaultFallbackGasPrices: {\n        instant: defaultFastGas * 1.3,\n        fast: defaultFastGas,\n        standard: defaultFastGas * 0.85,\n        low: defaultFastGas * 0.5\n      }\n    };\n    if (options) {\n      Object.assign(this.configuration, options);\n    }\n    const network = config_1.networks[this.configuration.chainId];\n    if (network) {\n      const {\n        offChainOracles,\n        onChainOracles\n      } = network;\n      this.offChainOracles = Object.assign({}, offChainOracles);\n      this.onChainOracles = Object.assign({}, onChainOracles);\n    }\n  }\n  async askOracle(oracle) {\n    const {\n      name,\n      url,\n      instantPropertyName,\n      fastPropertyName,\n      standardPropertyName,\n      lowPropertyName,\n      denominator,\n      additionalDataProperty\n    } = oracle;\n    const response = await axios_1.default.get(url, {\n      timeout: this.configuration.timeout\n    });\n    if (response.status === 200) {\n      const gas = additionalDataProperty ? response.data[additionalDataProperty] : response.data;\n      if (Number(gas[fastPropertyName]) === 0) {\n        throw new Error(`${name} oracle provides corrupted values`);\n      }\n      const gasPrices = {\n        instant: parseFloat(gas[instantPropertyName]) / denominator,\n        fast: parseFloat(gas[fastPropertyName]) / denominator,\n        standard: parseFloat(gas[standardPropertyName]) / denominator,\n        low: parseFloat(gas[lowPropertyName]) / denominator\n      };\n      return this.normalize(gasPrices);\n    } else {\n      throw new Error(`Fetch gasPrice from ${name} oracle failed. Trying another one...`);\n    }\n  }\n  async fetchGasPricesOffChain() {\n    for (const oracle of Object.values(this.offChainOracles)) {\n      try {\n        return await this.askOracle(oracle);\n      } catch (e) {\n        console.info(e.message);\n        continue;\n      }\n    }\n    throw new Error('All oracles are down. Probably a network error.');\n  }\n  async fetchMedianGasPriceOffChain() {\n    const promises = [];\n    for (const oracle of Object.values(this.offChainOracles)) {\n      promises.push(this.askOracle(oracle));\n    }\n    const settledPromises = await Promise.allSettled(promises);\n    const allGasPrices = settledPromises.reduce((acc, result) => {\n      if (result.status === 'fulfilled') {\n        acc.push(result.value);\n        return acc;\n      }\n      return acc;\n    }, []);\n    if (allGasPrices.length === 0) {\n      throw new Error('All oracles are down. Probably a network error.');\n    }\n    return this.median(allGasPrices);\n  }\n  median(gasPrices) {\n    const medianGasPrice = {\n      instant: 0,\n      fast: 0,\n      standard: 0,\n      low: 0\n    };\n    const results = {\n      instant: [],\n      fast: [],\n      standard: [],\n      low: []\n    };\n    for (const gasPrice of gasPrices) {\n      results.instant.push(gasPrice.instant);\n      results.fast.push(gasPrice.fast);\n      results.standard.push(gasPrice.standard);\n      results.low.push(gasPrice.low);\n    }\n    for (const type of Object.keys(medianGasPrice)) {\n      const allPrices = results[type].sort((a, b) => a - b);\n      if (allPrices.length === 1) {\n        medianGasPrice[type] = allPrices[0];\n        continue;\n      } else if (allPrices.length === 0) {\n        continue;\n      }\n      const isEven = allPrices.length % 2 === 0;\n      const middle = Math.floor(allPrices.length / 2);\n      medianGasPrice[type] = isEven ? (allPrices[middle - 1] + allPrices[middle]) / 2.0 : allPrices[middle];\n    }\n    return this.normalize(medianGasPrice);\n  }\n  /**\n   * Normalizes GasPrice values to Gwei. No more than 9 decimals basically\n   * @param GasPrice _gas\n   */\n  normalize(_gas) {\n    const format = {\n      decimalSeparator: '.',\n      groupSeparator: ''\n    };\n    const decimals = 9;\n    const gas = Object.assign({}, _gas);\n    for (const type of Object.keys(gas)) {\n      gas[type] = Number(new bignumber_js_1.default(gas[type]).toFormat(decimals, format));\n    }\n    return gas;\n  }\n  async fetchGasPricesOnChain() {\n    for (const oracle of Object.values(this.onChainOracles)) {\n      const {\n        name,\n        callData,\n        contract,\n        denominator,\n        rpc\n      } = oracle;\n      const rpcUrl = rpc || this.configuration.defaultRpc;\n      const body = {\n        jsonrpc: '2.0',\n        id: 1337,\n        method: 'eth_call',\n        params: [{\n          data: callData,\n          to: contract\n        }, 'latest']\n      };\n      try {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const response = await axios_1.default.post(rpcUrl, body, {\n          timeout: this.configuration.timeout\n        });\n        if (response.status === 200) {\n          const {\n            result\n          } = response.data;\n          let fastGasPrice = new bignumber_js_1.default(result);\n          if (fastGasPrice.isZero()) {\n            throw new Error(`${name} oracle provides corrupted values`);\n          }\n          fastGasPrice = fastGasPrice.div(denominator);\n          return fastGasPrice.toNumber();\n        } else {\n          throw new Error(`Fetch gasPrice from ${name} oracle failed. Trying another one...`);\n        }\n      } catch (e) {\n        console.error(e.message);\n      }\n    }\n    throw new Error('All oracles are down. Probably a network error.');\n  }\n  async gasPrices(fallbackGasPrices, median = true) {\n    this.lastGasPrice = this.lastGasPrice || fallbackGasPrices || this.configuration.defaultFallbackGasPrices;\n    try {\n      this.lastGasPrice = median ? await this.fetchMedianGasPriceOffChain() : await this.fetchGasPricesOffChain();\n      return this.lastGasPrice;\n    } catch (e) {\n      console.log('Failed to fetch gas prices from offchain oracles. Trying onchain ones...');\n    }\n    try {\n      const fastGas = await this.fetchGasPricesOnChain();\n      this.lastGasPrice = {\n        instant: fastGas * 1.3,\n        fast: fastGas,\n        standard: fastGas * 0.85,\n        low: fastGas * 0.5\n      };\n      return this.lastGasPrice;\n    } catch (e) {\n      console.log('Failed to fetch gas prices from onchain oracles. Last known gas will be returned');\n    }\n    return this.lastGasPrice;\n  }\n  addOffChainOracle(oracle) {\n    this.offChainOracles[oracle.name] = oracle;\n  }\n  addOnChainOracle(oracle) {\n    this.onChainOracles[oracle.name] = oracle;\n  }\n  removeOnChainOracle(name) {\n    delete this.onChainOracles[name];\n  }\n  removeOffChainOracle(name) {\n    delete this.offChainOracles[name];\n  }\n}\nexports.GasPriceOracle = GasPriceOracle;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","GasPriceOracle","axios_1","require","config_1","bignumber_js_1","defaultFastGas","constructor","options","configuration","chainId","ChainId","MAINNET","defaultRpc","timeout","defaultFallbackGasPrices","instant","fast","standard","low","assign","network","networks","offChainOracles","onChainOracles","askOracle","oracle","name","url","instantPropertyName","fastPropertyName","standardPropertyName","lowPropertyName","denominator","additionalDataProperty","response","default","get","status","gas","data","Number","Error","gasPrices","parseFloat","normalize","fetchGasPricesOffChain","values","e","console","info","message","fetchMedianGasPriceOffChain","promises","push","settledPromises","Promise","allSettled","allGasPrices","reduce","acc","result","length","median","medianGasPrice","results","gasPrice","type","keys","allPrices","sort","a","b","isEven","middle","Math","floor","_gas","format","decimalSeparator","groupSeparator","decimals","toFormat","fetchGasPricesOnChain","callData","contract","rpc","rpcUrl","body","jsonrpc","id","method","params","to","post","fastGasPrice","isZero","div","toNumber","error","fallbackGasPrices","lastGasPrice","log","fastGas","addOffChainOracle","addOnChainOracle","removeOnChainOracle","removeOffChainOracle"],"sources":["/home/hightop/bahamas_bridge/omnibridge-ui/node_modules/gas-price-oracle/lib/index.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GasPriceOracle = void 0;\nconst axios_1 = __importDefault(require(\"axios\"));\nconst config_1 = require(\"./config\");\nconst bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\nconst defaultFastGas = 22;\nclass GasPriceOracle {\n    constructor(options) {\n        this.configuration = {\n            chainId: config_1.ChainId.MAINNET,\n            defaultRpc: 'https://api.mycryptoapi.com/eth',\n            timeout: 10000,\n            defaultFallbackGasPrices: {\n                instant: defaultFastGas * 1.3,\n                fast: defaultFastGas,\n                standard: defaultFastGas * 0.85,\n                low: defaultFastGas * 0.5,\n            },\n        };\n        if (options) {\n            Object.assign(this.configuration, options);\n        }\n        const network = config_1.networks[this.configuration.chainId];\n        if (network) {\n            const { offChainOracles, onChainOracles } = network;\n            this.offChainOracles = Object.assign({}, offChainOracles);\n            this.onChainOracles = Object.assign({}, onChainOracles);\n        }\n    }\n    async askOracle(oracle) {\n        const { name, url, instantPropertyName, fastPropertyName, standardPropertyName, lowPropertyName, denominator, additionalDataProperty, } = oracle;\n        const response = await axios_1.default.get(url, { timeout: this.configuration.timeout });\n        if (response.status === 200) {\n            const gas = additionalDataProperty ? response.data[additionalDataProperty] : response.data;\n            if (Number(gas[fastPropertyName]) === 0) {\n                throw new Error(`${name} oracle provides corrupted values`);\n            }\n            const gasPrices = {\n                instant: parseFloat(gas[instantPropertyName]) / denominator,\n                fast: parseFloat(gas[fastPropertyName]) / denominator,\n                standard: parseFloat(gas[standardPropertyName]) / denominator,\n                low: parseFloat(gas[lowPropertyName]) / denominator,\n            };\n            return this.normalize(gasPrices);\n        }\n        else {\n            throw new Error(`Fetch gasPrice from ${name} oracle failed. Trying another one...`);\n        }\n    }\n    async fetchGasPricesOffChain() {\n        for (const oracle of Object.values(this.offChainOracles)) {\n            try {\n                return await this.askOracle(oracle);\n            }\n            catch (e) {\n                console.info(e.message);\n                continue;\n            }\n        }\n        throw new Error('All oracles are down. Probably a network error.');\n    }\n    async fetchMedianGasPriceOffChain() {\n        const promises = [];\n        for (const oracle of Object.values(this.offChainOracles)) {\n            promises.push(this.askOracle(oracle));\n        }\n        const settledPromises = await Promise.allSettled(promises);\n        const allGasPrices = settledPromises.reduce((acc, result) => {\n            if (result.status === 'fulfilled') {\n                acc.push(result.value);\n                return acc;\n            }\n            return acc;\n        }, []);\n        if (allGasPrices.length === 0) {\n            throw new Error('All oracles are down. Probably a network error.');\n        }\n        return this.median(allGasPrices);\n    }\n    median(gasPrices) {\n        const medianGasPrice = { instant: 0, fast: 0, standard: 0, low: 0 };\n        const results = {\n            instant: [],\n            fast: [],\n            standard: [],\n            low: [],\n        };\n        for (const gasPrice of gasPrices) {\n            results.instant.push(gasPrice.instant);\n            results.fast.push(gasPrice.fast);\n            results.standard.push(gasPrice.standard);\n            results.low.push(gasPrice.low);\n        }\n        for (const type of Object.keys(medianGasPrice)) {\n            const allPrices = results[type].sort((a, b) => a - b);\n            if (allPrices.length === 1) {\n                medianGasPrice[type] = allPrices[0];\n                continue;\n            }\n            else if (allPrices.length === 0) {\n                continue;\n            }\n            const isEven = allPrices.length % 2 === 0;\n            const middle = Math.floor(allPrices.length / 2);\n            medianGasPrice[type] = isEven ? (allPrices[middle - 1] + allPrices[middle]) / 2.0 : allPrices[middle];\n        }\n        return this.normalize(medianGasPrice);\n    }\n    /**\n     * Normalizes GasPrice values to Gwei. No more than 9 decimals basically\n     * @param GasPrice _gas\n     */\n    normalize(_gas) {\n        const format = {\n            decimalSeparator: '.',\n            groupSeparator: '',\n        };\n        const decimals = 9;\n        const gas = Object.assign({}, _gas);\n        for (const type of Object.keys(gas)) {\n            gas[type] = Number(new bignumber_js_1.default(gas[type]).toFormat(decimals, format));\n        }\n        return gas;\n    }\n    async fetchGasPricesOnChain() {\n        for (const oracle of Object.values(this.onChainOracles)) {\n            const { name, callData, contract, denominator, rpc } = oracle;\n            const rpcUrl = rpc || this.configuration.defaultRpc;\n            const body = {\n                jsonrpc: '2.0',\n                id: 1337,\n                method: 'eth_call',\n                params: [{ data: callData, to: contract }, 'latest'],\n            };\n            try {\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                const response = await axios_1.default.post(rpcUrl, body, { timeout: this.configuration.timeout });\n                if (response.status === 200) {\n                    const { result } = response.data;\n                    let fastGasPrice = new bignumber_js_1.default(result);\n                    if (fastGasPrice.isZero()) {\n                        throw new Error(`${name} oracle provides corrupted values`);\n                    }\n                    fastGasPrice = fastGasPrice.div(denominator);\n                    return fastGasPrice.toNumber();\n                }\n                else {\n                    throw new Error(`Fetch gasPrice from ${name} oracle failed. Trying another one...`);\n                }\n            }\n            catch (e) {\n                console.error(e.message);\n            }\n        }\n        throw new Error('All oracles are down. Probably a network error.');\n    }\n    async gasPrices(fallbackGasPrices, median = true) {\n        this.lastGasPrice = this.lastGasPrice || fallbackGasPrices || this.configuration.defaultFallbackGasPrices;\n        try {\n            this.lastGasPrice = median\n                ? await this.fetchMedianGasPriceOffChain()\n                : await this.fetchGasPricesOffChain();\n            return this.lastGasPrice;\n        }\n        catch (e) {\n            console.log('Failed to fetch gas prices from offchain oracles. Trying onchain ones...');\n        }\n        try {\n            const fastGas = await this.fetchGasPricesOnChain();\n            this.lastGasPrice = {\n                instant: fastGas * 1.3,\n                fast: fastGas,\n                standard: fastGas * 0.85,\n                low: fastGas * 0.5,\n            };\n            return this.lastGasPrice;\n        }\n        catch (e) {\n            console.log('Failed to fetch gas prices from onchain oracles. Last known gas will be returned');\n        }\n        return this.lastGasPrice;\n    }\n    addOffChainOracle(oracle) {\n        this.offChainOracles[oracle.name] = oracle;\n    }\n    addOnChainOracle(oracle) {\n        this.onChainOracles[oracle.name] = oracle;\n    }\n    removeOnChainOracle(name) {\n        delete this.onChainOracles[name];\n    }\n    removeOffChainOracle(name) {\n        delete this.offChainOracles[name];\n    }\n}\nexports.GasPriceOracle = GasPriceOracle;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}