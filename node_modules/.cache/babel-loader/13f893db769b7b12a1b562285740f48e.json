{"ast":null,"code":"import { gql, request } from 'graphql-request';\nimport { GRAPH_HEALTH_ENDPOINT } from 'lib/constants';\nimport { logError } from 'lib/helpers';\nconst healthQuery = gql`\n  query getHealthStatus($subgraph: String!) {\n    status: indexingStatusForCurrentVersion(subgraphName: $subgraph) {\n      synced\n      health\n      fatalError {\n        message\n        block {\n          number\n          hash\n        }\n        handler\n      }\n      chains {\n        chainHeadBlock {\n          number\n        }\n        latestBlock {\n          number\n        }\n      }\n    }\n  }\n`;\nconst extractStatus = ({\n  fatalError,\n  synced,\n  chains\n}) => ({\n  isReachable: true,\n  isFailed: !!fatalError,\n  isSynced: synced,\n  latestBlockNumber: Number(chains[0].latestBlock.number),\n  chainHeadBlockNumber: Number(chains[0].chainHeadBlock.number)\n});\nconst failedStatus = {\n  isReachable: false,\n  isFailed: true,\n  isSynced: false,\n  latestBlockNumber: 0,\n  chainHeadBlockNumber: 0\n};\nexport const getHealthStatus = async subgraph => {\n  try {\n    const data = await request(GRAPH_HEALTH_ENDPOINT, healthQuery, {\n      subgraph\n    });\n    return extractStatus(data.status);\n  } catch (graphHealthError) {\n    logError(`Error getting subgraph health for ${subgraph}`, graphHealthError);\n    return failedStatus;\n  }\n};","map":{"version":3,"names":["gql","request","GRAPH_HEALTH_ENDPOINT","logError","healthQuery","extractStatus","fatalError","synced","chains","isReachable","isFailed","isSynced","latestBlockNumber","Number","latestBlock","number","chainHeadBlockNumber","chainHeadBlock","failedStatus","getHealthStatus","subgraph","data","status","graphHealthError"],"sources":["/home/hightop/bahamas_bridge/omnibridge-ui/packages/dapp/src/lib/graphHealth.js"],"sourcesContent":["import { gql, request } from 'graphql-request';\nimport { GRAPH_HEALTH_ENDPOINT } from 'lib/constants';\nimport { logError } from 'lib/helpers';\n\nconst healthQuery = gql`\n  query getHealthStatus($subgraph: String!) {\n    status: indexingStatusForCurrentVersion(subgraphName: $subgraph) {\n      synced\n      health\n      fatalError {\n        message\n        block {\n          number\n          hash\n        }\n        handler\n      }\n      chains {\n        chainHeadBlock {\n          number\n        }\n        latestBlock {\n          number\n        }\n      }\n    }\n  }\n`;\n\nconst extractStatus = ({ fatalError, synced, chains }) => ({\n  isReachable: true,\n  isFailed: !!fatalError,\n  isSynced: synced,\n  latestBlockNumber: Number(chains[0].latestBlock.number),\n  chainHeadBlockNumber: Number(chains[0].chainHeadBlock.number),\n});\n\nconst failedStatus = {\n  isReachable: false,\n  isFailed: true,\n  isSynced: false,\n  latestBlockNumber: 0,\n  chainHeadBlockNumber: 0,\n};\n\nexport const getHealthStatus = async subgraph => {\n  try {\n    const data = await request(GRAPH_HEALTH_ENDPOINT, healthQuery, {\n      subgraph,\n    });\n    return extractStatus(data.status);\n  } catch (graphHealthError) {\n    logError(`Error getting subgraph health for ${subgraph}`, graphHealthError);\n    return failedStatus;\n  }\n};\n"],"mappings":"AAAA,SAASA,GAAG,EAAEC,OAAO,QAAQ,iBAAiB;AAC9C,SAASC,qBAAqB,QAAQ,eAAe;AACrD,SAASC,QAAQ,QAAQ,aAAa;AAEtC,MAAMC,WAAW,GAAGJ,GAAI;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMK,aAAa,GAAGA,CAAC;EAAEC,UAAU;EAAEC,MAAM;EAAEC;AAAO,CAAC,MAAM;EACzDC,WAAW,EAAE,IAAI;EACjBC,QAAQ,EAAE,CAAC,CAACJ,UAAU;EACtBK,QAAQ,EAAEJ,MAAM;EAChBK,iBAAiB,EAAEC,MAAM,CAACL,MAAM,CAAC,CAAC,CAAC,CAACM,WAAW,CAACC,MAAM,CAAC;EACvDC,oBAAoB,EAAEH,MAAM,CAACL,MAAM,CAAC,CAAC,CAAC,CAACS,cAAc,CAACF,MAAM;AAC9D,CAAC,CAAC;AAEF,MAAMG,YAAY,GAAG;EACnBT,WAAW,EAAE,KAAK;EAClBC,QAAQ,EAAE,IAAI;EACdC,QAAQ,EAAE,KAAK;EACfC,iBAAiB,EAAE,CAAC;EACpBI,oBAAoB,EAAE;AACxB,CAAC;AAED,OAAO,MAAMG,eAAe,GAAG,MAAMC,QAAQ,IAAI;EAC/C,IAAI;IACF,MAAMC,IAAI,GAAG,MAAMpB,OAAO,CAACC,qBAAqB,EAAEE,WAAW,EAAE;MAC7DgB;IACF,CAAC,CAAC;IACF,OAAOf,aAAa,CAACgB,IAAI,CAACC,MAAM,CAAC;EACnC,CAAC,CAAC,OAAOC,gBAAgB,EAAE;IACzBpB,QAAQ,CAAE,qCAAoCiB,QAAS,EAAC,EAAEG,gBAAgB,CAAC;IAC3E,OAAOL,YAAY;EACrB;AACF,CAAC"},"metadata":{},"sourceType":"module"}