{"ast":null,"code":"var _s = $RefreshSig$();\nimport { getNetworkLabel, logError } from 'lib/helpers';\nimport { fetchRequiredSignatures, fetchValidatorList } from 'lib/message';\nimport { getEthersProvider } from 'lib/providers';\nimport { useEffect, useState } from 'react';\nexport const useValidatorsContract = (foreignChainId, foreignAmbAddress) => {\n  _s();\n  const [requiredSignatures, setRequiredSignatures] = useState(0);\n  const [validatorList, setValidatorList] = useState([]);\n  useEffect(() => {\n    const label = getNetworkLabel(foreignChainId).toUpperCase();\n    const key = `${label}-${foreignAmbAddress.toUpperCase()}-REQUIRED-SIGNATURES`;\n    const fetchValue = async () => {\n      try {\n        const provider = await getEthersProvider(foreignChainId);\n        const res = await fetchRequiredSignatures(foreignAmbAddress, provider);\n        const signatures = Number.parseInt(res.toString(), 10);\n        setRequiredSignatures(signatures);\n        sessionStorage.setItem(key, signatures);\n      } catch (versionError) {\n        logError({\n          versionError\n        });\n      }\n    };\n    const storedValue = sessionStorage.getItem(key);\n    if (storedValue) {\n      setRequiredSignatures(Number.parseInt(storedValue, 10));\n    } else {\n      fetchValue();\n    }\n  }, [foreignAmbAddress, foreignChainId]);\n  useEffect(() => {\n    const label = getNetworkLabel(foreignChainId).toUpperCase();\n    const key = `${label}-${foreignAmbAddress.toUpperCase()}-VALIDATOR-LIST`;\n    const fetchValue = async () => {\n      try {\n        const provider = await getEthersProvider(foreignChainId);\n        const res = await fetchValidatorList(foreignAmbAddress, provider);\n        setValidatorList(res);\n        sessionStorage.setItem(key, JSON.stringify(res));\n      } catch (versionError) {\n        logError({\n          versionError\n        });\n      }\n    };\n    const storedValue = sessionStorage.getItem(key);\n    if (storedValue) {\n      setValidatorList(JSON.parse(storedValue));\n    } else {\n      fetchValue();\n    }\n  }, [foreignAmbAddress, foreignChainId]);\n  return {\n    requiredSignatures,\n    validatorList\n  };\n};\n_s(useValidatorsContract, \"XnCZienD3WMiL3zU5NloFNIpwNo=\");","map":{"version":3,"names":["getNetworkLabel","logError","fetchRequiredSignatures","fetchValidatorList","getEthersProvider","useEffect","useState","useValidatorsContract","foreignChainId","foreignAmbAddress","_s","requiredSignatures","setRequiredSignatures","validatorList","setValidatorList","label","toUpperCase","key","fetchValue","provider","res","signatures","Number","parseInt","toString","sessionStorage","setItem","versionError","storedValue","getItem","JSON","stringify","parse"],"sources":["/home/hightop/bahamas_bridge/omnibridge-ui/packages/dapp/src/hooks/useValidatorsContract.js"],"sourcesContent":["import { getNetworkLabel, logError } from 'lib/helpers';\nimport { fetchRequiredSignatures, fetchValidatorList } from 'lib/message';\nimport { getEthersProvider } from 'lib/providers';\nimport { useEffect, useState } from 'react';\n\nexport const useValidatorsContract = (foreignChainId, foreignAmbAddress) => {\n  const [requiredSignatures, setRequiredSignatures] = useState(0);\n  const [validatorList, setValidatorList] = useState([]);\n\n  useEffect(() => {\n    const label = getNetworkLabel(foreignChainId).toUpperCase();\n    const key = `${label}-${foreignAmbAddress.toUpperCase()}-REQUIRED-SIGNATURES`;\n    const fetchValue = async () => {\n      try {\n        const provider = await getEthersProvider(foreignChainId);\n        const res = await fetchRequiredSignatures(foreignAmbAddress, provider);\n        const signatures = Number.parseInt(res.toString(), 10);\n        setRequiredSignatures(signatures);\n        sessionStorage.setItem(key, signatures);\n      } catch (versionError) {\n        logError({ versionError });\n      }\n    };\n    const storedValue = sessionStorage.getItem(key);\n    if (storedValue) {\n      setRequiredSignatures(Number.parseInt(storedValue, 10));\n    } else {\n      fetchValue();\n    }\n  }, [foreignAmbAddress, foreignChainId]);\n\n  useEffect(() => {\n    const label = getNetworkLabel(foreignChainId).toUpperCase();\n    const key = `${label}-${foreignAmbAddress.toUpperCase()}-VALIDATOR-LIST`;\n    const fetchValue = async () => {\n      try {\n        const provider = await getEthersProvider(foreignChainId);\n        const res = await fetchValidatorList(foreignAmbAddress, provider);\n        setValidatorList(res);\n        sessionStorage.setItem(key, JSON.stringify(res));\n      } catch (versionError) {\n        logError({ versionError });\n      }\n    };\n    const storedValue = sessionStorage.getItem(key);\n    if (storedValue) {\n      setValidatorList(JSON.parse(storedValue));\n    } else {\n      fetchValue();\n    }\n  }, [foreignAmbAddress, foreignChainId]);\n\n  return { requiredSignatures, validatorList };\n};\n"],"mappings":";AAAA,SAASA,eAAe,EAAEC,QAAQ,QAAQ,aAAa;AACvD,SAASC,uBAAuB,EAAEC,kBAAkB,QAAQ,aAAa;AACzE,SAASC,iBAAiB,QAAQ,eAAe;AACjD,SAASC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAE3C,OAAO,MAAMC,qBAAqB,GAAGA,CAACC,cAAc,EAAEC,iBAAiB,KAAK;EAAAC,EAAA;EAC1E,MAAM,CAACC,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGN,QAAQ,CAAC,CAAC,CAAC;EAC/D,MAAM,CAACO,aAAa,EAAEC,gBAAgB,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAEtDD,SAAS,CAAC,MAAM;IACd,MAAMU,KAAK,GAAGf,eAAe,CAACQ,cAAc,CAAC,CAACQ,WAAW,CAAC,CAAC;IAC3D,MAAMC,GAAG,GAAI,GAAEF,KAAM,IAAGN,iBAAiB,CAACO,WAAW,CAAC,CAAE,sBAAqB;IAC7E,MAAME,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC7B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMf,iBAAiB,CAACI,cAAc,CAAC;QACxD,MAAMY,GAAG,GAAG,MAAMlB,uBAAuB,CAACO,iBAAiB,EAAEU,QAAQ,CAAC;QACtE,MAAME,UAAU,GAAGC,MAAM,CAACC,QAAQ,CAACH,GAAG,CAACI,QAAQ,CAAC,CAAC,EAAE,EAAE,CAAC;QACtDZ,qBAAqB,CAACS,UAAU,CAAC;QACjCI,cAAc,CAACC,OAAO,CAACT,GAAG,EAAEI,UAAU,CAAC;MACzC,CAAC,CAAC,OAAOM,YAAY,EAAE;QACrB1B,QAAQ,CAAC;UAAE0B;QAAa,CAAC,CAAC;MAC5B;IACF,CAAC;IACD,MAAMC,WAAW,GAAGH,cAAc,CAACI,OAAO,CAACZ,GAAG,CAAC;IAC/C,IAAIW,WAAW,EAAE;MACfhB,qBAAqB,CAACU,MAAM,CAACC,QAAQ,CAACK,WAAW,EAAE,EAAE,CAAC,CAAC;IACzD,CAAC,MAAM;MACLV,UAAU,CAAC,CAAC;IACd;EACF,CAAC,EAAE,CAACT,iBAAiB,EAAED,cAAc,CAAC,CAAC;EAEvCH,SAAS,CAAC,MAAM;IACd,MAAMU,KAAK,GAAGf,eAAe,CAACQ,cAAc,CAAC,CAACQ,WAAW,CAAC,CAAC;IAC3D,MAAMC,GAAG,GAAI,GAAEF,KAAM,IAAGN,iBAAiB,CAACO,WAAW,CAAC,CAAE,iBAAgB;IACxE,MAAME,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC7B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMf,iBAAiB,CAACI,cAAc,CAAC;QACxD,MAAMY,GAAG,GAAG,MAAMjB,kBAAkB,CAACM,iBAAiB,EAAEU,QAAQ,CAAC;QACjEL,gBAAgB,CAACM,GAAG,CAAC;QACrBK,cAAc,CAACC,OAAO,CAACT,GAAG,EAAEa,IAAI,CAACC,SAAS,CAACX,GAAG,CAAC,CAAC;MAClD,CAAC,CAAC,OAAOO,YAAY,EAAE;QACrB1B,QAAQ,CAAC;UAAE0B;QAAa,CAAC,CAAC;MAC5B;IACF,CAAC;IACD,MAAMC,WAAW,GAAGH,cAAc,CAACI,OAAO,CAACZ,GAAG,CAAC;IAC/C,IAAIW,WAAW,EAAE;MACfd,gBAAgB,CAACgB,IAAI,CAACE,KAAK,CAACJ,WAAW,CAAC,CAAC;IAC3C,CAAC,MAAM;MACLV,UAAU,CAAC,CAAC;IACd;EACF,CAAC,EAAE,CAACT,iBAAiB,EAAED,cAAc,CAAC,CAAC;EAEvC,OAAO;IAAEG,kBAAkB;IAAEE;EAAc,CAAC;AAC9C,CAAC;AAACH,EAAA,CAhDWH,qBAAqB"},"metadata":{},"sourceType":"module"}