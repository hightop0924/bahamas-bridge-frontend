{"ast":null,"code":"import { __assign, __values } from \"tslib\";\nimport { htmlTreeAsString } from './browser';\nimport { isElement, isError, isEvent, isInstanceOf, isPlainObject, isPrimitive } from './is';\nimport { truncate } from './string';\n/**\n * Replace a method in an object with a wrapped version of itself.\n *\n * @param source An object that contains a method to be wrapped.\n * @param name The name of the method to be wrapped.\n * @param replacementFactory A higher-order function that takes the original version of the given method and returns a\n * wrapped version. Note: The function returned by `replacementFactory` needs to be a non-arrow function, in order to\n * preserve the correct value of `this`, and the original method must be called using `origMethod.call(this, <other\n * args>)` or `origMethod.apply(this, [<other args>])` (rather than being called directly), again to preserve `this`.\n * @returns void\n */\nexport function fill(source, name, replacementFactory) {\n  if (!(name in source)) {\n    return;\n  }\n  var original = source[name];\n  var wrapped = replacementFactory(original);\n  // Make sure it's a function first, as we need to attach an empty prototype for `defineProperties` to work\n  // otherwise it'll throw \"TypeError: Object.defineProperties called on non-object\"\n  if (typeof wrapped === 'function') {\n    try {\n      markFunctionWrapped(wrapped, original);\n    } catch (_Oo) {\n      // This can throw if multiple fill happens on a global object like XMLHttpRequest\n      // Fixes https://github.com/getsentry/sentry-javascript/issues/2043\n    }\n  }\n  source[name] = wrapped;\n}\n/**\n * Defines a non-enumerable property on the given object.\n *\n * @param obj The object on which to set the property\n * @param name The name of the property to be set\n * @param value The value to which to set the property\n */\nexport function addNonEnumerableProperty(obj, name, value) {\n  Object.defineProperty(obj, name, {\n    // enumerable: false, // the default, so we can save on bundle size by not explicitly setting it\n    value: value,\n    writable: true,\n    configurable: true\n  });\n}\n/**\n * Remembers the original function on the wrapped function and\n * patches up the prototype.\n *\n * @param wrapped the wrapper function\n * @param original the original function that gets wrapped\n */\nexport function markFunctionWrapped(wrapped, original) {\n  var proto = original.prototype || {};\n  wrapped.prototype = original.prototype = proto;\n  addNonEnumerableProperty(wrapped, '__sentry_original__', original);\n}\n/**\n * This extracts the original function if available.  See\n * `markFunctionWrapped` for more information.\n *\n * @param func the function to unwrap\n * @returns the unwrapped version of the function if available.\n */\nexport function getOriginalFunction(func) {\n  return func.__sentry_original__;\n}\n/**\n * Encodes given object into url-friendly format\n *\n * @param object An object that contains serializable values\n * @returns string Encoded\n */\nexport function urlEncode(object) {\n  return Object.keys(object).map(function (key) {\n    return encodeURIComponent(key) + \"=\" + encodeURIComponent(object[key]);\n  }).join('&');\n}\n/**\n * Transforms any object into an object literal with all its attributes\n * attached to it.\n *\n * @param value Initial source that we have to transform in order for it to be usable by the serializer\n */\nexport function convertToPlainObject(value) {\n  var newObj = value;\n  if (isError(value)) {\n    newObj = __assign({\n      message: value.message,\n      name: value.name,\n      stack: value.stack\n    }, getOwnProperties(value));\n  } else if (isEvent(value)) {\n    var event_1 = value;\n    newObj = __assign({\n      type: event_1.type,\n      target: serializeEventTarget(event_1.target),\n      currentTarget: serializeEventTarget(event_1.currentTarget)\n    }, getOwnProperties(event_1));\n    if (typeof CustomEvent !== 'undefined' && isInstanceOf(value, CustomEvent)) {\n      newObj.detail = event_1.detail;\n    }\n  }\n  return newObj;\n}\n/** Creates a string representation of the target of an `Event` object */\nfunction serializeEventTarget(target) {\n  try {\n    return isElement(target) ? htmlTreeAsString(target) : Object.prototype.toString.call(target);\n  } catch (_oO) {\n    return '<unknown>';\n  }\n}\n/** Filters out all but an object's own properties */\nfunction getOwnProperties(obj) {\n  var extractedProps = {};\n  for (var property in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, property)) {\n      extractedProps[property] = obj[property];\n    }\n  }\n  return extractedProps;\n}\n/**\n * Given any captured exception, extract its keys and create a sorted\n * and truncated list that will be used inside the event message.\n * eg. `Non-error exception captured with keys: foo, bar, baz`\n */\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport function extractExceptionKeysForMessage(exception, maxLength) {\n  if (maxLength === void 0) {\n    maxLength = 40;\n  }\n  var keys = Object.keys(convertToPlainObject(exception));\n  keys.sort();\n  if (!keys.length) {\n    return '[object has no keys]';\n  }\n  if (keys[0].length >= maxLength) {\n    return truncate(keys[0], maxLength);\n  }\n  for (var includedKeys = keys.length; includedKeys > 0; includedKeys--) {\n    var serialized = keys.slice(0, includedKeys).join(', ');\n    if (serialized.length > maxLength) {\n      continue;\n    }\n    if (includedKeys === keys.length) {\n      return serialized;\n    }\n    return truncate(serialized, maxLength);\n  }\n  return '';\n}\n/**\n * Given any object, return the new object with removed keys that value was `undefined`.\n * Works recursively on objects and arrays.\n */\nexport function dropUndefinedKeys(val) {\n  var e_1, _a;\n  if (isPlainObject(val)) {\n    var rv = {};\n    try {\n      for (var _b = __values(Object.keys(val)), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var key = _c.value;\n        if (typeof val[key] !== 'undefined') {\n          rv[key] = dropUndefinedKeys(val[key]);\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n    return rv;\n  }\n  if (Array.isArray(val)) {\n    return val.map(dropUndefinedKeys);\n  }\n  return val;\n}\n/**\n * Ensure that something is an object.\n *\n * Turns `undefined` and `null` into `String`s and all other primitives into instances of their respective wrapper\n * classes (String, Boolean, Number, etc.). Acts as the identity function on non-primitives.\n *\n * @param wat The subject of the objectification\n * @returns A version of `wat` which can safely be used with `Object` class methods\n */\nexport function objectify(wat) {\n  var objectified;\n  switch (true) {\n    case wat === undefined || wat === null:\n      objectified = new String(wat);\n      break;\n    // Though symbols and bigints do have wrapper classes (`Symbol` and `BigInt`, respectively), for whatever reason\n    // those classes don't have constructors which can be used with the `new` keyword. We therefore need to cast each as\n    // an object in order to wrap it.\n    case typeof wat === 'symbol' || typeof wat === 'bigint':\n      objectified = Object(wat);\n      break;\n    // this will catch the remaining primitives: `String`, `Number`, and `Boolean`\n    case isPrimitive(wat):\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      objectified = new wat.constructor(wat);\n      break;\n    // by process of elimination, at this point we know that `wat` must already be an object\n    default:\n      objectified = wat;\n      break;\n  }\n  return objectified;\n}","map":{"version":3,"sources":["../../src/object.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable max-lines */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { ExtendedError, WrappedFunction } from '@sentry/types';\n\nimport { htmlTreeAsString } from './browser';\nimport { isElement, isError, isEvent, isInstanceOf, isPlainObject, isPrimitive } from './is';\nimport { truncate } from './string';\n\n/**\n * Replace a method in an object with a wrapped version of itself.\n *\n * @param source An object that contains a method to be wrapped.\n * @param name The name of the method to be wrapped.\n * @param replacementFactory A higher-order function that takes the original version of the given method and returns a\n * wrapped version. Note: The function returned by `replacementFactory` needs to be a non-arrow function, in order to\n * preserve the correct value of `this`, and the original method must be called using `origMethod.call(this, <other\n * args>)` or `origMethod.apply(this, [<other args>])` (rather than being called directly), again to preserve `this`.\n * @returns void\n */\nexport function fill(source: { [key: string]: any }, name: string, replacementFactory: (...args: any[]) => any): void {\n  if (!(name in source)) {\n    return;\n  }\n\n  const original = source[name] as () => any;\n  const wrapped = replacementFactory(original) as WrappedFunction;\n\n  // Make sure it's a function first, as we need to attach an empty prototype for `defineProperties` to work\n  // otherwise it'll throw \"TypeError: Object.defineProperties called on non-object\"\n  if (typeof wrapped === 'function') {\n    try {\n      markFunctionWrapped(wrapped, original);\n    } catch (_Oo) {\n      // This can throw if multiple fill happens on a global object like XMLHttpRequest\n      // Fixes https://github.com/getsentry/sentry-javascript/issues/2043\n    }\n  }\n\n  source[name] = wrapped;\n}\n\n/**\n * Defines a non-enumerable property on the given object.\n *\n * @param obj The object on which to set the property\n * @param name The name of the property to be set\n * @param value The value to which to set the property\n */\nexport function addNonEnumerableProperty(obj: { [key: string]: unknown }, name: string, value: unknown): void {\n  Object.defineProperty(obj, name, {\n    // enumerable: false, // the default, so we can save on bundle size by not explicitly setting it\n    value: value,\n    writable: true,\n    configurable: true,\n  });\n}\n\n/**\n * Remembers the original function on the wrapped function and\n * patches up the prototype.\n *\n * @param wrapped the wrapper function\n * @param original the original function that gets wrapped\n */\nexport function markFunctionWrapped(wrapped: WrappedFunction, original: WrappedFunction): void {\n  const proto = original.prototype || {};\n  wrapped.prototype = original.prototype = proto;\n  addNonEnumerableProperty(wrapped, '__sentry_original__', original);\n}\n\n/**\n * This extracts the original function if available.  See\n * `markFunctionWrapped` for more information.\n *\n * @param func the function to unwrap\n * @returns the unwrapped version of the function if available.\n */\nexport function getOriginalFunction(func: WrappedFunction): WrappedFunction | undefined {\n  return func.__sentry_original__;\n}\n\n/**\n * Encodes given object into url-friendly format\n *\n * @param object An object that contains serializable values\n * @returns string Encoded\n */\nexport function urlEncode(object: { [key: string]: any }): string {\n  return Object.keys(object)\n    .map(key => `${encodeURIComponent(key)}=${encodeURIComponent(object[key])}`)\n    .join('&');\n}\n\n/**\n * Transforms any object into an object literal with all its attributes\n * attached to it.\n *\n * @param value Initial source that we have to transform in order for it to be usable by the serializer\n */\nexport function convertToPlainObject(value: unknown): {\n  [key: string]: unknown;\n} {\n  let newObj = value as {\n    [key: string]: unknown;\n  };\n\n  if (isError(value)) {\n    newObj = {\n      message: value.message,\n      name: value.name,\n      stack: value.stack,\n      ...getOwnProperties(value as ExtendedError),\n    };\n  } else if (isEvent(value)) {\n    /**\n     * Event-like interface that's usable in browser and node\n     */\n    interface SimpleEvent {\n      [key: string]: unknown;\n      type: string;\n      target?: unknown;\n      currentTarget?: unknown;\n    }\n\n    const event = value as SimpleEvent;\n\n    newObj = {\n      type: event.type,\n      target: serializeEventTarget(event.target),\n      currentTarget: serializeEventTarget(event.currentTarget),\n      ...getOwnProperties(event),\n    };\n\n    if (typeof CustomEvent !== 'undefined' && isInstanceOf(value, CustomEvent)) {\n      newObj.detail = event.detail;\n    }\n  }\n  return newObj;\n}\n\n/** Creates a string representation of the target of an `Event` object */\nfunction serializeEventTarget(target: unknown): string {\n  try {\n    return isElement(target) ? htmlTreeAsString(target) : Object.prototype.toString.call(target);\n  } catch (_oO) {\n    return '<unknown>';\n  }\n}\n\n/** Filters out all but an object's own properties */\nfunction getOwnProperties(obj: { [key: string]: unknown }): { [key: string]: unknown } {\n  const extractedProps: { [key: string]: unknown } = {};\n  for (const property in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, property)) {\n      extractedProps[property] = obj[property];\n    }\n  }\n  return extractedProps;\n}\n\n/**\n * Given any captured exception, extract its keys and create a sorted\n * and truncated list that will be used inside the event message.\n * eg. `Non-error exception captured with keys: foo, bar, baz`\n */\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport function extractExceptionKeysForMessage(exception: any, maxLength: number = 40): string {\n  const keys = Object.keys(convertToPlainObject(exception));\n  keys.sort();\n\n  if (!keys.length) {\n    return '[object has no keys]';\n  }\n\n  if (keys[0].length >= maxLength) {\n    return truncate(keys[0], maxLength);\n  }\n\n  for (let includedKeys = keys.length; includedKeys > 0; includedKeys--) {\n    const serialized = keys.slice(0, includedKeys).join(', ');\n    if (serialized.length > maxLength) {\n      continue;\n    }\n    if (includedKeys === keys.length) {\n      return serialized;\n    }\n    return truncate(serialized, maxLength);\n  }\n\n  return '';\n}\n\n/**\n * Given any object, return the new object with removed keys that value was `undefined`.\n * Works recursively on objects and arrays.\n */\nexport function dropUndefinedKeys<T>(val: T): T {\n  if (isPlainObject(val)) {\n    const rv: { [key: string]: any } = {};\n    for (const key of Object.keys(val)) {\n      if (typeof val[key] !== 'undefined') {\n        rv[key] = dropUndefinedKeys(val[key]);\n      }\n    }\n    return rv as T;\n  }\n\n  if (Array.isArray(val)) {\n    return (val as any[]).map(dropUndefinedKeys) as any;\n  }\n\n  return val;\n}\n\n/**\n * Ensure that something is an object.\n *\n * Turns `undefined` and `null` into `String`s and all other primitives into instances of their respective wrapper\n * classes (String, Boolean, Number, etc.). Acts as the identity function on non-primitives.\n *\n * @param wat The subject of the objectification\n * @returns A version of `wat` which can safely be used with `Object` class methods\n */\nexport function objectify(wat: unknown): typeof Object {\n  let objectified;\n  switch (true) {\n    case wat === undefined || wat === null:\n      objectified = new String(wat);\n      break;\n\n    // Though symbols and bigints do have wrapper classes (`Symbol` and `BigInt`, respectively), for whatever reason\n    // those classes don't have constructors which can be used with the `new` keyword. We therefore need to cast each as\n    // an object in order to wrap it.\n    case typeof wat === 'symbol' || typeof wat === 'bigint':\n      objectified = Object(wat);\n      break;\n\n    // this will catch the remaining primitives: `String`, `Number`, and `Boolean`\n    case isPrimitive(wat):\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      objectified = new (wat as any).constructor(wat);\n      break;\n\n    // by process of elimination, at this point we know that `wat` must already be an object\n    default:\n      objectified = wat;\n      break;\n  }\n  return objectified;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}