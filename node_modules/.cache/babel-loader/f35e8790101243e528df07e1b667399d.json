{"ast":null,"code":"import { dropUndefinedKeys, timestampInSeconds, uuid4 } from '@sentry/utils';\n/**\n * @inheritdoc\n */\nvar Session = /** @class */function () {\n  function Session(context) {\n    this.errors = 0;\n    this.sid = uuid4();\n    this.duration = 0;\n    this.status = 'ok';\n    this.init = true;\n    this.ignoreDuration = false;\n    // Both timestamp and started are in seconds since the UNIX epoch.\n    var startingTime = timestampInSeconds();\n    this.timestamp = startingTime;\n    this.started = startingTime;\n    if (context) {\n      this.update(context);\n    }\n  }\n  /** JSDoc */\n  // eslint-disable-next-line complexity\n  Session.prototype.update = function (context) {\n    if (context === void 0) {\n      context = {};\n    }\n    if (context.user) {\n      if (!this.ipAddress && context.user.ip_address) {\n        this.ipAddress = context.user.ip_address;\n      }\n      if (!this.did && !context.did) {\n        this.did = context.user.id || context.user.email || context.user.username;\n      }\n    }\n    this.timestamp = context.timestamp || timestampInSeconds();\n    if (context.ignoreDuration) {\n      this.ignoreDuration = context.ignoreDuration;\n    }\n    if (context.sid) {\n      // Good enough uuid validation. — Kamil\n      this.sid = context.sid.length === 32 ? context.sid : uuid4();\n    }\n    if (context.init !== undefined) {\n      this.init = context.init;\n    }\n    if (!this.did && context.did) {\n      this.did = \"\" + context.did;\n    }\n    if (typeof context.started === 'number') {\n      this.started = context.started;\n    }\n    if (this.ignoreDuration) {\n      this.duration = undefined;\n    } else if (typeof context.duration === 'number') {\n      this.duration = context.duration;\n    } else {\n      var duration = this.timestamp - this.started;\n      this.duration = duration >= 0 ? duration : 0;\n    }\n    if (context.release) {\n      this.release = context.release;\n    }\n    if (context.environment) {\n      this.environment = context.environment;\n    }\n    if (!this.ipAddress && context.ipAddress) {\n      this.ipAddress = context.ipAddress;\n    }\n    if (!this.userAgent && context.userAgent) {\n      this.userAgent = context.userAgent;\n    }\n    if (typeof context.errors === 'number') {\n      this.errors = context.errors;\n    }\n    if (context.status) {\n      this.status = context.status;\n    }\n  };\n  /** JSDoc */\n  Session.prototype.close = function (status) {\n    if (status) {\n      this.update({\n        status: status\n      });\n    } else if (this.status === 'ok') {\n      this.update({\n        status: 'exited'\n      });\n    } else {\n      this.update();\n    }\n  };\n  /** JSDoc */\n  Session.prototype.toJSON = function () {\n    return dropUndefinedKeys({\n      sid: \"\" + this.sid,\n      init: this.init,\n      // Make sure that sec is converted to ms for date constructor\n      started: new Date(this.started * 1000).toISOString(),\n      timestamp: new Date(this.timestamp * 1000).toISOString(),\n      status: this.status,\n      errors: this.errors,\n      did: typeof this.did === 'number' || typeof this.did === 'string' ? \"\" + this.did : undefined,\n      duration: this.duration,\n      attrs: {\n        release: this.release,\n        environment: this.environment,\n        ip_address: this.ipAddress,\n        user_agent: this.userAgent\n      }\n    });\n  };\n  return Session;\n}();\nexport { Session };","map":{"version":3,"sources":["../../src/session.ts"],"names":[],"mappings":"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","sourcesContent":["import { Session as SessionInterface, SessionContext, SessionStatus } from '@sentry/types';\nimport { dropUndefinedKeys, timestampInSeconds, uuid4 } from '@sentry/utils';\n\n/**\n * @inheritdoc\n */\nexport class Session implements SessionInterface {\n  public userAgent?: string;\n  public errors: number = 0;\n  public release?: string;\n  public sid: string = uuid4();\n  public did?: string;\n  public timestamp: number;\n  public started: number;\n  public duration?: number = 0;\n  public status: SessionStatus = 'ok';\n  public environment?: string;\n  public ipAddress?: string;\n  public init: boolean = true;\n  public ignoreDuration: boolean = false;\n\n  public constructor(context?: Omit<SessionContext, 'started' | 'status'>) {\n    // Both timestamp and started are in seconds since the UNIX epoch.\n    const startingTime = timestampInSeconds();\n    this.timestamp = startingTime;\n    this.started = startingTime;\n    if (context) {\n      this.update(context);\n    }\n  }\n\n  /** JSDoc */\n  // eslint-disable-next-line complexity\n  public update(context: SessionContext = {}): void {\n    if (context.user) {\n      if (!this.ipAddress && context.user.ip_address) {\n        this.ipAddress = context.user.ip_address;\n      }\n\n      if (!this.did && !context.did) {\n        this.did = context.user.id || context.user.email || context.user.username;\n      }\n    }\n\n    this.timestamp = context.timestamp || timestampInSeconds();\n    if (context.ignoreDuration) {\n      this.ignoreDuration = context.ignoreDuration;\n    }\n    if (context.sid) {\n      // Good enough uuid validation. — Kamil\n      this.sid = context.sid.length === 32 ? context.sid : uuid4();\n    }\n    if (context.init !== undefined) {\n      this.init = context.init;\n    }\n    if (!this.did && context.did) {\n      this.did = `${context.did}`;\n    }\n    if (typeof context.started === 'number') {\n      this.started = context.started;\n    }\n    if (this.ignoreDuration) {\n      this.duration = undefined;\n    } else if (typeof context.duration === 'number') {\n      this.duration = context.duration;\n    } else {\n      const duration = this.timestamp - this.started;\n      this.duration = duration >= 0 ? duration : 0;\n    }\n    if (context.release) {\n      this.release = context.release;\n    }\n    if (context.environment) {\n      this.environment = context.environment;\n    }\n    if (!this.ipAddress && context.ipAddress) {\n      this.ipAddress = context.ipAddress;\n    }\n    if (!this.userAgent && context.userAgent) {\n      this.userAgent = context.userAgent;\n    }\n    if (typeof context.errors === 'number') {\n      this.errors = context.errors;\n    }\n    if (context.status) {\n      this.status = context.status;\n    }\n  }\n\n  /** JSDoc */\n  public close(status?: Exclude<SessionStatus, 'ok'>): void {\n    if (status) {\n      this.update({ status });\n    } else if (this.status === 'ok') {\n      this.update({ status: 'exited' });\n    } else {\n      this.update();\n    }\n  }\n\n  /** JSDoc */\n  public toJSON(): {\n    init: boolean;\n    sid: string;\n    did?: string;\n    timestamp: string;\n    started: string;\n    duration?: number;\n    status: SessionStatus;\n    errors: number;\n    attrs?: {\n      release?: string;\n      environment?: string;\n      user_agent?: string;\n      ip_address?: string;\n    };\n  } {\n    return dropUndefinedKeys({\n      sid: `${this.sid}`,\n      init: this.init,\n      // Make sure that sec is converted to ms for date constructor\n      started: new Date(this.started * 1000).toISOString(),\n      timestamp: new Date(this.timestamp * 1000).toISOString(),\n      status: this.status,\n      errors: this.errors,\n      did: typeof this.did === 'number' || typeof this.did === 'string' ? `${this.did}` : undefined,\n      duration: this.duration,\n      attrs: {\n        release: this.release,\n        environment: this.environment,\n        ip_address: this.ipAddress,\n        user_agent: this.userAgent,\n      },\n    });\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}