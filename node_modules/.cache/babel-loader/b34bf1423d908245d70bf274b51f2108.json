{"ast":null,"code":"import { getCurrentHub } from '@sentry/hub';\n/**\n * The `extractTraceparentData` function and `TRACEPARENT_REGEXP` constant used\n * to be declared in this file. It was later moved into `@sentry/utils` as part of a\n * move to remove `@sentry/tracing` dependencies from `@sentry/node` (`extractTraceparentData`\n * is the only tracing function used by `@sentry/node`).\n *\n * These exports are kept here for backwards compatability's sake.\n *\n * TODO(v7): Reorganize these exports\n *\n * See https://github.com/getsentry/sentry-javascript/issues/4642 for more details.\n */\nexport { TRACEPARENT_REGEXP, extractTraceparentData } from '@sentry/utils';\n/**\n * Determines if tracing is currently enabled.\n *\n * Tracing is enabled when at least one of `tracesSampleRate` and `tracesSampler` is defined in the SDK config.\n */\nexport function hasTracingEnabled(maybeOptions) {\n  var client = getCurrentHub().getClient();\n  var options = maybeOptions || client && client.getOptions();\n  return !!options && ('tracesSampleRate' in options || 'tracesSampler' in options);\n}\n/** Grabs active transaction off scope, if any */\nexport function getActiveTransaction(maybeHub) {\n  var hub = maybeHub || getCurrentHub();\n  var scope = hub.getScope();\n  return scope && scope.getTransaction();\n}\n/**\n * Converts from milliseconds to seconds\n * @param time time in ms\n */\nexport function msToSec(time) {\n  return time / 1000;\n}\n/**\n * Converts from seconds to milliseconds\n * @param time time in seconds\n */\nexport function secToMs(time) {\n  return time * 1000;\n}\n// so it can be used in manual instrumentation without necessitating a hard dependency on @sentry/utils\nexport { stripUrlQueryAndFragment } from '@sentry/utils';","map":{"version":3,"sources":["../../../src/utils.ts"],"names":[],"mappings":"AAAA,SAAS,aAAa,QAAa,aAAa;AAGhD;;;;;;;;;;;AAWG;AACH,SAAS,kBAAkB,EAAE,sBAAsB,QAAQ,eAAe;AAE1E;;;;AAIG;AACH,OAAM,SAAU,iBAAiB,CAAC,YAAkC,EAAA;EAClE,IAAM,MAAM,GAAG,aAAa,CAAA,CAAE,CAAC,SAAS,CAAA,CAAE;EAC1C,IAAM,OAAO,GAAG,YAAY,IAAK,MAAM,IAAI,MAAM,CAAC,UAAU,CAAA,CAAG;EAC/D,OAAO,CAAC,CAAC,OAAO,KAAK,kBAAkB,IAAI,OAAO,IAAI,eAAe,IAAI,OAAO,CAAC;AACnF;AAEA;AACA,OAAM,SAAU,oBAAoB,CAAwB,QAAc,EAAA;EACxE,IAAM,GAAG,GAAG,QAAQ,IAAI,aAAa,CAAA,CAAE;EACvC,IAAM,KAAK,GAAG,GAAG,CAAC,QAAQ,CAAA,CAAE;EAC5B,OAAO,KAAK,IAAK,KAAK,CAAC,cAAc,CAAA,CAAoB;AAC3D;AAEA;;;AAGG;AACH,OAAM,SAAU,OAAO,CAAC,IAAY,EAAA;EAClC,OAAO,IAAI,GAAG,IAAI;AACpB;AAEA;;;AAGG;AACH,OAAM,SAAU,OAAO,CAAC,IAAY,EAAA;EAClC,OAAO,IAAI,GAAG,IAAI;AACpB;AAEA;AACA,SAAS,wBAAwB,QAAQ,eAAe","sourcesContent":["import { getCurrentHub, Hub } from '@sentry/hub';\nimport { Options, Transaction } from '@sentry/types';\n\n/**\n * The `extractTraceparentData` function and `TRACEPARENT_REGEXP` constant used\n * to be declared in this file. It was later moved into `@sentry/utils` as part of a\n * move to remove `@sentry/tracing` dependencies from `@sentry/node` (`extractTraceparentData`\n * is the only tracing function used by `@sentry/node`).\n *\n * These exports are kept here for backwards compatability's sake.\n *\n * TODO(v7): Reorganize these exports\n *\n * See https://github.com/getsentry/sentry-javascript/issues/4642 for more details.\n */\nexport { TRACEPARENT_REGEXP, extractTraceparentData } from '@sentry/utils';\n\n/**\n * Determines if tracing is currently enabled.\n *\n * Tracing is enabled when at least one of `tracesSampleRate` and `tracesSampler` is defined in the SDK config.\n */\nexport function hasTracingEnabled(maybeOptions?: Options | undefined): boolean {\n  const client = getCurrentHub().getClient();\n  const options = maybeOptions || (client && client.getOptions());\n  return !!options && ('tracesSampleRate' in options || 'tracesSampler' in options);\n}\n\n/** Grabs active transaction off scope, if any */\nexport function getActiveTransaction<T extends Transaction>(maybeHub?: Hub): T | undefined {\n  const hub = maybeHub || getCurrentHub();\n  const scope = hub.getScope();\n  return scope && (scope.getTransaction() as T | undefined);\n}\n\n/**\n * Converts from milliseconds to seconds\n * @param time time in ms\n */\nexport function msToSec(time: number): number {\n  return time / 1000;\n}\n\n/**\n * Converts from seconds to milliseconds\n * @param time time in seconds\n */\nexport function secToMs(time: number): number {\n  return time * 1000;\n}\n\n// so it can be used in manual instrumentation without necessitating a hard dependency on @sentry/utils\nexport { stripUrlQueryAndFragment } from '@sentry/utils';\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}