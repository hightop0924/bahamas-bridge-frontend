{"ast":null,"code":"import { logDebug, logError } from 'lib/helpers';\nconst ethPriceFromApi = async fetchFn => {\n  try {\n    const response = await fetchFn();\n    const json = await response.json();\n    const oracleEthPrice = json.ethereum.usd;\n    if (!oracleEthPrice) {\n      logError(`Response from Oracle didn't include eth price`);\n      return null;\n    }\n    logDebug('Updated ETH Price', json.ethereum);\n    return oracleEthPrice;\n  } catch (e) {\n    logError(`ETH Price API is not available. ${e.message}`);\n  }\n  return null;\n};\nconst {\n  REACT_APP_ETH_PRICE_API_URL,\n  REACT_APP_ETH_PRICE_UPDATE_INTERVAL\n} = process.env;\nconst DEFAULT_ETH_PRICE_API_URL = 'https://api.coingecko.com/api/v3/simple/price?ids=ethereum&vs_currencies=USD';\nconst DEFAULT_ETH_PRICE_UPDATE_INTERVAL = 60000;\nclass EthPriceStore {\n  constructor() {\n    this.ethPrice = null;\n    this.ethPriceApiUrl = null;\n    this.updateInterval = null;\n    this.ethPriceApiUrl = REACT_APP_ETH_PRICE_API_URL || DEFAULT_ETH_PRICE_API_URL;\n    this.updateInterval = REACT_APP_ETH_PRICE_UPDATE_INTERVAL || DEFAULT_ETH_PRICE_UPDATE_INTERVAL;\n    this.updateGasPrice();\n  }\n  async updateGasPrice() {\n    const fetchFn = () => fetch(this.ethPriceApiUrl);\n    this.ethPrice = await ethPriceFromApi(fetchFn);\n    setTimeout(() => this.updateGasPrice(), this.updateInterval);\n  }\n  ethPriceInUSD() {\n    return this.ethPrice;\n  }\n}\nconst ethPriceStore = new EthPriceStore();\nexport const getETHPrice = () => ethPriceStore.ethPriceInUSD();","map":{"version":3,"names":["logDebug","logError","ethPriceFromApi","fetchFn","response","json","oracleEthPrice","ethereum","usd","e","message","REACT_APP_ETH_PRICE_API_URL","REACT_APP_ETH_PRICE_UPDATE_INTERVAL","process","env","DEFAULT_ETH_PRICE_API_URL","DEFAULT_ETH_PRICE_UPDATE_INTERVAL","EthPriceStore","constructor","ethPrice","ethPriceApiUrl","updateInterval","updateGasPrice","fetch","setTimeout","ethPriceInUSD","ethPriceStore","getETHPrice"],"sources":["/home/hightop/bahamas_bridge/omnibridge-ui/packages/dapp/src/stores/ethPrice.js"],"sourcesContent":["import { logDebug, logError } from 'lib/helpers';\n\nconst ethPriceFromApi = async fetchFn => {\n  try {\n    const response = await fetchFn();\n    const json = await response.json();\n    const oracleEthPrice = json.ethereum.usd;\n\n    if (!oracleEthPrice) {\n      logError(`Response from Oracle didn't include eth price`);\n      return null;\n    }\n\n    logDebug('Updated ETH Price', json.ethereum);\n\n    return oracleEthPrice;\n  } catch (e) {\n    logError(`ETH Price API is not available. ${e.message}`);\n  }\n  return null;\n};\n\nconst { REACT_APP_ETH_PRICE_API_URL, REACT_APP_ETH_PRICE_UPDATE_INTERVAL } =\n  process.env;\n\nconst DEFAULT_ETH_PRICE_API_URL =\n  'https://api.coingecko.com/api/v3/simple/price?ids=ethereum&vs_currencies=USD';\nconst DEFAULT_ETH_PRICE_UPDATE_INTERVAL = 60000;\n\nclass EthPriceStore {\n  ethPrice = null;\n\n  ethPriceApiUrl = null;\n\n  updateInterval = null;\n\n  constructor() {\n    this.ethPriceApiUrl =\n      REACT_APP_ETH_PRICE_API_URL || DEFAULT_ETH_PRICE_API_URL;\n    this.updateInterval =\n      REACT_APP_ETH_PRICE_UPDATE_INTERVAL || DEFAULT_ETH_PRICE_UPDATE_INTERVAL;\n    this.updateGasPrice();\n  }\n\n  async updateGasPrice() {\n    const fetchFn = () => fetch(this.ethPriceApiUrl);\n    this.ethPrice = await ethPriceFromApi(fetchFn);\n    setTimeout(() => this.updateGasPrice(), this.updateInterval);\n  }\n\n  ethPriceInUSD() {\n    return this.ethPrice;\n  }\n}\n\nconst ethPriceStore = new EthPriceStore();\n\nexport const getETHPrice = () => ethPriceStore.ethPriceInUSD();\n"],"mappings":"AAAA,SAASA,QAAQ,EAAEC,QAAQ,QAAQ,aAAa;AAEhD,MAAMC,eAAe,GAAG,MAAMC,OAAO,IAAI;EACvC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMD,OAAO,CAAC,CAAC;IAChC,MAAME,IAAI,GAAG,MAAMD,QAAQ,CAACC,IAAI,CAAC,CAAC;IAClC,MAAMC,cAAc,GAAGD,IAAI,CAACE,QAAQ,CAACC,GAAG;IAExC,IAAI,CAACF,cAAc,EAAE;MACnBL,QAAQ,CAAE,+CAA8C,CAAC;MACzD,OAAO,IAAI;IACb;IAEAD,QAAQ,CAAC,mBAAmB,EAAEK,IAAI,CAACE,QAAQ,CAAC;IAE5C,OAAOD,cAAc;EACvB,CAAC,CAAC,OAAOG,CAAC,EAAE;IACVR,QAAQ,CAAE,mCAAkCQ,CAAC,CAACC,OAAQ,EAAC,CAAC;EAC1D;EACA,OAAO,IAAI;AACb,CAAC;AAED,MAAM;EAAEC,2BAA2B;EAAEC;AAAoC,CAAC,GACxEC,OAAO,CAACC,GAAG;AAEb,MAAMC,yBAAyB,GAC7B,8EAA8E;AAChF,MAAMC,iCAAiC,GAAG,KAAK;AAE/C,MAAMC,aAAa,CAAC;EAOlBC,WAAWA,CAAA,EAAG;IAAA,KANdC,QAAQ,GAAG,IAAI;IAAA,KAEfC,cAAc,GAAG,IAAI;IAAA,KAErBC,cAAc,GAAG,IAAI;IAGnB,IAAI,CAACD,cAAc,GACjBT,2BAA2B,IAAII,yBAAyB;IAC1D,IAAI,CAACM,cAAc,GACjBT,mCAAmC,IAAII,iCAAiC;IAC1E,IAAI,CAACM,cAAc,CAAC,CAAC;EACvB;EAEA,MAAMA,cAAcA,CAAA,EAAG;IACrB,MAAMnB,OAAO,GAAGA,CAAA,KAAMoB,KAAK,CAAC,IAAI,CAACH,cAAc,CAAC;IAChD,IAAI,CAACD,QAAQ,GAAG,MAAMjB,eAAe,CAACC,OAAO,CAAC;IAC9CqB,UAAU,CAAC,MAAM,IAAI,CAACF,cAAc,CAAC,CAAC,EAAE,IAAI,CAACD,cAAc,CAAC;EAC9D;EAEAI,aAAaA,CAAA,EAAG;IACd,OAAO,IAAI,CAACN,QAAQ;EACtB;AACF;AAEA,MAAMO,aAAa,GAAG,IAAIT,aAAa,CAAC,CAAC;AAEzC,OAAO,MAAMU,WAAW,GAAGA,CAAA,KAAMD,aAAa,CAACD,aAAa,CAAC,CAAC"},"metadata":{},"sourceType":"module"}