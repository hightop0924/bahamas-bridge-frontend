{"ast":null,"code":"import { gql, request } from 'graphql-request';\nimport { ADDRESS_ZERO } from './constants';\nimport { logError } from './helpers';\nconst pageSize = 1000;\nconst requestsUserQuery = gql`\n  query getRequests($user: String!, $first: Int!, $skip: Int!) {\n    requests: userRequests(\n      where: { user: $user }\n      orderBy: txHash\n      orderDirection: desc\n      first: $first\n      skip: $skip\n    ) {\n      user: recipient\n      txHash\n      messageId\n      timestamp\n      amount\n      token\n      decimals\n      symbol\n      message {\n        txHash\n        messageId: msgId\n        messageData: msgData\n        signatures\n      }\n    }\n  }\n`;\nconst requestsRecipientQuery = gql`\n  query getRequests($user: String!, $first: Int!, $skip: Int!) {\n    requests: userRequests(\n      where: { user_not: $user, recipient: $user }\n      orderBy: txHash\n      orderDirection: desc\n      first: $first\n      skip: $skip\n    ) {\n      user: recipient\n      txHash\n      messageId\n      timestamp\n      amount\n      token\n      decimals\n      symbol\n      message {\n        txHash\n        messageId: msgId\n        messageData: msgData\n        signatures\n      }\n    }\n  }\n`;\nconst executionsQuery = gql`\n  query getExecutions($first: Int!, $skip: Int!, $messageIds: [Bytes!]) {\n    executions(\n      where: { messageId_in: $messageIds }\n      first: $first\n      skip: $skip\n      orderBy: txHash\n      orderDirection: desc\n    ) {\n      txHash\n      messageId\n      token\n      status\n    }\n  }\n`;\nexport const getExecutions = async (graphEndpoint, requests) => {\n  const messageIds = requests.map(r => r.messageId);\n  let executions = [];\n  let page = 0;\n  const first = pageSize;\n\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    try {\n      // eslint-disable-next-line no-await-in-loop\n      const data = await request(graphEndpoint, executionsQuery, {\n        first,\n        skip: page * pageSize,\n        messageIds\n      });\n      if (data) {\n        executions = data.executions.concat(executions);\n      }\n      if (!data || data.executions.length < pageSize) break;\n      page += 1;\n    } catch (graphExecutionsError) {\n      logError({\n        graphExecutionsError\n      });\n      break;\n    }\n  }\n  return {\n    executions\n  };\n};\nconst getRequestsWithQuery = async (user, graphEndpoint, query) => {\n  let requests = [];\n  let page = 0;\n  const first = pageSize;\n\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    try {\n      // eslint-disable-next-line no-await-in-loop\n      const data = await request(graphEndpoint, query, {\n        user,\n        first,\n        skip: page * pageSize\n      });\n      if (data) {\n        requests = data.requests.concat(requests);\n      }\n      if (!data || data.requests.length < pageSize) break;\n      page += 1;\n    } catch (graphUserRequestsError) {\n      logError({\n        graphUserRequestsError\n      });\n      break;\n    }\n  }\n  return {\n    requests\n  };\n};\nexport const getRequests = async (user, graphEndpoint) => {\n  const [userRequests, recipientRequests] = await Promise.all([getRequestsWithQuery(user, graphEndpoint, requestsUserQuery), getRequestsWithQuery(user, graphEndpoint, requestsRecipientQuery)]);\n  return {\n    requests: [...userRequests.requests, ...recipientRequests.requests]\n  };\n};\nexport const combineRequestsWithExecutions = (requests, executions, chainId, bridgeChainId) => requests.map(req => {\n  const execution = executions.find(exec => exec.messageId === req.messageId);\n  return {\n    user: req.user,\n    chainId,\n    timestamp: req.timestamp,\n    sendingTx: req.txHash,\n    receivingTx: execution === null || execution === void 0 ? void 0 : execution.txHash,\n    status: execution === null || execution === void 0 ? void 0 : execution.status,\n    amount: req.amount,\n    fromToken: {\n      address: req.token,\n      decimals: req.decimals,\n      symbol: req.symbol,\n      chainId\n    },\n    toToken: {\n      address: execution ? execution.token : ADDRESS_ZERO,\n      decimals: req.decimals,\n      symbol: req.symbol,\n      chainId: bridgeChainId\n    },\n    message: req.message\n  };\n});","map":{"version":3,"names":["gql","request","ADDRESS_ZERO","logError","pageSize","requestsUserQuery","requestsRecipientQuery","executionsQuery","getExecutions","graphEndpoint","requests","messageIds","map","r","messageId","executions","page","first","data","skip","concat","length","graphExecutionsError","getRequestsWithQuery","user","query","graphUserRequestsError","getRequests","userRequests","recipientRequests","Promise","all","combineRequestsWithExecutions","chainId","bridgeChainId","req","execution","find","exec","timestamp","sendingTx","txHash","receivingTx","status","amount","fromToken","address","token","decimals","symbol","toToken","message"],"sources":["/home/hightop/bahamas_bridge/omnibridge-ui/packages/dapp/src/lib/history.js"],"sourcesContent":["import { gql, request } from 'graphql-request';\n\nimport { ADDRESS_ZERO } from './constants';\nimport { logError } from './helpers';\n\nconst pageSize = 1000;\n\nconst requestsUserQuery = gql`\n  query getRequests($user: String!, $first: Int!, $skip: Int!) {\n    requests: userRequests(\n      where: { user: $user }\n      orderBy: txHash\n      orderDirection: desc\n      first: $first\n      skip: $skip\n    ) {\n      user: recipient\n      txHash\n      messageId\n      timestamp\n      amount\n      token\n      decimals\n      symbol\n      message {\n        txHash\n        messageId: msgId\n        messageData: msgData\n        signatures\n      }\n    }\n  }\n`;\n\nconst requestsRecipientQuery = gql`\n  query getRequests($user: String!, $first: Int!, $skip: Int!) {\n    requests: userRequests(\n      where: { user_not: $user, recipient: $user }\n      orderBy: txHash\n      orderDirection: desc\n      first: $first\n      skip: $skip\n    ) {\n      user: recipient\n      txHash\n      messageId\n      timestamp\n      amount\n      token\n      decimals\n      symbol\n      message {\n        txHash\n        messageId: msgId\n        messageData: msgData\n        signatures\n      }\n    }\n  }\n`;\n\nconst executionsQuery = gql`\n  query getExecutions($first: Int!, $skip: Int!, $messageIds: [Bytes!]) {\n    executions(\n      where: { messageId_in: $messageIds }\n      first: $first\n      skip: $skip\n      orderBy: txHash\n      orderDirection: desc\n    ) {\n      txHash\n      messageId\n      token\n      status\n    }\n  }\n`;\n\nexport const getExecutions = async (graphEndpoint, requests) => {\n  const messageIds = requests.map(r => r.messageId);\n  let executions = [];\n  let page = 0;\n  const first = pageSize;\n\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    try {\n      // eslint-disable-next-line no-await-in-loop\n      const data = await request(graphEndpoint, executionsQuery, {\n        first,\n        skip: page * pageSize,\n        messageIds,\n      });\n      if (data) {\n        executions = data.executions.concat(executions);\n      }\n      if (!data || data.executions.length < pageSize) break;\n      page += 1;\n    } catch (graphExecutionsError) {\n      logError({ graphExecutionsError });\n      break;\n    }\n  }\n\n  return { executions };\n};\n\nconst getRequestsWithQuery = async (user, graphEndpoint, query) => {\n  let requests = [];\n  let page = 0;\n  const first = pageSize;\n\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    try {\n      // eslint-disable-next-line no-await-in-loop\n      const data = await request(graphEndpoint, query, {\n        user,\n        first,\n        skip: page * pageSize,\n      });\n      if (data) {\n        requests = data.requests.concat(requests);\n      }\n      if (!data || data.requests.length < pageSize) break;\n      page += 1;\n    } catch (graphUserRequestsError) {\n      logError({ graphUserRequestsError });\n      break;\n    }\n  }\n\n  return { requests };\n};\n\nexport const getRequests = async (user, graphEndpoint) => {\n  const [userRequests, recipientRequests] = await Promise.all([\n    getRequestsWithQuery(user, graphEndpoint, requestsUserQuery),\n    getRequestsWithQuery(user, graphEndpoint, requestsRecipientQuery),\n  ]);\n  return {\n    requests: [...userRequests.requests, ...recipientRequests.requests],\n  };\n};\n\nexport const combineRequestsWithExecutions = (\n  requests,\n  executions,\n  chainId,\n  bridgeChainId,\n) =>\n  requests.map(req => {\n    const execution = executions.find(exec => exec.messageId === req.messageId);\n    return {\n      user: req.user,\n      chainId,\n      timestamp: req.timestamp,\n      sendingTx: req.txHash,\n      receivingTx: execution?.txHash,\n      status: execution?.status,\n      amount: req.amount,\n      fromToken: {\n        address: req.token,\n        decimals: req.decimals,\n        symbol: req.symbol,\n        chainId,\n      },\n      toToken: {\n        address: execution ? execution.token : ADDRESS_ZERO,\n        decimals: req.decimals,\n        symbol: req.symbol,\n        chainId: bridgeChainId,\n      },\n      message: req.message,\n    };\n  });\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}