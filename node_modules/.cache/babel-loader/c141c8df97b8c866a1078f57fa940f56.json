{"ast":null,"code":"import { __assign, __read, __spread, __values } from \"tslib\";\n/* eslint-disable max-lines */\nimport { Scope } from '@sentry/hub';\nimport { checkOrSetAlreadyCaught, dateTimestampInSeconds, isPlainObject, isPrimitive, isThenable, logger, makeDsn, normalize, rejectedSyncPromise, resolvedSyncPromise, SentryError, SyncPromise, truncate, uuid4 } from '@sentry/utils';\nimport { IS_DEBUG_BUILD } from './flags';\nimport { setupIntegrations } from './integration';\nvar ALREADY_SEEN_ERROR = \"Not capturing exception because it's already been captured.\";\n/**\n * Base implementation for all JavaScript SDK clients.\n *\n * Call the constructor with the corresponding backend constructor and options\n * specific to the client subclass. To access these options later, use\n * {@link Client.getOptions}. Also, the Backend instance is available via\n * {@link Client.getBackend}.\n *\n * If a Dsn is specified in the options, it will be parsed and stored. Use\n * {@link Client.getDsn} to retrieve the Dsn at any moment. In case the Dsn is\n * invalid, the constructor will throw a {@link SentryException}. Note that\n * without a valid Dsn, the SDK will not send any events to Sentry.\n *\n * Before sending an event via the backend, it is passed through\n * {@link BaseClient._prepareEvent} to add SDK information and scope data\n * (breadcrumbs and context). To add more custom information, override this\n * method and extend the resulting prepared event.\n *\n * To issue automatically created events (e.g. via instrumentation), use\n * {@link Client.captureEvent}. It will prepare the event and pass it through\n * the callback lifecycle. To issue auto-breadcrumbs, use\n * {@link Client.addBreadcrumb}.\n *\n * @example\n * class NodeClient extends BaseClient<NodeBackend, NodeOptions> {\n *   public constructor(options: NodeOptions) {\n *     super(NodeBackend, options);\n *   }\n *\n *   // ...\n * }\n */\nvar BaseClient = /** @class */function () {\n  /**\n   * Initializes this client instance.\n   *\n   * @param backendClass A constructor function to create the backend.\n   * @param options Options for the client.\n   */\n  function BaseClient(backendClass, options) {\n    /** Array of used integrations. */\n    this._integrations = {};\n    /** Number of calls being processed */\n    this._numProcessing = 0;\n    this._backend = new backendClass(options);\n    this._options = options;\n    if (options.dsn) {\n      this._dsn = makeDsn(options.dsn);\n    }\n  }\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n  BaseClient.prototype.captureException = function (exception, hint, scope) {\n    var _this = this;\n    // ensure we haven't captured this very object before\n    if (checkOrSetAlreadyCaught(exception)) {\n      IS_DEBUG_BUILD && logger.log(ALREADY_SEEN_ERROR);\n      return;\n    }\n    var eventId = hint && hint.event_id;\n    this._process(this._getBackend().eventFromException(exception, hint).then(function (event) {\n      return _this._captureEvent(event, hint, scope);\n    }).then(function (result) {\n      eventId = result;\n    }));\n    return eventId;\n  };\n  /**\n   * @inheritDoc\n   */\n  BaseClient.prototype.captureMessage = function (message, level, hint, scope) {\n    var _this = this;\n    var eventId = hint && hint.event_id;\n    var promisedEvent = isPrimitive(message) ? this._getBackend().eventFromMessage(String(message), level, hint) : this._getBackend().eventFromException(message, hint);\n    this._process(promisedEvent.then(function (event) {\n      return _this._captureEvent(event, hint, scope);\n    }).then(function (result) {\n      eventId = result;\n    }));\n    return eventId;\n  };\n  /**\n   * @inheritDoc\n   */\n  BaseClient.prototype.captureEvent = function (event, hint, scope) {\n    // ensure we haven't captured this very object before\n    if (hint && hint.originalException && checkOrSetAlreadyCaught(hint.originalException)) {\n      IS_DEBUG_BUILD && logger.log(ALREADY_SEEN_ERROR);\n      return;\n    }\n    var eventId = hint && hint.event_id;\n    this._process(this._captureEvent(event, hint, scope).then(function (result) {\n      eventId = result;\n    }));\n    return eventId;\n  };\n  /**\n   * @inheritDoc\n   */\n  BaseClient.prototype.captureSession = function (session) {\n    if (!this._isEnabled()) {\n      IS_DEBUG_BUILD && logger.warn('SDK not enabled, will not capture session.');\n      return;\n    }\n    if (!(typeof session.release === 'string')) {\n      IS_DEBUG_BUILD && logger.warn('Discarded session because of missing or non-string release');\n    } else {\n      this._sendSession(session);\n      // After sending, we set init false to indicate it's not the first occurrence\n      session.update({\n        init: false\n      });\n    }\n  };\n  /**\n   * @inheritDoc\n   */\n  BaseClient.prototype.getDsn = function () {\n    return this._dsn;\n  };\n  /**\n   * @inheritDoc\n   */\n  BaseClient.prototype.getOptions = function () {\n    return this._options;\n  };\n  /**\n   * @inheritDoc\n   */\n  BaseClient.prototype.getTransport = function () {\n    return this._getBackend().getTransport();\n  };\n  /**\n   * @inheritDoc\n   */\n  BaseClient.prototype.flush = function (timeout) {\n    var _this = this;\n    return this._isClientDoneProcessing(timeout).then(function (clientFinished) {\n      return _this.getTransport().close(timeout).then(function (transportFlushed) {\n        return clientFinished && transportFlushed;\n      });\n    });\n  };\n  /**\n   * @inheritDoc\n   */\n  BaseClient.prototype.close = function (timeout) {\n    var _this = this;\n    return this.flush(timeout).then(function (result) {\n      _this.getOptions().enabled = false;\n      return result;\n    });\n  };\n  /**\n   * Sets up the integrations\n   */\n  BaseClient.prototype.setupIntegrations = function () {\n    if (this._isEnabled() && !this._integrations.initialized) {\n      this._integrations = setupIntegrations(this._options);\n    }\n  };\n  /**\n   * @inheritDoc\n   */\n  BaseClient.prototype.getIntegration = function (integration) {\n    try {\n      return this._integrations[integration.id] || null;\n    } catch (_oO) {\n      IS_DEBUG_BUILD && logger.warn(\"Cannot retrieve integration \" + integration.id + \" from the current Client\");\n      return null;\n    }\n  };\n  /** Updates existing session based on the provided event */\n  BaseClient.prototype._updateSessionFromEvent = function (session, event) {\n    var e_1, _a;\n    var crashed = false;\n    var errored = false;\n    var exceptions = event.exception && event.exception.values;\n    if (exceptions) {\n      errored = true;\n      try {\n        for (var exceptions_1 = __values(exceptions), exceptions_1_1 = exceptions_1.next(); !exceptions_1_1.done; exceptions_1_1 = exceptions_1.next()) {\n          var ex = exceptions_1_1.value;\n          var mechanism = ex.mechanism;\n          if (mechanism && mechanism.handled === false) {\n            crashed = true;\n            break;\n          }\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (exceptions_1_1 && !exceptions_1_1.done && (_a = exceptions_1.return)) _a.call(exceptions_1);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n    }\n    // A session is updated and that session update is sent in only one of the two following scenarios:\n    // 1. Session with non terminal status and 0 errors + an error occurred -> Will set error count to 1 and send update\n    // 2. Session with non terminal status and 1 error + a crash occurred -> Will set status crashed and send update\n    var sessionNonTerminal = session.status === 'ok';\n    var shouldUpdateAndSend = sessionNonTerminal && session.errors === 0 || sessionNonTerminal && crashed;\n    if (shouldUpdateAndSend) {\n      session.update(__assign(__assign({}, crashed && {\n        status: 'crashed'\n      }), {\n        errors: session.errors || Number(errored || crashed)\n      }));\n      this.captureSession(session);\n    }\n  };\n  /** Deliver captured session to Sentry */\n  BaseClient.prototype._sendSession = function (session) {\n    this._getBackend().sendSession(session);\n  };\n  /**\n   * Determine if the client is finished processing. Returns a promise because it will wait `timeout` ms before saying\n   * \"no\" (resolving to `false`) in order to give the client a chance to potentially finish first.\n   *\n   * @param timeout The time, in ms, after which to resolve to `false` if the client is still busy. Passing `0` (or not\n   * passing anything) will make the promise wait as long as it takes for processing to finish before resolving to\n   * `true`.\n   * @returns A promise which will resolve to `true` if processing is already done or finishes before the timeout, and\n   * `false` otherwise\n   */\n  BaseClient.prototype._isClientDoneProcessing = function (timeout) {\n    var _this = this;\n    return new SyncPromise(function (resolve) {\n      var ticked = 0;\n      var tick = 1;\n      var interval = setInterval(function () {\n        if (_this._numProcessing == 0) {\n          clearInterval(interval);\n          resolve(true);\n        } else {\n          ticked += tick;\n          if (timeout && ticked >= timeout) {\n            clearInterval(interval);\n            resolve(false);\n          }\n        }\n      }, tick);\n    });\n  };\n  /** Returns the current backend. */\n  BaseClient.prototype._getBackend = function () {\n    return this._backend;\n  };\n  /** Determines whether this SDK is enabled and a valid Dsn is present. */\n  BaseClient.prototype._isEnabled = function () {\n    return this.getOptions().enabled !== false && this._dsn !== undefined;\n  };\n  /**\n   * Adds common information to events.\n   *\n   * The information includes release and environment from `options`,\n   * breadcrumbs and context (extra, tags and user) from the scope.\n   *\n   * Information that is already present in the event is never overwritten. For\n   * nested objects, such as the context, keys are merged.\n   *\n   * @param event The original event.\n   * @param hint May contain additional information about the original exception.\n   * @param scope A scope containing event metadata.\n   * @returns A new event with more information.\n   */\n  BaseClient.prototype._prepareEvent = function (event, scope, hint) {\n    var _this = this;\n    var _a = this.getOptions(),\n      _b = _a.normalizeDepth,\n      normalizeDepth = _b === void 0 ? 3 : _b,\n      _c = _a.normalizeMaxBreadth,\n      normalizeMaxBreadth = _c === void 0 ? 1000 : _c;\n    var prepared = __assign(__assign({}, event), {\n      event_id: event.event_id || (hint && hint.event_id ? hint.event_id : uuid4()),\n      timestamp: event.timestamp || dateTimestampInSeconds()\n    });\n    this._applyClientOptions(prepared);\n    this._applyIntegrationsMetadata(prepared);\n    // If we have scope given to us, use it as the base for further modifications.\n    // This allows us to prevent unnecessary copying of data if `captureContext` is not provided.\n    var finalScope = scope;\n    if (hint && hint.captureContext) {\n      finalScope = Scope.clone(finalScope).update(hint.captureContext);\n    }\n    // We prepare the result here with a resolved Event.\n    var result = resolvedSyncPromise(prepared);\n    // This should be the last thing called, since we want that\n    // {@link Hub.addEventProcessor} gets the finished prepared event.\n    if (finalScope) {\n      // In case we have a hub we reassign it.\n      result = finalScope.applyToEvent(prepared, hint);\n    }\n    return result.then(function (evt) {\n      if (evt) {\n        // TODO this is more of the hack trying to solve https://github.com/getsentry/sentry-javascript/issues/2809\n        // it is only attached as extra data to the event if the event somehow skips being normalized\n        evt.sdkProcessingMetadata = __assign(__assign({}, evt.sdkProcessingMetadata), {\n          normalizeDepth: normalize(normalizeDepth) + \" (\" + typeof normalizeDepth + \")\"\n        });\n      }\n      if (typeof normalizeDepth === 'number' && normalizeDepth > 0) {\n        return _this._normalizeEvent(evt, normalizeDepth, normalizeMaxBreadth);\n      }\n      return evt;\n    });\n  };\n  /**\n   * Applies `normalize` function on necessary `Event` attributes to make them safe for serialization.\n   * Normalized keys:\n   * - `breadcrumbs.data`\n   * - `user`\n   * - `contexts`\n   * - `extra`\n   * @param event Event\n   * @returns Normalized event\n   */\n  BaseClient.prototype._normalizeEvent = function (event, depth, maxBreadth) {\n    if (!event) {\n      return null;\n    }\n    var normalized = __assign(__assign(__assign(__assign(__assign({}, event), event.breadcrumbs && {\n      breadcrumbs: event.breadcrumbs.map(function (b) {\n        return __assign(__assign({}, b), b.data && {\n          data: normalize(b.data, depth, maxBreadth)\n        });\n      })\n    }), event.user && {\n      user: normalize(event.user, depth, maxBreadth)\n    }), event.contexts && {\n      contexts: normalize(event.contexts, depth, maxBreadth)\n    }), event.extra && {\n      extra: normalize(event.extra, depth, maxBreadth)\n    });\n    // event.contexts.trace stores information about a Transaction. Similarly,\n    // event.spans[] stores information about child Spans. Given that a\n    // Transaction is conceptually a Span, normalization should apply to both\n    // Transactions and Spans consistently.\n    // For now the decision is to skip normalization of Transactions and Spans,\n    // so this block overwrites the normalized event to add back the original\n    // Transaction information prior to normalization.\n    if (event.contexts && event.contexts.trace) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      normalized.contexts.trace = event.contexts.trace;\n    }\n    normalized.sdkProcessingMetadata = __assign(__assign({}, normalized.sdkProcessingMetadata), {\n      baseClientNormalized: true\n    });\n    return normalized;\n  };\n  /**\n   *  Enhances event using the client configuration.\n   *  It takes care of all \"static\" values like environment, release and `dist`,\n   *  as well as truncating overly long values.\n   * @param event event instance to be enhanced\n   */\n  BaseClient.prototype._applyClientOptions = function (event) {\n    var options = this.getOptions();\n    var environment = options.environment,\n      release = options.release,\n      dist = options.dist,\n      _a = options.maxValueLength,\n      maxValueLength = _a === void 0 ? 250 : _a;\n    if (!('environment' in event)) {\n      event.environment = 'environment' in options ? environment : 'production';\n    }\n    if (event.release === undefined && release !== undefined) {\n      event.release = release;\n    }\n    if (event.dist === undefined && dist !== undefined) {\n      event.dist = dist;\n    }\n    if (event.message) {\n      event.message = truncate(event.message, maxValueLength);\n    }\n    var exception = event.exception && event.exception.values && event.exception.values[0];\n    if (exception && exception.value) {\n      exception.value = truncate(exception.value, maxValueLength);\n    }\n    var request = event.request;\n    if (request && request.url) {\n      request.url = truncate(request.url, maxValueLength);\n    }\n  };\n  /**\n   * This function adds all used integrations to the SDK info in the event.\n   * @param event The event that will be filled with all integrations.\n   */\n  BaseClient.prototype._applyIntegrationsMetadata = function (event) {\n    var integrationsArray = Object.keys(this._integrations);\n    if (integrationsArray.length > 0) {\n      event.sdk = event.sdk || {};\n      event.sdk.integrations = __spread(event.sdk.integrations || [], integrationsArray);\n    }\n  };\n  /**\n   * Tells the backend to send this event\n   * @param event The Sentry event to send\n   */\n  BaseClient.prototype._sendEvent = function (event) {\n    this._getBackend().sendEvent(event);\n  };\n  /**\n   * Processes the event and logs an error in case of rejection\n   * @param event\n   * @param hint\n   * @param scope\n   */\n  BaseClient.prototype._captureEvent = function (event, hint, scope) {\n    return this._processEvent(event, hint, scope).then(function (finalEvent) {\n      return finalEvent.event_id;\n    }, function (reason) {\n      IS_DEBUG_BUILD && logger.error(reason);\n      return undefined;\n    });\n  };\n  /**\n   * Processes an event (either error or message) and sends it to Sentry.\n   *\n   * This also adds breadcrumbs and context information to the event. However,\n   * platform specific meta data (such as the User's IP address) must be added\n   * by the SDK implementor.\n   *\n   *\n   * @param event The event to send to Sentry.\n   * @param hint May contain additional information about the original exception.\n   * @param scope A scope containing event metadata.\n   * @returns A SyncPromise that resolves with the event or rejects in case event was/will not be send.\n   */\n  BaseClient.prototype._processEvent = function (event, hint, scope) {\n    var _this = this;\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    var _a = this.getOptions(),\n      beforeSend = _a.beforeSend,\n      sampleRate = _a.sampleRate;\n    var transport = this.getTransport();\n    function recordLostEvent(outcome, category) {\n      if (transport.recordLostEvent) {\n        transport.recordLostEvent(outcome, category);\n      }\n    }\n    if (!this._isEnabled()) {\n      return rejectedSyncPromise(new SentryError('SDK not enabled, will not capture event.'));\n    }\n    var isTransaction = event.type === 'transaction';\n    // 1.0 === 100% events are sent\n    // 0.0 === 0% events are sent\n    // Sampling for transaction happens somewhere else\n    if (!isTransaction && typeof sampleRate === 'number' && Math.random() > sampleRate) {\n      recordLostEvent('sample_rate', 'event');\n      return rejectedSyncPromise(new SentryError(\"Discarding event because it's not included in the random sample (sampling rate = \" + sampleRate + \")\"));\n    }\n    return this._prepareEvent(event, scope, hint).then(function (prepared) {\n      if (prepared === null) {\n        recordLostEvent('event_processor', event.type || 'event');\n        throw new SentryError('An event processor returned null, will not send event.');\n      }\n      var isInternalException = hint && hint.data && hint.data.__sentry__ === true;\n      if (isInternalException || isTransaction || !beforeSend) {\n        return prepared;\n      }\n      var beforeSendResult = beforeSend(prepared, hint);\n      return _ensureBeforeSendRv(beforeSendResult);\n    }).then(function (processedEvent) {\n      if (processedEvent === null) {\n        recordLostEvent('before_send', event.type || 'event');\n        throw new SentryError('`beforeSend` returned `null`, will not send event.');\n      }\n      var session = scope && scope.getSession && scope.getSession();\n      if (!isTransaction && session) {\n        _this._updateSessionFromEvent(session, processedEvent);\n      }\n      _this._sendEvent(processedEvent);\n      return processedEvent;\n    }).then(null, function (reason) {\n      if (reason instanceof SentryError) {\n        throw reason;\n      }\n      _this.captureException(reason, {\n        data: {\n          __sentry__: true\n        },\n        originalException: reason\n      });\n      throw new SentryError(\"Event processing pipeline threw an error, original event will not be sent. Details have been sent as a new event.\\nReason: \" + reason);\n    });\n  };\n  /**\n   * Occupies the client with processing and event\n   */\n  BaseClient.prototype._process = function (promise) {\n    var _this = this;\n    this._numProcessing += 1;\n    void promise.then(function (value) {\n      _this._numProcessing -= 1;\n      return value;\n    }, function (reason) {\n      _this._numProcessing -= 1;\n      return reason;\n    });\n  };\n  return BaseClient;\n}();\nexport { BaseClient };\n/**\n * Verifies that return value of configured `beforeSend` is of expected type.\n */\nfunction _ensureBeforeSendRv(rv) {\n  var nullErr = '`beforeSend` method has to return `null` or a valid event.';\n  if (isThenable(rv)) {\n    return rv.then(function (event) {\n      if (!(isPlainObject(event) || event === null)) {\n        throw new SentryError(nullErr);\n      }\n      return event;\n    }, function (e) {\n      throw new SentryError(\"beforeSend rejected with \" + e);\n    });\n  } else if (!(isPlainObject(rv) || rv === null)) {\n    throw new SentryError(nullErr);\n  }\n  return rv;\n}","map":{"version":3,"sources":["../../src/baseclient.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable max-lines */\nimport { Scope, Session } from '@sentry/hub';\nimport {\n  Client,\n  DsnComponents,\n  Event,\n  EventHint,\n  Integration,\n  IntegrationClass,\n  Options,\n  Severity,\n  Transport,\n} from '@sentry/types';\nimport {\n  checkOrSetAlreadyCaught,\n  dateTimestampInSeconds,\n  isPlainObject,\n  isPrimitive,\n  isThenable,\n  logger,\n  makeDsn,\n  normalize,\n  rejectedSyncPromise,\n  resolvedSyncPromise,\n  SentryError,\n  SyncPromise,\n  truncate,\n  uuid4,\n} from '@sentry/utils';\n\nimport { Backend, BackendClass } from './basebackend';\nimport { IS_DEBUG_BUILD } from './flags';\nimport { IntegrationIndex, setupIntegrations } from './integration';\n\nconst ALREADY_SEEN_ERROR = \"Not capturing exception because it's already been captured.\";\n\n/**\n * Base implementation for all JavaScript SDK clients.\n *\n * Call the constructor with the corresponding backend constructor and options\n * specific to the client subclass. To access these options later, use\n * {@link Client.getOptions}. Also, the Backend instance is available via\n * {@link Client.getBackend}.\n *\n * If a Dsn is specified in the options, it will be parsed and stored. Use\n * {@link Client.getDsn} to retrieve the Dsn at any moment. In case the Dsn is\n * invalid, the constructor will throw a {@link SentryException}. Note that\n * without a valid Dsn, the SDK will not send any events to Sentry.\n *\n * Before sending an event via the backend, it is passed through\n * {@link BaseClient._prepareEvent} to add SDK information and scope data\n * (breadcrumbs and context). To add more custom information, override this\n * method and extend the resulting prepared event.\n *\n * To issue automatically created events (e.g. via instrumentation), use\n * {@link Client.captureEvent}. It will prepare the event and pass it through\n * the callback lifecycle. To issue auto-breadcrumbs, use\n * {@link Client.addBreadcrumb}.\n *\n * @example\n * class NodeClient extends BaseClient<NodeBackend, NodeOptions> {\n *   public constructor(options: NodeOptions) {\n *     super(NodeBackend, options);\n *   }\n *\n *   // ...\n * }\n */\nexport abstract class BaseClient<B extends Backend, O extends Options> implements Client<O> {\n  /**\n   * The backend used to physically interact in the environment. Usually, this\n   * will correspond to the client. When composing SDKs, however, the Backend\n   * from the root SDK will be used.\n   */\n  protected readonly _backend: B;\n\n  /** Options passed to the SDK. */\n  protected readonly _options: O;\n\n  /** The client Dsn, if specified in options. Without this Dsn, the SDK will be disabled. */\n  protected readonly _dsn?: DsnComponents;\n\n  /** Array of used integrations. */\n  protected _integrations: IntegrationIndex = {};\n\n  /** Number of calls being processed */\n  protected _numProcessing: number = 0;\n\n  /**\n   * Initializes this client instance.\n   *\n   * @param backendClass A constructor function to create the backend.\n   * @param options Options for the client.\n   */\n  protected constructor(backendClass: BackendClass<B, O>, options: O) {\n    this._backend = new backendClass(options);\n    this._options = options;\n\n    if (options.dsn) {\n      this._dsn = makeDsn(options.dsn);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n  public captureException(exception: any, hint?: EventHint, scope?: Scope): string | undefined {\n    // ensure we haven't captured this very object before\n    if (checkOrSetAlreadyCaught(exception)) {\n      IS_DEBUG_BUILD && logger.log(ALREADY_SEEN_ERROR);\n      return;\n    }\n\n    let eventId: string | undefined = hint && hint.event_id;\n\n    this._process(\n      this._getBackend()\n        .eventFromException(exception, hint)\n        .then(event => this._captureEvent(event, hint, scope))\n        .then(result => {\n          eventId = result;\n        }),\n    );\n\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureMessage(message: string, level?: Severity, hint?: EventHint, scope?: Scope): string | undefined {\n    let eventId: string | undefined = hint && hint.event_id;\n\n    const promisedEvent = isPrimitive(message)\n      ? this._getBackend().eventFromMessage(String(message), level, hint)\n      : this._getBackend().eventFromException(message, hint);\n\n    this._process(\n      promisedEvent\n        .then(event => this._captureEvent(event, hint, scope))\n        .then(result => {\n          eventId = result;\n        }),\n    );\n\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureEvent(event: Event, hint?: EventHint, scope?: Scope): string | undefined {\n    // ensure we haven't captured this very object before\n    if (hint && hint.originalException && checkOrSetAlreadyCaught(hint.originalException)) {\n      IS_DEBUG_BUILD && logger.log(ALREADY_SEEN_ERROR);\n      return;\n    }\n\n    let eventId: string | undefined = hint && hint.event_id;\n\n    this._process(\n      this._captureEvent(event, hint, scope).then(result => {\n        eventId = result;\n      }),\n    );\n\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureSession(session: Session): void {\n    if (!this._isEnabled()) {\n      IS_DEBUG_BUILD && logger.warn('SDK not enabled, will not capture session.');\n      return;\n    }\n\n    if (!(typeof session.release === 'string')) {\n      IS_DEBUG_BUILD && logger.warn('Discarded session because of missing or non-string release');\n    } else {\n      this._sendSession(session);\n      // After sending, we set init false to indicate it's not the first occurrence\n      session.update({ init: false });\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getDsn(): DsnComponents | undefined {\n    return this._dsn;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getOptions(): O {\n    return this._options;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getTransport(): Transport {\n    return this._getBackend().getTransport();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public flush(timeout?: number): PromiseLike<boolean> {\n    return this._isClientDoneProcessing(timeout).then(clientFinished => {\n      return this.getTransport()\n        .close(timeout)\n        .then(transportFlushed => clientFinished && transportFlushed);\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public close(timeout?: number): PromiseLike<boolean> {\n    return this.flush(timeout).then(result => {\n      this.getOptions().enabled = false;\n      return result;\n    });\n  }\n\n  /**\n   * Sets up the integrations\n   */\n  public setupIntegrations(): void {\n    if (this._isEnabled() && !this._integrations.initialized) {\n      this._integrations = setupIntegrations(this._options);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getIntegration<T extends Integration>(integration: IntegrationClass<T>): T | null {\n    try {\n      return (this._integrations[integration.id] as T) || null;\n    } catch (_oO) {\n      IS_DEBUG_BUILD && logger.warn(`Cannot retrieve integration ${integration.id} from the current Client`);\n      return null;\n    }\n  }\n\n  /** Updates existing session based on the provided event */\n  protected _updateSessionFromEvent(session: Session, event: Event): void {\n    let crashed = false;\n    let errored = false;\n    const exceptions = event.exception && event.exception.values;\n\n    if (exceptions) {\n      errored = true;\n\n      for (const ex of exceptions) {\n        const mechanism = ex.mechanism;\n        if (mechanism && mechanism.handled === false) {\n          crashed = true;\n          break;\n        }\n      }\n    }\n\n    // A session is updated and that session update is sent in only one of the two following scenarios:\n    // 1. Session with non terminal status and 0 errors + an error occurred -> Will set error count to 1 and send update\n    // 2. Session with non terminal status and 1 error + a crash occurred -> Will set status crashed and send update\n    const sessionNonTerminal = session.status === 'ok';\n    const shouldUpdateAndSend = (sessionNonTerminal && session.errors === 0) || (sessionNonTerminal && crashed);\n\n    if (shouldUpdateAndSend) {\n      session.update({\n        ...(crashed && { status: 'crashed' }),\n        errors: session.errors || Number(errored || crashed),\n      });\n      this.captureSession(session);\n    }\n  }\n\n  /** Deliver captured session to Sentry */\n  protected _sendSession(session: Session): void {\n    this._getBackend().sendSession(session);\n  }\n\n  /**\n   * Determine if the client is finished processing. Returns a promise because it will wait `timeout` ms before saying\n   * \"no\" (resolving to `false`) in order to give the client a chance to potentially finish first.\n   *\n   * @param timeout The time, in ms, after which to resolve to `false` if the client is still busy. Passing `0` (or not\n   * passing anything) will make the promise wait as long as it takes for processing to finish before resolving to\n   * `true`.\n   * @returns A promise which will resolve to `true` if processing is already done or finishes before the timeout, and\n   * `false` otherwise\n   */\n  protected _isClientDoneProcessing(timeout?: number): PromiseLike<boolean> {\n    return new SyncPromise(resolve => {\n      let ticked: number = 0;\n      const tick: number = 1;\n\n      const interval = setInterval(() => {\n        if (this._numProcessing == 0) {\n          clearInterval(interval);\n          resolve(true);\n        } else {\n          ticked += tick;\n          if (timeout && ticked >= timeout) {\n            clearInterval(interval);\n            resolve(false);\n          }\n        }\n      }, tick);\n    });\n  }\n\n  /** Returns the current backend. */\n  protected _getBackend(): B {\n    return this._backend;\n  }\n\n  /** Determines whether this SDK is enabled and a valid Dsn is present. */\n  protected _isEnabled(): boolean {\n    return this.getOptions().enabled !== false && this._dsn !== undefined;\n  }\n\n  /**\n   * Adds common information to events.\n   *\n   * The information includes release and environment from `options`,\n   * breadcrumbs and context (extra, tags and user) from the scope.\n   *\n   * Information that is already present in the event is never overwritten. For\n   * nested objects, such as the context, keys are merged.\n   *\n   * @param event The original event.\n   * @param hint May contain additional information about the original exception.\n   * @param scope A scope containing event metadata.\n   * @returns A new event with more information.\n   */\n  protected _prepareEvent(event: Event, scope?: Scope, hint?: EventHint): PromiseLike<Event | null> {\n    const { normalizeDepth = 3, normalizeMaxBreadth = 1_000 } = this.getOptions();\n    const prepared: Event = {\n      ...event,\n      event_id: event.event_id || (hint && hint.event_id ? hint.event_id : uuid4()),\n      timestamp: event.timestamp || dateTimestampInSeconds(),\n    };\n\n    this._applyClientOptions(prepared);\n    this._applyIntegrationsMetadata(prepared);\n\n    // If we have scope given to us, use it as the base for further modifications.\n    // This allows us to prevent unnecessary copying of data if `captureContext` is not provided.\n    let finalScope = scope;\n    if (hint && hint.captureContext) {\n      finalScope = Scope.clone(finalScope).update(hint.captureContext);\n    }\n\n    // We prepare the result here with a resolved Event.\n    let result = resolvedSyncPromise<Event | null>(prepared);\n\n    // This should be the last thing called, since we want that\n    // {@link Hub.addEventProcessor} gets the finished prepared event.\n    if (finalScope) {\n      // In case we have a hub we reassign it.\n      result = finalScope.applyToEvent(prepared, hint);\n    }\n\n    return result.then(evt => {\n      if (evt) {\n        // TODO this is more of the hack trying to solve https://github.com/getsentry/sentry-javascript/issues/2809\n        // it is only attached as extra data to the event if the event somehow skips being normalized\n        evt.sdkProcessingMetadata = {\n          ...evt.sdkProcessingMetadata,\n          normalizeDepth: `${normalize(normalizeDepth)} (${typeof normalizeDepth})`,\n        };\n      }\n      if (typeof normalizeDepth === 'number' && normalizeDepth > 0) {\n        return this._normalizeEvent(evt, normalizeDepth, normalizeMaxBreadth);\n      }\n      return evt;\n    });\n  }\n\n  /**\n   * Applies `normalize` function on necessary `Event` attributes to make them safe for serialization.\n   * Normalized keys:\n   * - `breadcrumbs.data`\n   * - `user`\n   * - `contexts`\n   * - `extra`\n   * @param event Event\n   * @returns Normalized event\n   */\n  protected _normalizeEvent(event: Event | null, depth: number, maxBreadth: number): Event | null {\n    if (!event) {\n      return null;\n    }\n\n    const normalized = {\n      ...event,\n      ...(event.breadcrumbs && {\n        breadcrumbs: event.breadcrumbs.map(b => ({\n          ...b,\n          ...(b.data && {\n            data: normalize(b.data, depth, maxBreadth),\n          }),\n        })),\n      }),\n      ...(event.user && {\n        user: normalize(event.user, depth, maxBreadth),\n      }),\n      ...(event.contexts && {\n        contexts: normalize(event.contexts, depth, maxBreadth),\n      }),\n      ...(event.extra && {\n        extra: normalize(event.extra, depth, maxBreadth),\n      }),\n    };\n    // event.contexts.trace stores information about a Transaction. Similarly,\n    // event.spans[] stores information about child Spans. Given that a\n    // Transaction is conceptually a Span, normalization should apply to both\n    // Transactions and Spans consistently.\n    // For now the decision is to skip normalization of Transactions and Spans,\n    // so this block overwrites the normalized event to add back the original\n    // Transaction information prior to normalization.\n    if (event.contexts && event.contexts.trace) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      normalized.contexts.trace = event.contexts.trace;\n    }\n\n    normalized.sdkProcessingMetadata = { ...normalized.sdkProcessingMetadata, baseClientNormalized: true };\n\n    return normalized;\n  }\n\n  /**\n   *  Enhances event using the client configuration.\n   *  It takes care of all \"static\" values like environment, release and `dist`,\n   *  as well as truncating overly long values.\n   * @param event event instance to be enhanced\n   */\n  protected _applyClientOptions(event: Event): void {\n    const options = this.getOptions();\n    const { environment, release, dist, maxValueLength = 250 } = options;\n\n    if (!('environment' in event)) {\n      event.environment = 'environment' in options ? environment : 'production';\n    }\n\n    if (event.release === undefined && release !== undefined) {\n      event.release = release;\n    }\n\n    if (event.dist === undefined && dist !== undefined) {\n      event.dist = dist;\n    }\n\n    if (event.message) {\n      event.message = truncate(event.message, maxValueLength);\n    }\n\n    const exception = event.exception && event.exception.values && event.exception.values[0];\n    if (exception && exception.value) {\n      exception.value = truncate(exception.value, maxValueLength);\n    }\n\n    const request = event.request;\n    if (request && request.url) {\n      request.url = truncate(request.url, maxValueLength);\n    }\n  }\n\n  /**\n   * This function adds all used integrations to the SDK info in the event.\n   * @param event The event that will be filled with all integrations.\n   */\n  protected _applyIntegrationsMetadata(event: Event): void {\n    const integrationsArray = Object.keys(this._integrations);\n    if (integrationsArray.length > 0) {\n      event.sdk = event.sdk || {};\n      event.sdk.integrations = [...(event.sdk.integrations || []), ...integrationsArray];\n    }\n  }\n\n  /**\n   * Tells the backend to send this event\n   * @param event The Sentry event to send\n   */\n  protected _sendEvent(event: Event): void {\n    this._getBackend().sendEvent(event);\n  }\n\n  /**\n   * Processes the event and logs an error in case of rejection\n   * @param event\n   * @param hint\n   * @param scope\n   */\n  protected _captureEvent(event: Event, hint?: EventHint, scope?: Scope): PromiseLike<string | undefined> {\n    return this._processEvent(event, hint, scope).then(\n      finalEvent => {\n        return finalEvent.event_id;\n      },\n      reason => {\n        IS_DEBUG_BUILD && logger.error(reason);\n        return undefined;\n      },\n    );\n  }\n\n  /**\n   * Processes an event (either error or message) and sends it to Sentry.\n   *\n   * This also adds breadcrumbs and context information to the event. However,\n   * platform specific meta data (such as the User's IP address) must be added\n   * by the SDK implementor.\n   *\n   *\n   * @param event The event to send to Sentry.\n   * @param hint May contain additional information about the original exception.\n   * @param scope A scope containing event metadata.\n   * @returns A SyncPromise that resolves with the event or rejects in case event was/will not be send.\n   */\n  protected _processEvent(event: Event, hint?: EventHint, scope?: Scope): PromiseLike<Event> {\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    const { beforeSend, sampleRate } = this.getOptions();\n    const transport = this.getTransport();\n\n    type RecordLostEvent = NonNullable<Transport['recordLostEvent']>;\n    type RecordLostEventParams = Parameters<RecordLostEvent>;\n\n    function recordLostEvent(outcome: RecordLostEventParams[0], category: RecordLostEventParams[1]): void {\n      if (transport.recordLostEvent) {\n        transport.recordLostEvent(outcome, category);\n      }\n    }\n\n    if (!this._isEnabled()) {\n      return rejectedSyncPromise(new SentryError('SDK not enabled, will not capture event.'));\n    }\n\n    const isTransaction = event.type === 'transaction';\n    // 1.0 === 100% events are sent\n    // 0.0 === 0% events are sent\n    // Sampling for transaction happens somewhere else\n    if (!isTransaction && typeof sampleRate === 'number' && Math.random() > sampleRate) {\n      recordLostEvent('sample_rate', 'event');\n      return rejectedSyncPromise(\n        new SentryError(\n          `Discarding event because it's not included in the random sample (sampling rate = ${sampleRate})`,\n        ),\n      );\n    }\n\n    return this._prepareEvent(event, scope, hint)\n      .then(prepared => {\n        if (prepared === null) {\n          recordLostEvent('event_processor', event.type || 'event');\n          throw new SentryError('An event processor returned null, will not send event.');\n        }\n\n        const isInternalException = hint && hint.data && (hint.data as { __sentry__: boolean }).__sentry__ === true;\n        if (isInternalException || isTransaction || !beforeSend) {\n          return prepared;\n        }\n\n        const beforeSendResult = beforeSend(prepared, hint);\n        return _ensureBeforeSendRv(beforeSendResult);\n      })\n      .then(processedEvent => {\n        if (processedEvent === null) {\n          recordLostEvent('before_send', event.type || 'event');\n          throw new SentryError('`beforeSend` returned `null`, will not send event.');\n        }\n\n        const session = scope && scope.getSession && scope.getSession();\n        if (!isTransaction && session) {\n          this._updateSessionFromEvent(session, processedEvent);\n        }\n\n        this._sendEvent(processedEvent);\n        return processedEvent;\n      })\n      .then(null, reason => {\n        if (reason instanceof SentryError) {\n          throw reason;\n        }\n\n        this.captureException(reason, {\n          data: {\n            __sentry__: true,\n          },\n          originalException: reason as Error,\n        });\n        throw new SentryError(\n          `Event processing pipeline threw an error, original event will not be sent. Details have been sent as a new event.\\nReason: ${reason}`,\n        );\n      });\n  }\n\n  /**\n   * Occupies the client with processing and event\n   */\n  protected _process<T>(promise: PromiseLike<T>): void {\n    this._numProcessing += 1;\n    void promise.then(\n      value => {\n        this._numProcessing -= 1;\n        return value;\n      },\n      reason => {\n        this._numProcessing -= 1;\n        return reason;\n      },\n    );\n  }\n}\n\n/**\n * Verifies that return value of configured `beforeSend` is of expected type.\n */\nfunction _ensureBeforeSendRv(rv: PromiseLike<Event | null> | Event | null): PromiseLike<Event | null> | Event | null {\n  const nullErr = '`beforeSend` method has to return `null` or a valid event.';\n  if (isThenable(rv)) {\n    return rv.then(\n      event => {\n        if (!(isPlainObject(event) || event === null)) {\n          throw new SentryError(nullErr);\n        }\n        return event;\n      },\n      e => {\n        throw new SentryError(`beforeSend rejected with ${e}`);\n      },\n    );\n  } else if (!(isPlainObject(rv) || rv === null)) {\n    throw new SentryError(nullErr);\n  }\n  return rv;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}