{"ast":null,"code":"import { __read } from \"tslib\";\nimport { eventToSentryRequest, getEnvelopeEndpointWithUrlEncodedAuth, getStoreEndpointWithUrlEncodedAuth, initAPIDetails, sessionToSentryRequest } from '@sentry/core';\nimport { createClientReportEnvelope, disabledUntil, dsnToString, eventStatusFromHttpCode, getGlobalObject, isRateLimited, logger, makePromiseBuffer, serializeEnvelope, updateRateLimits } from '@sentry/utils';\nimport { IS_DEBUG_BUILD } from '../flags';\nimport { sendReport } from './utils';\nfunction requestTypeToCategory(ty) {\n  var tyStr = ty;\n  return tyStr === 'event' ? 'error' : tyStr;\n}\nvar global = getGlobalObject();\n/** Base Transport class implementation */\nvar BaseTransport = /** @class */function () {\n  function BaseTransport(options) {\n    var _this = this;\n    this.options = options;\n    /** A simple buffer holding all requests. */\n    this._buffer = makePromiseBuffer(30);\n    /** Locks transport after receiving rate limits in a response */\n    this._rateLimits = {};\n    this._outcomes = {};\n    this._api = initAPIDetails(options.dsn, options._metadata, options.tunnel);\n    // eslint-disable-next-line deprecation/deprecation\n    this.url = getStoreEndpointWithUrlEncodedAuth(this._api.dsn);\n    if (this.options.sendClientReports && global.document) {\n      global.document.addEventListener('visibilitychange', function () {\n        if (global.document.visibilityState === 'hidden') {\n          _this._flushOutcomes();\n        }\n      });\n    }\n  }\n  /**\n   * @inheritDoc\n   */\n  BaseTransport.prototype.sendEvent = function (event) {\n    return this._sendRequest(eventToSentryRequest(event, this._api), event);\n  };\n  /**\n   * @inheritDoc\n   */\n  BaseTransport.prototype.sendSession = function (session) {\n    return this._sendRequest(sessionToSentryRequest(session, this._api), session);\n  };\n  /**\n   * @inheritDoc\n   */\n  BaseTransport.prototype.close = function (timeout) {\n    return this._buffer.drain(timeout);\n  };\n  /**\n   * @inheritDoc\n   */\n  BaseTransport.prototype.recordLostEvent = function (reason, category) {\n    var _a;\n    if (!this.options.sendClientReports) {\n      return;\n    }\n    // We want to track each category (event, transaction, session) separately\n    // but still keep the distinction between different type of outcomes.\n    // We could use nested maps, but it's much easier to read and type this way.\n    // A correct type for map-based implementation if we want to go that route\n    // would be `Partial<Record<SentryRequestType, Partial<Record<Outcome, number>>>>`\n    var key = requestTypeToCategory(category) + \":\" + reason;\n    IS_DEBUG_BUILD && logger.log(\"Adding outcome: \" + key);\n    this._outcomes[key] = (_a = this._outcomes[key], _a !== null && _a !== void 0 ? _a : 0) + 1;\n  };\n  /**\n   * Send outcomes as an envelope\n   */\n  BaseTransport.prototype._flushOutcomes = function () {\n    if (!this.options.sendClientReports) {\n      return;\n    }\n    var outcomes = this._outcomes;\n    this._outcomes = {};\n    // Nothing to send\n    if (!Object.keys(outcomes).length) {\n      IS_DEBUG_BUILD && logger.log('No outcomes to flush');\n      return;\n    }\n    IS_DEBUG_BUILD && logger.log(\"Flushing outcomes:\\n\" + JSON.stringify(outcomes, null, 2));\n    var url = getEnvelopeEndpointWithUrlEncodedAuth(this._api.dsn, this._api.tunnel);\n    var discardedEvents = Object.keys(outcomes).map(function (key) {\n      var _a = __read(key.split(':'), 2),\n        category = _a[0],\n        reason = _a[1];\n      return {\n        reason: reason,\n        category: category,\n        quantity: outcomes[key]\n      };\n      // TODO: Improve types on discarded_events to get rid of cast\n    });\n\n    var envelope = createClientReportEnvelope(discardedEvents, this._api.tunnel && dsnToString(this._api.dsn));\n    try {\n      sendReport(url, serializeEnvelope(envelope));\n    } catch (e) {\n      IS_DEBUG_BUILD && logger.error(e);\n    }\n  };\n  /**\n   * Handle Sentry repsonse for promise-based transports.\n   */\n  BaseTransport.prototype._handleResponse = function (_a) {\n    var requestType = _a.requestType,\n      response = _a.response,\n      headers = _a.headers,\n      resolve = _a.resolve,\n      reject = _a.reject;\n    var status = eventStatusFromHttpCode(response.status);\n    this._rateLimits = updateRateLimits(this._rateLimits, headers);\n    // eslint-disable-next-line deprecation/deprecation\n    if (this._isRateLimited(requestType)) {\n      IS_DEBUG_BUILD &&\n      // eslint-disable-next-line deprecation/deprecation\n      logger.warn(\"Too many \" + requestType + \" requests, backing off until: \" + this._disabledUntil(requestType));\n    }\n    if (status === 'success') {\n      resolve({\n        status: status\n      });\n      return;\n    }\n    reject(response);\n  };\n  /**\n   * Gets the time that given category is disabled until for rate limiting\n   *\n   * @deprecated Please use `disabledUntil` from @sentry/utils\n   */\n  BaseTransport.prototype._disabledUntil = function (requestType) {\n    var category = requestTypeToCategory(requestType);\n    return new Date(disabledUntil(this._rateLimits, category));\n  };\n  /**\n   * Checks if a category is rate limited\n   *\n   * @deprecated Please use `isRateLimited` from @sentry/utils\n   */\n  BaseTransport.prototype._isRateLimited = function (requestType) {\n    var category = requestTypeToCategory(requestType);\n    return isRateLimited(this._rateLimits, category);\n  };\n  return BaseTransport;\n}();\nexport { BaseTransport };","map":{"version":3,"sources":["../../../../src/transports/base.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  APIDetails,\n  eventToSentryRequest,\n  getEnvelopeEndpointWithUrlEncodedAuth,\n  getStoreEndpointWithUrlEncodedAuth,\n  initAPIDetails,\n  sessionToSentryRequest,\n} from '@sentry/core';\nimport {\n  ClientReport,\n  Event,\n  Outcome,\n  Response as SentryResponse,\n  SentryRequest,\n  SentryRequestType,\n  Session,\n  Transport,\n  TransportOptions,\n} from '@sentry/types';\nimport {\n  createClientReportEnvelope,\n  disabledUntil,\n  dsnToString,\n  eventStatusFromHttpCode,\n  getGlobalObject,\n  isRateLimited,\n  logger,\n  makePromiseBuffer,\n  PromiseBuffer,\n  RateLimits,\n  serializeEnvelope,\n  updateRateLimits,\n} from '@sentry/utils';\n\nimport { IS_DEBUG_BUILD } from '../flags';\nimport { sendReport } from './utils';\n\nfunction requestTypeToCategory(ty: SentryRequestType): string {\n  const tyStr = ty as string;\n  return tyStr === 'event' ? 'error' : tyStr;\n}\n\nconst global = getGlobalObject<Window>();\n\n/** Base Transport class implementation */\nexport abstract class BaseTransport implements Transport {\n  /**\n   * @deprecated\n   */\n  public url: string;\n\n  /** Helper to get Sentry API endpoints. */\n  protected readonly _api: APIDetails;\n\n  /** A simple buffer holding all requests. */\n  protected readonly _buffer: PromiseBuffer<SentryResponse> = makePromiseBuffer(30);\n\n  /** Locks transport after receiving rate limits in a response */\n  protected _rateLimits: RateLimits = {};\n\n  protected _outcomes: { [key: string]: number } = {};\n\n  public constructor(public options: TransportOptions) {\n    this._api = initAPIDetails(options.dsn, options._metadata, options.tunnel);\n    // eslint-disable-next-line deprecation/deprecation\n    this.url = getStoreEndpointWithUrlEncodedAuth(this._api.dsn);\n\n    if (this.options.sendClientReports && global.document) {\n      global.document.addEventListener('visibilitychange', () => {\n        if (global.document.visibilityState === 'hidden') {\n          this._flushOutcomes();\n        }\n      });\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public sendEvent(event: Event): PromiseLike<SentryResponse> {\n    return this._sendRequest(eventToSentryRequest(event, this._api), event);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public sendSession(session: Session): PromiseLike<SentryResponse> {\n    return this._sendRequest(sessionToSentryRequest(session, this._api), session);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public close(timeout?: number): PromiseLike<boolean> {\n    return this._buffer.drain(timeout);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public recordLostEvent(reason: Outcome, category: SentryRequestType): void {\n    if (!this.options.sendClientReports) {\n      return;\n    }\n    // We want to track each category (event, transaction, session) separately\n    // but still keep the distinction between different type of outcomes.\n    // We could use nested maps, but it's much easier to read and type this way.\n    // A correct type for map-based implementation if we want to go that route\n    // would be `Partial<Record<SentryRequestType, Partial<Record<Outcome, number>>>>`\n    const key = `${requestTypeToCategory(category)}:${reason}`;\n    IS_DEBUG_BUILD && logger.log(`Adding outcome: ${key}`);\n    this._outcomes[key] = (this._outcomes[key] ?? 0) + 1;\n  }\n\n  /**\n   * Send outcomes as an envelope\n   */\n  protected _flushOutcomes(): void {\n    if (!this.options.sendClientReports) {\n      return;\n    }\n\n    const outcomes = this._outcomes;\n    this._outcomes = {};\n\n    // Nothing to send\n    if (!Object.keys(outcomes).length) {\n      IS_DEBUG_BUILD && logger.log('No outcomes to flush');\n      return;\n    }\n\n    IS_DEBUG_BUILD && logger.log(`Flushing outcomes:\\n${JSON.stringify(outcomes, null, 2)}`);\n\n    const url = getEnvelopeEndpointWithUrlEncodedAuth(this._api.dsn, this._api.tunnel);\n\n    const discardedEvents = Object.keys(outcomes).map(key => {\n      const [category, reason] = key.split(':');\n      return {\n        reason,\n        category,\n        quantity: outcomes[key],\n      };\n      // TODO: Improve types on discarded_events to get rid of cast\n    }) as ClientReport['discarded_events'];\n    const envelope = createClientReportEnvelope(discardedEvents, this._api.tunnel && dsnToString(this._api.dsn));\n\n    try {\n      sendReport(url, serializeEnvelope(envelope));\n    } catch (e) {\n      IS_DEBUG_BUILD && logger.error(e);\n    }\n  }\n\n  /**\n   * Handle Sentry repsonse for promise-based transports.\n   */\n  protected _handleResponse({\n    requestType,\n    response,\n    headers,\n    resolve,\n    reject,\n  }: {\n    requestType: SentryRequestType;\n    response: Response | XMLHttpRequest;\n    headers: Record<string, string | null>;\n    resolve: (value?: SentryResponse | PromiseLike<SentryResponse> | null | undefined) => void;\n    reject: (reason?: unknown) => void;\n  }): void {\n    const status = eventStatusFromHttpCode(response.status);\n\n    this._rateLimits = updateRateLimits(this._rateLimits, headers);\n    // eslint-disable-next-line deprecation/deprecation\n    if (this._isRateLimited(requestType)) {\n      IS_DEBUG_BUILD &&\n        // eslint-disable-next-line deprecation/deprecation\n        logger.warn(`Too many ${requestType} requests, backing off until: ${this._disabledUntil(requestType)}`);\n    }\n\n    if (status === 'success') {\n      resolve({ status });\n      return;\n    }\n\n    reject(response);\n  }\n\n  /**\n   * Gets the time that given category is disabled until for rate limiting\n   *\n   * @deprecated Please use `disabledUntil` from @sentry/utils\n   */\n  protected _disabledUntil(requestType: SentryRequestType): Date {\n    const category = requestTypeToCategory(requestType);\n    return new Date(disabledUntil(this._rateLimits, category));\n  }\n\n  /**\n   * Checks if a category is rate limited\n   *\n   * @deprecated Please use `isRateLimited` from @sentry/utils\n   */\n  protected _isRateLimited(requestType: SentryRequestType): boolean {\n    const category = requestTypeToCategory(requestType);\n    return isRateLimited(this._rateLimits, category);\n  }\n\n  protected abstract _sendRequest(\n    sentryRequest: SentryRequest,\n    originalPayload: Event | Session,\n  ): PromiseLike<SentryResponse>;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}