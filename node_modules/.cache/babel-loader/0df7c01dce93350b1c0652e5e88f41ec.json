{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Safe = void 0;\nconst ethers_1 = require(\"ethers\");\nconst signatures_1 = require(\"./signatures\");\nconst methods_1 = require(\"../communication/methods\");\nconst constants_1 = require(\"../eth/constants\");\nclass Safe {\n  constructor(communicator) {\n    this.communicator = communicator;\n  }\n  async getChainInfo() {\n    const response = await this.communicator.send(methods_1.Methods.getChainInfo, undefined);\n    return response.data;\n  }\n  async getInfo() {\n    const response = await this.communicator.send(methods_1.Methods.getSafeInfo, undefined);\n    return response.data;\n  }\n  // There is a possibility that this method will change because we may add pagination to the endpoint\n  async experimental_getBalances({\n    currency = 'usd'\n  } = {}) {\n    const response = await this.communicator.send(methods_1.Methods.getSafeBalances, {\n      currency\n    });\n    return response.data;\n  }\n  async check1271Signature(messageHash, signature = '0x') {\n    const safeInfo = await this.getInfo();\n    const encodedIsValidSignatureCall = signatures_1.EIP_1271_INTERFACE.encodeFunctionData('isValidSignature', [messageHash, signature]);\n    const payload = {\n      call: constants_1.RPC_CALLS.eth_call,\n      params: [{\n        to: safeInfo.safeAddress,\n        data: encodedIsValidSignatureCall\n      }, 'latest']\n    };\n    try {\n      const response = await this.communicator.send(methods_1.Methods.rpcCall, payload);\n      return response.data.slice(0, 10).toLowerCase() === signatures_1.MAGIC_VALUE;\n    } catch (err) {\n      return false;\n    }\n  }\n  async check1271SignatureBytes(messageHash, signature = '0x') {\n    const safeInfo = await this.getInfo();\n    const msgBytes = ethers_1.ethers.utils.arrayify(messageHash);\n    const encodedIsValidSignatureCall = signatures_1.EIP_1271_BYTES_INTERFACE.encodeFunctionData('isValidSignature', [msgBytes, signature]);\n    const payload = {\n      call: constants_1.RPC_CALLS.eth_call,\n      params: [{\n        to: safeInfo.safeAddress,\n        data: encodedIsValidSignatureCall\n      }, 'latest']\n    };\n    try {\n      const response = await this.communicator.send(methods_1.Methods.rpcCall, payload);\n      return response.data.slice(0, 10).toLowerCase() === signatures_1.MAGIC_VALUE_BYTES;\n    } catch (err) {\n      return false;\n    }\n  }\n  calculateMessageHash(message) {\n    return ethers_1.ethers.utils.hashMessage(message);\n  }\n  async isMessageSigned(message, signature = '0x') {\n    const messageHash = this.calculateMessageHash(message);\n    const messageHashSigned = await this.isMessageHashSigned(messageHash, signature);\n    return messageHashSigned;\n  }\n  async isMessageHashSigned(messageHash, signature = '0x') {\n    const checks = [this.check1271Signature.bind(this), this.check1271SignatureBytes.bind(this)];\n    for (const check of checks) {\n      const isValid = await check(messageHash, signature);\n      if (isValid) {\n        return true;\n      }\n    }\n    return false;\n  }\n  async getEnvironmentInfo() {\n    const response = await this.communicator.send(methods_1.Methods.getEnvironmentInfo, undefined);\n    return response.data;\n  }\n}\nexports.Safe = Safe;","map":{"version":3,"sources":["../../../src/safe/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Safe = void 0;\nconst ethers_1 = require(\"ethers\");\nconst signatures_1 = require(\"./signatures\");\nconst methods_1 = require(\"../communication/methods\");\nconst constants_1 = require(\"../eth/constants\");\nclass Safe {\n    constructor(communicator) {\n        this.communicator = communicator;\n    }\n    async getChainInfo() {\n        const response = await this.communicator.send(methods_1.Methods.getChainInfo, undefined);\n        return response.data;\n    }\n    async getInfo() {\n        const response = await this.communicator.send(methods_1.Methods.getSafeInfo, undefined);\n        return response.data;\n    }\n    // There is a possibility that this method will change because we may add pagination to the endpoint\n    async experimental_getBalances({ currency = 'usd' } = {}) {\n        const response = await this.communicator.send(methods_1.Methods.getSafeBalances, {\n            currency,\n        });\n        return response.data;\n    }\n    async check1271Signature(messageHash, signature = '0x') {\n        const safeInfo = await this.getInfo();\n        const encodedIsValidSignatureCall = signatures_1.EIP_1271_INTERFACE.encodeFunctionData('isValidSignature', [\n            messageHash,\n            signature,\n        ]);\n        const payload = {\n            call: constants_1.RPC_CALLS.eth_call,\n            params: [\n                {\n                    to: safeInfo.safeAddress,\n                    data: encodedIsValidSignatureCall,\n                },\n                'latest',\n            ],\n        };\n        try {\n            const response = await this.communicator.send(methods_1.Methods.rpcCall, payload);\n            return response.data.slice(0, 10).toLowerCase() === signatures_1.MAGIC_VALUE;\n        }\n        catch (err) {\n            return false;\n        }\n    }\n    async check1271SignatureBytes(messageHash, signature = '0x') {\n        const safeInfo = await this.getInfo();\n        const msgBytes = ethers_1.ethers.utils.arrayify(messageHash);\n        const encodedIsValidSignatureCall = signatures_1.EIP_1271_BYTES_INTERFACE.encodeFunctionData('isValidSignature', [\n            msgBytes,\n            signature,\n        ]);\n        const payload = {\n            call: constants_1.RPC_CALLS.eth_call,\n            params: [\n                {\n                    to: safeInfo.safeAddress,\n                    data: encodedIsValidSignatureCall,\n                },\n                'latest',\n            ],\n        };\n        try {\n            const response = await this.communicator.send(methods_1.Methods.rpcCall, payload);\n            return response.data.slice(0, 10).toLowerCase() === signatures_1.MAGIC_VALUE_BYTES;\n        }\n        catch (err) {\n            return false;\n        }\n    }\n    calculateMessageHash(message) {\n        return ethers_1.ethers.utils.hashMessage(message);\n    }\n    async isMessageSigned(message, signature = '0x') {\n        const messageHash = this.calculateMessageHash(message);\n        const messageHashSigned = await this.isMessageHashSigned(messageHash, signature);\n        return messageHashSigned;\n    }\n    async isMessageHashSigned(messageHash, signature = '0x') {\n        const checks = [this.check1271Signature.bind(this), this.check1271SignatureBytes.bind(this)];\n        for (const check of checks) {\n            const isValid = await check(messageHash, signature);\n            if (isValid) {\n                return true;\n            }\n        }\n        return false;\n    }\n    async getEnvironmentInfo() {\n        const response = await this.communicator.send(methods_1.Methods.getEnvironmentInfo, undefined);\n        return response.data;\n    }\n}\nexports.Safe = Safe;\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}