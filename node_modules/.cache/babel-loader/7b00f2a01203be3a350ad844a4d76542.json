{"ast":null,"code":"import { __assign, __read, __spread } from \"tslib\";\nimport { createEnvelope, dsnToString, normalize, serializeEnvelope } from '@sentry/utils';\nimport { getEnvelopeEndpointWithUrlEncodedAuth, getStoreEndpointWithUrlEncodedAuth } from './api';\n/** Extract sdk info from from the API metadata */\nfunction getSdkMetadataForEnvelopeHeader(api) {\n  if (!api.metadata || !api.metadata.sdk) {\n    return;\n  }\n  var _a = api.metadata.sdk,\n    name = _a.name,\n    version = _a.version;\n  return {\n    name: name,\n    version: version\n  };\n}\n/**\n * Apply SdkInfo (name, version, packages, integrations) to the corresponding event key.\n * Merge with existing data if any.\n **/\nfunction enhanceEventWithSdkInfo(event, sdkInfo) {\n  if (!sdkInfo) {\n    return event;\n  }\n  event.sdk = event.sdk || {};\n  event.sdk.name = event.sdk.name || sdkInfo.name;\n  event.sdk.version = event.sdk.version || sdkInfo.version;\n  event.sdk.integrations = __spread(event.sdk.integrations || [], sdkInfo.integrations || []);\n  event.sdk.packages = __spread(event.sdk.packages || [], sdkInfo.packages || []);\n  return event;\n}\n/** Creates an envelope from a Session */\nexport function createSessionEnvelope(session, api) {\n  var sdkInfo = getSdkMetadataForEnvelopeHeader(api);\n  var envelopeHeaders = __assign(__assign({\n    sent_at: new Date().toISOString()\n  }, sdkInfo && {\n    sdk: sdkInfo\n  }), !!api.tunnel && {\n    dsn: dsnToString(api.dsn)\n  });\n  // I know this is hacky but we don't want to add `sessions` to request type since it's never rate limited\n  var type = 'aggregates' in session ? 'sessions' : 'session';\n  // TODO (v7) Have to cast type because envelope items do not accept a `SentryRequestType`\n  var envelopeItem = [{\n    type: type\n  }, session];\n  var envelope = createEnvelope(envelopeHeaders, [envelopeItem]);\n  return [envelope, type];\n}\n/** Creates a SentryRequest from a Session. */\nexport function sessionToSentryRequest(session, api) {\n  var _a = __read(createSessionEnvelope(session, api), 2),\n    envelope = _a[0],\n    type = _a[1];\n  return {\n    body: serializeEnvelope(envelope),\n    type: type,\n    url: getEnvelopeEndpointWithUrlEncodedAuth(api.dsn, api.tunnel)\n  };\n}\n/**\n * Create an Envelope from an event. Note that this is duplicated from below,\n * but on purpose as this will be refactored in v7.\n */\nexport function createEventEnvelope(event, api) {\n  var sdkInfo = getSdkMetadataForEnvelopeHeader(api);\n  var eventType = event.type || 'event';\n  var transactionSampling = (event.sdkProcessingMetadata || {}).transactionSampling;\n  var _a = transactionSampling || {},\n    samplingMethod = _a.method,\n    sampleRate = _a.rate;\n  // TODO: Below is a temporary hack in order to debug a serialization error - see\n  // https://github.com/getsentry/sentry-javascript/issues/2809,\n  // https://github.com/getsentry/sentry-javascript/pull/4425, and\n  // https://github.com/getsentry/sentry-javascript/pull/4574.\n  //\n  // TL; DR: even though we normalize all events (which should prevent this), something is causing `JSON.stringify` to\n  // throw a circular reference error.\n  //\n  // When it's time to remove it:\n  // 1. Delete everything between here and where the request object `req` is created, EXCEPT the line deleting\n  //    `sdkProcessingMetadata`\n  // 2. Restore the original version of the request body, which is commented out\n  // 3. Search for either of the PR URLs above and pull out the companion hacks in the browser playwright tests and the\n  //    baseClient tests in this package\n  enhanceEventWithSdkInfo(event, api.metadata.sdk);\n  event.tags = event.tags || {};\n  event.extra = event.extra || {};\n  // In theory, all events should be marked as having gone through normalization and so\n  // we should never set this tag/extra data\n  if (!(event.sdkProcessingMetadata && event.sdkProcessingMetadata.baseClientNormalized)) {\n    event.tags.skippedNormalization = true;\n    event.extra.normalizeDepth = event.sdkProcessingMetadata ? event.sdkProcessingMetadata.normalizeDepth : 'unset';\n  }\n  // prevent this data from being sent to sentry\n  // TODO: This is NOT part of the hack - DO NOT DELETE\n  delete event.sdkProcessingMetadata;\n  var envelopeHeaders = __assign(__assign({\n    event_id: event.event_id,\n    sent_at: new Date().toISOString()\n  }, sdkInfo && {\n    sdk: sdkInfo\n  }), !!api.tunnel && {\n    dsn: dsnToString(api.dsn)\n  });\n  var eventItem = [{\n    type: eventType,\n    sample_rates: [{\n      id: samplingMethod,\n      rate: sampleRate\n    }]\n  }, event];\n  return createEnvelope(envelopeHeaders, [eventItem]);\n}\n/** Creates a SentryRequest from an event. */\nexport function eventToSentryRequest(event, api) {\n  var sdkInfo = getSdkMetadataForEnvelopeHeader(api);\n  var eventType = event.type || 'event';\n  var useEnvelope = eventType === 'transaction' || !!api.tunnel;\n  var transactionSampling = (event.sdkProcessingMetadata || {}).transactionSampling;\n  var _a = transactionSampling || {},\n    samplingMethod = _a.method,\n    sampleRate = _a.rate;\n  // TODO: Below is a temporary hack in order to debug a serialization error - see\n  // https://github.com/getsentry/sentry-javascript/issues/2809,\n  // https://github.com/getsentry/sentry-javascript/pull/4425, and\n  // https://github.com/getsentry/sentry-javascript/pull/4574.\n  //\n  // TL; DR: even though we normalize all events (which should prevent this), something is causing `JSON.stringify` to\n  // throw a circular reference error.\n  //\n  // When it's time to remove it:\n  // 1. Delete everything between here and where the request object `req` is created, EXCEPT the line deleting\n  //    `sdkProcessingMetadata`\n  // 2. Restore the original version of the request body, which is commented out\n  // 3. Search for either of the PR URLs above and pull out the companion hacks in the browser playwright tests and the\n  //    baseClient tests in this package\n  enhanceEventWithSdkInfo(event, api.metadata.sdk);\n  event.tags = event.tags || {};\n  event.extra = event.extra || {};\n  // In theory, all events should be marked as having gone through normalization and so\n  // we should never set this tag/extra data\n  if (!(event.sdkProcessingMetadata && event.sdkProcessingMetadata.baseClientNormalized)) {\n    event.tags.skippedNormalization = true;\n    event.extra.normalizeDepth = event.sdkProcessingMetadata ? event.sdkProcessingMetadata.normalizeDepth : 'unset';\n  }\n  // prevent this data from being sent to sentry\n  // TODO: This is NOT part of the hack - DO NOT DELETE\n  delete event.sdkProcessingMetadata;\n  var body;\n  try {\n    // 99.9% of events should get through just fine - no change in behavior for them\n    body = JSON.stringify(event);\n  } catch (err) {\n    // Record data about the error without replacing original event data, then force renormalization\n    event.tags.JSONStringifyError = true;\n    event.extra.JSONStringifyError = err;\n    try {\n      body = JSON.stringify(normalize(event));\n    } catch (newErr) {\n      // At this point even renormalization hasn't worked, meaning something about the event data has gone very wrong.\n      // Time to cut our losses and record only the new error. With luck, even in the problematic cases we're trying to\n      // debug with this hack, we won't ever land here.\n      var innerErr = newErr;\n      body = JSON.stringify({\n        message: 'JSON.stringify error after renormalization',\n        // setting `extra: { innerErr }` here for some reason results in an empty object, so unpack manually\n        extra: {\n          message: innerErr.message,\n          stack: innerErr.stack\n        }\n      });\n    }\n  }\n  var req = {\n    // this is the relevant line of code before the hack was added, to make it easy to undo said hack once we've solved\n    // the mystery\n    // body: JSON.stringify(sdkInfo ? enhanceEventWithSdkInfo(event, api.metadata.sdk) : event),\n    body: body,\n    type: eventType,\n    url: useEnvelope ? getEnvelopeEndpointWithUrlEncodedAuth(api.dsn, api.tunnel) : getStoreEndpointWithUrlEncodedAuth(api.dsn)\n  };\n  // https://develop.sentry.dev/sdk/envelopes/\n  // Since we don't need to manipulate envelopes nor store them, there is no\n  // exported concept of an Envelope with operations including serialization and\n  // deserialization. Instead, we only implement a minimal subset of the spec to\n  // serialize events inline here.\n  if (useEnvelope) {\n    var envelopeHeaders = __assign(__assign({\n      event_id: event.event_id,\n      sent_at: new Date().toISOString()\n    }, sdkInfo && {\n      sdk: sdkInfo\n    }), !!api.tunnel && {\n      dsn: dsnToString(api.dsn)\n    });\n    var eventItem = [{\n      type: eventType,\n      sample_rates: [{\n        id: samplingMethod,\n        rate: sampleRate\n      }]\n    }, req.body];\n    var envelope = createEnvelope(envelopeHeaders, [eventItem]);\n    req.body = serializeEnvelope(envelope);\n  }\n  return req;\n}","map":{"version":3,"sources":["../../src/request.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Event,\n  EventEnvelope,\n  EventItem,\n  SdkInfo,\n  SentryRequest,\n  SentryRequestType,\n  Session,\n  SessionAggregates,\n  SessionEnvelope,\n  SessionItem,\n} from '@sentry/types';\nimport { createEnvelope, dsnToString, normalize, serializeEnvelope } from '@sentry/utils';\n\nimport { APIDetails, getEnvelopeEndpointWithUrlEncodedAuth, getStoreEndpointWithUrlEncodedAuth } from './api';\n\n/** Extract sdk info from from the API metadata */\nfunction getSdkMetadataForEnvelopeHeader(api: APIDetails): SdkInfo | undefined {\n  if (!api.metadata || !api.metadata.sdk) {\n    return;\n  }\n  const { name, version } = api.metadata.sdk;\n  return { name, version };\n}\n\n/**\n * Apply SdkInfo (name, version, packages, integrations) to the corresponding event key.\n * Merge with existing data if any.\n **/\nfunction enhanceEventWithSdkInfo(event: Event, sdkInfo?: SdkInfo): Event {\n  if (!sdkInfo) {\n    return event;\n  }\n  event.sdk = event.sdk || {};\n  event.sdk.name = event.sdk.name || sdkInfo.name;\n  event.sdk.version = event.sdk.version || sdkInfo.version;\n  event.sdk.integrations = [...(event.sdk.integrations || []), ...(sdkInfo.integrations || [])];\n  event.sdk.packages = [...(event.sdk.packages || []), ...(sdkInfo.packages || [])];\n  return event;\n}\n\n/** Creates an envelope from a Session */\nexport function createSessionEnvelope(\n  session: Session | SessionAggregates,\n  api: APIDetails,\n): [SessionEnvelope, SentryRequestType] {\n  const sdkInfo = getSdkMetadataForEnvelopeHeader(api);\n  const envelopeHeaders = {\n    sent_at: new Date().toISOString(),\n    ...(sdkInfo && { sdk: sdkInfo }),\n    ...(!!api.tunnel && { dsn: dsnToString(api.dsn) }),\n  };\n\n  // I know this is hacky but we don't want to add `sessions` to request type since it's never rate limited\n  const type = 'aggregates' in session ? ('sessions' as SentryRequestType) : 'session';\n\n  // TODO (v7) Have to cast type because envelope items do not accept a `SentryRequestType`\n  const envelopeItem = [{ type } as { type: 'session' | 'sessions' }, session] as SessionItem;\n  const envelope = createEnvelope<SessionEnvelope>(envelopeHeaders, [envelopeItem]);\n\n  return [envelope, type];\n}\n\n/** Creates a SentryRequest from a Session. */\nexport function sessionToSentryRequest(session: Session | SessionAggregates, api: APIDetails): SentryRequest {\n  const [envelope, type] = createSessionEnvelope(session, api);\n  return {\n    body: serializeEnvelope(envelope),\n    type,\n    url: getEnvelopeEndpointWithUrlEncodedAuth(api.dsn, api.tunnel),\n  };\n}\n\n/**\n * Create an Envelope from an event. Note that this is duplicated from below,\n * but on purpose as this will be refactored in v7.\n */\nexport function createEventEnvelope(event: Event, api: APIDetails): EventEnvelope {\n  const sdkInfo = getSdkMetadataForEnvelopeHeader(api);\n  const eventType = event.type || 'event';\n\n  const { transactionSampling } = event.sdkProcessingMetadata || {};\n  const { method: samplingMethod, rate: sampleRate } = transactionSampling || {};\n\n  // TODO: Below is a temporary hack in order to debug a serialization error - see\n  // https://github.com/getsentry/sentry-javascript/issues/2809,\n  // https://github.com/getsentry/sentry-javascript/pull/4425, and\n  // https://github.com/getsentry/sentry-javascript/pull/4574.\n  //\n  // TL; DR: even though we normalize all events (which should prevent this), something is causing `JSON.stringify` to\n  // throw a circular reference error.\n  //\n  // When it's time to remove it:\n  // 1. Delete everything between here and where the request object `req` is created, EXCEPT the line deleting\n  //    `sdkProcessingMetadata`\n  // 2. Restore the original version of the request body, which is commented out\n  // 3. Search for either of the PR URLs above and pull out the companion hacks in the browser playwright tests and the\n  //    baseClient tests in this package\n  enhanceEventWithSdkInfo(event, api.metadata.sdk);\n  event.tags = event.tags || {};\n  event.extra = event.extra || {};\n\n  // In theory, all events should be marked as having gone through normalization and so\n  // we should never set this tag/extra data\n  if (!(event.sdkProcessingMetadata && event.sdkProcessingMetadata.baseClientNormalized)) {\n    event.tags.skippedNormalization = true;\n    event.extra.normalizeDepth = event.sdkProcessingMetadata ? event.sdkProcessingMetadata.normalizeDepth : 'unset';\n  }\n\n  // prevent this data from being sent to sentry\n  // TODO: This is NOT part of the hack - DO NOT DELETE\n  delete event.sdkProcessingMetadata;\n\n  const envelopeHeaders = {\n    event_id: event.event_id as string,\n    sent_at: new Date().toISOString(),\n    ...(sdkInfo && { sdk: sdkInfo }),\n    ...(!!api.tunnel && { dsn: dsnToString(api.dsn) }),\n  };\n  const eventItem: EventItem = [\n    {\n      type: eventType,\n      sample_rates: [{ id: samplingMethod, rate: sampleRate }],\n    },\n    event,\n  ];\n  return createEnvelope<EventEnvelope>(envelopeHeaders, [eventItem]);\n}\n\n/** Creates a SentryRequest from an event. */\nexport function eventToSentryRequest(event: Event, api: APIDetails): SentryRequest {\n  const sdkInfo = getSdkMetadataForEnvelopeHeader(api);\n  const eventType = event.type || 'event';\n  const useEnvelope = eventType === 'transaction' || !!api.tunnel;\n\n  const { transactionSampling } = event.sdkProcessingMetadata || {};\n  const { method: samplingMethod, rate: sampleRate } = transactionSampling || {};\n\n  // TODO: Below is a temporary hack in order to debug a serialization error - see\n  // https://github.com/getsentry/sentry-javascript/issues/2809,\n  // https://github.com/getsentry/sentry-javascript/pull/4425, and\n  // https://github.com/getsentry/sentry-javascript/pull/4574.\n  //\n  // TL; DR: even though we normalize all events (which should prevent this), something is causing `JSON.stringify` to\n  // throw a circular reference error.\n  //\n  // When it's time to remove it:\n  // 1. Delete everything between here and where the request object `req` is created, EXCEPT the line deleting\n  //    `sdkProcessingMetadata`\n  // 2. Restore the original version of the request body, which is commented out\n  // 3. Search for either of the PR URLs above and pull out the companion hacks in the browser playwright tests and the\n  //    baseClient tests in this package\n  enhanceEventWithSdkInfo(event, api.metadata.sdk);\n  event.tags = event.tags || {};\n  event.extra = event.extra || {};\n\n  // In theory, all events should be marked as having gone through normalization and so\n  // we should never set this tag/extra data\n  if (!(event.sdkProcessingMetadata && event.sdkProcessingMetadata.baseClientNormalized)) {\n    event.tags.skippedNormalization = true;\n    event.extra.normalizeDepth = event.sdkProcessingMetadata ? event.sdkProcessingMetadata.normalizeDepth : 'unset';\n  }\n\n  // prevent this data from being sent to sentry\n  // TODO: This is NOT part of the hack - DO NOT DELETE\n  delete event.sdkProcessingMetadata;\n\n  let body;\n  try {\n    // 99.9% of events should get through just fine - no change in behavior for them\n    body = JSON.stringify(event);\n  } catch (err) {\n    // Record data about the error without replacing original event data, then force renormalization\n    event.tags.JSONStringifyError = true;\n    event.extra.JSONStringifyError = err;\n    try {\n      body = JSON.stringify(normalize(event));\n    } catch (newErr) {\n      // At this point even renormalization hasn't worked, meaning something about the event data has gone very wrong.\n      // Time to cut our losses and record only the new error. With luck, even in the problematic cases we're trying to\n      // debug with this hack, we won't ever land here.\n      const innerErr = newErr as Error;\n      body = JSON.stringify({\n        message: 'JSON.stringify error after renormalization',\n        // setting `extra: { innerErr }` here for some reason results in an empty object, so unpack manually\n        extra: { message: innerErr.message, stack: innerErr.stack },\n      });\n    }\n  }\n\n  const req: SentryRequest = {\n    // this is the relevant line of code before the hack was added, to make it easy to undo said hack once we've solved\n    // the mystery\n    // body: JSON.stringify(sdkInfo ? enhanceEventWithSdkInfo(event, api.metadata.sdk) : event),\n    body,\n    type: eventType,\n    url: useEnvelope\n      ? getEnvelopeEndpointWithUrlEncodedAuth(api.dsn, api.tunnel)\n      : getStoreEndpointWithUrlEncodedAuth(api.dsn),\n  };\n\n  // https://develop.sentry.dev/sdk/envelopes/\n\n  // Since we don't need to manipulate envelopes nor store them, there is no\n  // exported concept of an Envelope with operations including serialization and\n  // deserialization. Instead, we only implement a minimal subset of the spec to\n  // serialize events inline here.\n  if (useEnvelope) {\n    const envelopeHeaders = {\n      event_id: event.event_id as string,\n      sent_at: new Date().toISOString(),\n      ...(sdkInfo && { sdk: sdkInfo }),\n      ...(!!api.tunnel && { dsn: dsnToString(api.dsn) }),\n    };\n    const eventItem: EventItem = [\n      {\n        type: eventType,\n        sample_rates: [{ id: samplingMethod, rate: sampleRate }],\n      },\n      req.body,\n    ];\n    const envelope = createEnvelope<EventEnvelope>(envelopeHeaders, [eventItem]);\n    req.body = serializeEnvelope(envelope);\n  }\n\n  return req;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}