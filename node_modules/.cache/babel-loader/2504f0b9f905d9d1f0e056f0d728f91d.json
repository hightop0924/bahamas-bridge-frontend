{"ast":null,"code":"/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { getGlobalObject } from '@sentry/utils';\nimport { onHidden } from './onHidden';\nvar firstHiddenTime = -1;\nvar initHiddenTime = function () {\n  return getGlobalObject().document.visibilityState === 'hidden' ? 0 : Infinity;\n};\nvar trackChanges = function () {\n  // Update the time if/when the document becomes hidden.\n  onHidden(function (_a) {\n    var timeStamp = _a.timeStamp;\n    firstHiddenTime = timeStamp;\n  }, true);\n};\nexport var getVisibilityWatcher = function () {\n  if (firstHiddenTime < 0) {\n    // If the document is hidden when this code runs, assume it was hidden\n    // since navigation start. This isn't a perfect heuristic, but it's the\n    // best we can do until an API is available to support querying past\n    // visibilityState.\n    firstHiddenTime = initHiddenTime();\n    trackChanges();\n  }\n  return {\n    get firstHiddenTime() {\n      return firstHiddenTime;\n    }\n  };\n};","map":{"version":3,"sources":["../../../../../../src/browser/web-vitals/lib/getVisibilityWatcher.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;AAcG;AAEH,SAAS,eAAe,QAAQ,eAAe;AAE/C,SAAS,QAAQ,QAAQ,YAAY;AAErC,IAAI,eAAe,GAAG,CAAC,CAAC;AAExB,IAAM,cAAc,GAAG,SAAA,CAAA,EAAA;EACrB,OAAO,eAAe,CAAA,CAAU,CAAC,QAAQ,CAAC,eAAe,KAAK,QAAQ,GAAG,CAAC,GAAG,QAAQ;AACvF,CAAC;AAED,IAAM,YAAY,GAAG,SAAA,CAAA,EAAA;EACnB;EACA,QAAQ,CAAC,UAAC,EAAa,EAAA;QAAX,SAAA,GAAA,EAAA,CAAA,SAAS;IACnB,eAAe,GAAG,SAAS;EAC7B,CAAC,EAAE,IAAI,CAAC;AACV,CAAC;AAED,OAAO,IAAM,oBAAoB,GAAG,SAAA,CAAA,EAAA;EAGlC,IAAI,eAAe,GAAG,CAAC,EAAE;IACvB;IACA;IACA;IACA;IACA,eAAe,GAAG,cAAc,CAAA,CAAE;IAClC,YAAY,CAAA,CAAE;EACf;EACD,OAAO;IACL,IAAI,eAAe,CAAA,EAAA;MACjB,OAAO,eAAe;IACxB;GACD;AACH,CAAC","sourcesContent":["/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getGlobalObject } from '@sentry/utils';\n\nimport { onHidden } from './onHidden';\n\nlet firstHiddenTime = -1;\n\nconst initHiddenTime = (): number => {\n  return getGlobalObject<Window>().document.visibilityState === 'hidden' ? 0 : Infinity;\n};\n\nconst trackChanges = (): void => {\n  // Update the time if/when the document becomes hidden.\n  onHidden(({ timeStamp }) => {\n    firstHiddenTime = timeStamp;\n  }, true);\n};\n\nexport const getVisibilityWatcher = (): {\n  readonly firstHiddenTime: number;\n} => {\n  if (firstHiddenTime < 0) {\n    // If the document is hidden when this code runs, assume it was hidden\n    // since navigation start. This isn't a perfect heuristic, but it's the\n    // best we can do until an API is available to support querying past\n    // visibilityState.\n    firstHiddenTime = initHiddenTime();\n    trackChanges();\n  }\n  return {\n    get firstHiddenTime() {\n      return firstHiddenTime;\n    },\n  };\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}