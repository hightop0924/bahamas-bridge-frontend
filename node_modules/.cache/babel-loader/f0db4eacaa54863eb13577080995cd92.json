{"ast":null,"code":"import { chainUrls } from 'lib/constants';\nimport { logDebug, logError } from 'lib/helpers';\nimport { getValidEthersProvider } from 'lib/providerHelpers';\nconst {\n  REACT_APP_RPC_HEALTH_UPDATE_INTERVAL\n} = process.env;\nconst DEFAULT_RPC_HEALTH_UPDATE_INTERVAL = 60000;\nconst UPDATE_INTERVAL = REACT_APP_RPC_HEALTH_UPDATE_INTERVAL || DEFAULT_RPC_HEALTH_UPDATE_INTERVAL;\nclass RPCHealthStore {\n  constructor() {\n    this.rpcHealth = {};\n    setTimeout(() => this.updateRPCHealth(), 5000);\n  }\n  async updateRPCHealth() {\n    await Promise.all(Object.entries(chainUrls).map(async ([chainId, {\n      name\n    }]) => {\n      try {\n        const provider = await getValidEthersProvider(chainId);\n        this.rpcHealth[chainId] = provider ? await provider.getBlockNumber() : false;\n      } catch (error) {\n        this.rpcHealth[chainId] = false;\n        logError(`${name} RPC Health Error: `, error);\n      }\n    }));\n    logDebug('Updated RPC Health', this.rpcHealth);\n    setTimeout(() => this.updateRPCHealth(), UPDATE_INTERVAL);\n  }\n  status() {\n    return this.rpcHealth;\n  }\n  setHealth(chainId, blockNumber) {\n    this.rpcHealth[chainId] = blockNumber;\n  }\n}\nconst rpcHealthStore = new RPCHealthStore();\nexport const getRPCHealth = () => rpcHealthStore.status();\nexport const setRPCHealth = (chainId, blockNumber) => {\n  rpcHealthStore.setHealth(chainId, blockNumber);\n};","map":{"version":3,"names":["chainUrls","logDebug","logError","getValidEthersProvider","REACT_APP_RPC_HEALTH_UPDATE_INTERVAL","process","env","DEFAULT_RPC_HEALTH_UPDATE_INTERVAL","UPDATE_INTERVAL","RPCHealthStore","constructor","rpcHealth","setTimeout","updateRPCHealth","Promise","all","Object","entries","map","chainId","name","provider","getBlockNumber","error","status","setHealth","blockNumber","rpcHealthStore","getRPCHealth","setRPCHealth"],"sources":["/home/hightop/bahamas_bridge/omnibridge-ui/packages/dapp/src/stores/rpcHealth.js"],"sourcesContent":["import { chainUrls } from 'lib/constants';\nimport { logDebug, logError } from 'lib/helpers';\nimport { getValidEthersProvider } from 'lib/providerHelpers';\n\nconst { REACT_APP_RPC_HEALTH_UPDATE_INTERVAL } = process.env;\n\nconst DEFAULT_RPC_HEALTH_UPDATE_INTERVAL = 60000;\n\nconst UPDATE_INTERVAL =\n  REACT_APP_RPC_HEALTH_UPDATE_INTERVAL || DEFAULT_RPC_HEALTH_UPDATE_INTERVAL;\n\nclass RPCHealthStore {\n  rpcHealth = {};\n\n  constructor() {\n    setTimeout(() => this.updateRPCHealth(), 5000);\n  }\n\n  async updateRPCHealth() {\n    await Promise.all(\n      Object.entries(chainUrls).map(async ([chainId, { name }]) => {\n        try {\n          const provider = await getValidEthersProvider(chainId);\n          this.rpcHealth[chainId] = provider\n            ? await provider.getBlockNumber()\n            : false;\n        } catch (error) {\n          this.rpcHealth[chainId] = false;\n          logError(`${name} RPC Health Error: `, error);\n        }\n      }),\n    );\n    logDebug('Updated RPC Health', this.rpcHealth);\n    setTimeout(() => this.updateRPCHealth(), UPDATE_INTERVAL);\n  }\n\n  status() {\n    return this.rpcHealth;\n  }\n\n  setHealth(chainId, blockNumber) {\n    this.rpcHealth[chainId] = blockNumber;\n  }\n}\n\nconst rpcHealthStore = new RPCHealthStore();\n\nexport const getRPCHealth = () => rpcHealthStore.status();\n\nexport const setRPCHealth = (chainId, blockNumber) => {\n  rpcHealthStore.setHealth(chainId, blockNumber);\n};\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,eAAe;AACzC,SAASC,QAAQ,EAAEC,QAAQ,QAAQ,aAAa;AAChD,SAASC,sBAAsB,QAAQ,qBAAqB;AAE5D,MAAM;EAAEC;AAAqC,CAAC,GAAGC,OAAO,CAACC,GAAG;AAE5D,MAAMC,kCAAkC,GAAG,KAAK;AAEhD,MAAMC,eAAe,GACnBJ,oCAAoC,IAAIG,kCAAkC;AAE5E,MAAME,cAAc,CAAC;EAGnBC,WAAWA,CAAA,EAAG;IAAA,KAFdC,SAAS,GAAG,CAAC,CAAC;IAGZC,UAAU,CAAC,MAAM,IAAI,CAACC,eAAe,CAAC,CAAC,EAAE,IAAI,CAAC;EAChD;EAEA,MAAMA,eAAeA,CAAA,EAAG;IACtB,MAAMC,OAAO,CAACC,GAAG,CACfC,MAAM,CAACC,OAAO,CAACjB,SAAS,CAAC,CAACkB,GAAG,CAAC,OAAO,CAACC,OAAO,EAAE;MAAEC;IAAK,CAAC,CAAC,KAAK;MAC3D,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMlB,sBAAsB,CAACgB,OAAO,CAAC;QACtD,IAAI,CAACR,SAAS,CAACQ,OAAO,CAAC,GAAGE,QAAQ,GAC9B,MAAMA,QAAQ,CAACC,cAAc,CAAC,CAAC,GAC/B,KAAK;MACX,CAAC,CAAC,OAAOC,KAAK,EAAE;QACd,IAAI,CAACZ,SAAS,CAACQ,OAAO,CAAC,GAAG,KAAK;QAC/BjB,QAAQ,CAAE,GAAEkB,IAAK,qBAAoB,EAAEG,KAAK,CAAC;MAC/C;IACF,CAAC,CACH,CAAC;IACDtB,QAAQ,CAAC,oBAAoB,EAAE,IAAI,CAACU,SAAS,CAAC;IAC9CC,UAAU,CAAC,MAAM,IAAI,CAACC,eAAe,CAAC,CAAC,EAAEL,eAAe,CAAC;EAC3D;EAEAgB,MAAMA,CAAA,EAAG;IACP,OAAO,IAAI,CAACb,SAAS;EACvB;EAEAc,SAASA,CAACN,OAAO,EAAEO,WAAW,EAAE;IAC9B,IAAI,CAACf,SAAS,CAACQ,OAAO,CAAC,GAAGO,WAAW;EACvC;AACF;AAEA,MAAMC,cAAc,GAAG,IAAIlB,cAAc,CAAC,CAAC;AAE3C,OAAO,MAAMmB,YAAY,GAAGA,CAAA,KAAMD,cAAc,CAACH,MAAM,CAAC,CAAC;AAEzD,OAAO,MAAMK,YAAY,GAAGA,CAACV,OAAO,EAAEO,WAAW,KAAK;EACpDC,cAAc,CAACF,SAAS,CAACN,OAAO,EAAEO,WAAW,CAAC;AAChD,CAAC"},"metadata":{},"sourceType":"module"}