{"ast":null,"code":"import * as env from \"@walletconnect/environment\";\nimport { ENCRYPT_OP, DECRYPT_OP, SIGN_OP, VERIFY_OP, AES_BROWSER_ALGO, AES_LENGTH, HMAC_BROWSER_ALGO, HMAC_BROWSER, HMAC_LENGTH, SHA256_BROWSER_ALGO, SHA512_BROWSER_ALGO, LENGTH_512 } from \"../constants\";\nexport function getAlgo(type) {\n  return type === AES_BROWSER_ALGO ? {\n    length: AES_LENGTH,\n    name: AES_BROWSER_ALGO\n  } : {\n    hash: {\n      name: HMAC_BROWSER_ALGO\n    },\n    name: HMAC_BROWSER\n  };\n}\nexport function getOps(type) {\n  return type === AES_BROWSER_ALGO ? [ENCRYPT_OP, DECRYPT_OP] : [SIGN_OP, VERIFY_OP];\n}\nexport async function browserExportKey(cryptoKey, type = AES_BROWSER_ALGO) {\n  const subtle = env.getSubtleCrypto();\n  return new Uint8Array(await subtle.exportKey(\"raw\", cryptoKey));\n}\nexport async function browserImportKey(buffer, type = AES_BROWSER_ALGO) {\n  return env.getSubtleCrypto().importKey(\"raw\", buffer, getAlgo(type), true, getOps(type));\n}\nexport async function browserAesEncrypt(iv, key, data) {\n  const subtle = env.getSubtleCrypto();\n  const cryptoKey = await browserImportKey(key, AES_BROWSER_ALGO);\n  const result = await subtle.encrypt({\n    iv,\n    name: AES_BROWSER_ALGO\n  }, cryptoKey, data);\n  return new Uint8Array(result);\n}\nexport async function browserAesDecrypt(iv, key, data) {\n  const subtle = env.getSubtleCrypto();\n  const cryptoKey = await browserImportKey(key, AES_BROWSER_ALGO);\n  const result = await subtle.decrypt({\n    iv,\n    name: AES_BROWSER_ALGO\n  }, cryptoKey, data);\n  return new Uint8Array(result);\n}\nexport async function browserHmacSha256Sign(key, data) {\n  const subtle = env.getSubtleCrypto();\n  const cryptoKey = await browserImportKey(key, HMAC_BROWSER);\n  const signature = await subtle.sign({\n    length: HMAC_LENGTH,\n    name: HMAC_BROWSER\n  }, cryptoKey, data);\n  return new Uint8Array(signature);\n}\nexport async function browserHmacSha512Sign(key, data) {\n  const subtle = env.getSubtleCrypto();\n  const cryptoKey = await browserImportKey(key, HMAC_BROWSER);\n  const signature = await subtle.sign({\n    length: LENGTH_512,\n    name: HMAC_BROWSER\n  }, cryptoKey, data);\n  return new Uint8Array(signature);\n}\nexport async function browserSha256(data) {\n  const subtle = env.getSubtleCrypto();\n  const result = await subtle.digest({\n    name: SHA256_BROWSER_ALGO\n  }, data);\n  return new Uint8Array(result);\n}\nexport async function browserSha512(data) {\n  const subtle = env.getSubtleCrypto();\n  const result = await subtle.digest({\n    name: SHA512_BROWSER_ALGO\n  }, data);\n  return new Uint8Array(result);\n}","map":{"version":3,"sources":["../../../src/lib/browser.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import * as env from \"@walletconnect/environment\";\nimport { ENCRYPT_OP, DECRYPT_OP, SIGN_OP, VERIFY_OP, AES_BROWSER_ALGO, AES_LENGTH, HMAC_BROWSER_ALGO, HMAC_BROWSER, HMAC_LENGTH, SHA256_BROWSER_ALGO, SHA512_BROWSER_ALGO, LENGTH_512, } from \"../constants\";\nexport function getAlgo(type) {\n    return type === AES_BROWSER_ALGO\n        ? { length: AES_LENGTH, name: AES_BROWSER_ALGO }\n        : {\n            hash: { name: HMAC_BROWSER_ALGO },\n            name: HMAC_BROWSER,\n        };\n}\nexport function getOps(type) {\n    return type === AES_BROWSER_ALGO\n        ? [ENCRYPT_OP, DECRYPT_OP]\n        : [SIGN_OP, VERIFY_OP];\n}\nexport async function browserExportKey(cryptoKey, type = AES_BROWSER_ALGO) {\n    const subtle = env.getSubtleCrypto();\n    return new Uint8Array(await subtle.exportKey(\"raw\", cryptoKey));\n}\nexport async function browserImportKey(buffer, type = AES_BROWSER_ALGO) {\n    return env.getSubtleCrypto().importKey(\"raw\", buffer, getAlgo(type), true, getOps(type));\n}\nexport async function browserAesEncrypt(iv, key, data) {\n    const subtle = env.getSubtleCrypto();\n    const cryptoKey = await browserImportKey(key, AES_BROWSER_ALGO);\n    const result = await subtle.encrypt({\n        iv,\n        name: AES_BROWSER_ALGO,\n    }, cryptoKey, data);\n    return new Uint8Array(result);\n}\nexport async function browserAesDecrypt(iv, key, data) {\n    const subtle = env.getSubtleCrypto();\n    const cryptoKey = await browserImportKey(key, AES_BROWSER_ALGO);\n    const result = await subtle.decrypt({\n        iv,\n        name: AES_BROWSER_ALGO,\n    }, cryptoKey, data);\n    return new Uint8Array(result);\n}\nexport async function browserHmacSha256Sign(key, data) {\n    const subtle = env.getSubtleCrypto();\n    const cryptoKey = await browserImportKey(key, HMAC_BROWSER);\n    const signature = await subtle.sign({\n        length: HMAC_LENGTH,\n        name: HMAC_BROWSER,\n    }, cryptoKey, data);\n    return new Uint8Array(signature);\n}\nexport async function browserHmacSha512Sign(key, data) {\n    const subtle = env.getSubtleCrypto();\n    const cryptoKey = await browserImportKey(key, HMAC_BROWSER);\n    const signature = await subtle.sign({\n        length: LENGTH_512,\n        name: HMAC_BROWSER,\n    }, cryptoKey, data);\n    return new Uint8Array(signature);\n}\nexport async function browserSha256(data) {\n    const subtle = env.getSubtleCrypto();\n    const result = await subtle.digest({\n        name: SHA256_BROWSER_ALGO,\n    }, data);\n    return new Uint8Array(result);\n}\nexport async function browserSha512(data) {\n    const subtle = env.getSubtleCrypto();\n    const result = await subtle.digest({\n        name: SHA512_BROWSER_ALGO,\n    }, data);\n    return new Uint8Array(result);\n}\n//# sourceMappingURL=browser.js.map"]},"metadata":{},"sourceType":"module"}