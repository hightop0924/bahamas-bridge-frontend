{"ast":null,"code":"/** PURE_IMPORTS_START _Observable,_Subscription,_symbol_iterator PURE_IMPORTS_END */\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nexport function scheduleIterable(input, scheduler) {\n  if (!input) {\n    throw new Error('Iterable cannot be null');\n  }\n  return new Observable(function (subscriber) {\n    var sub = new Subscription();\n    var iterator;\n    sub.add(function () {\n      if (iterator && typeof iterator.return === 'function') {\n        iterator.return();\n      }\n    });\n    sub.add(scheduler.schedule(function () {\n      iterator = input[Symbol_iterator]();\n      sub.add(scheduler.schedule(function () {\n        if (subscriber.closed) {\n          return;\n        }\n        var value;\n        var done;\n        try {\n          var result = iterator.next();\n          value = result.value;\n          done = result.done;\n        } catch (err) {\n          subscriber.error(err);\n          return;\n        }\n        if (done) {\n          subscriber.complete();\n        } else {\n          subscriber.next(value);\n          this.schedule();\n        }\n      }));\n    }));\n    return sub;\n  });\n}","map":{"version":3,"sources":["../../../src/internal/scheduled/scheduleIterable.ts"],"names":[],"mappings":"AAAA;AAEA,SAAS,UAAA,QAAc,eAAM;AAC7B,SAAS,YAAY,QAAA,iBAAuB;AAE5C,SAAM,QAAU,IAAA,eAAoB,QAAoB,oBAAwB;AAC9E,OAAA,SAAY,gBAAA,CAAA,KAAA,EAAA,SAAA,EAAA;MACV,CAAA,KAAM,EAAA;IACP,MAAA,IAAA,KAAA,CAAA,yBAAA,CAAA;EACD;EACE,OAAA,IAAS,UAAO,CAAA,UAAc,UAAC,EAAA;IAC/B,IAAI,GAAA,GAAA,IAAsB,YAAA,CAAA,CAAA;IAC1B,IAAI,QAAI;QAEN,GAAA,CAAI,YAAY;UACd,QAAQ,IAAC,OAAS,QAAA,CAAA,MAAA,KAAA,UAAA,EAAA;QACnB,QAAA,CAAA,MAAA,CAAA,CAAA;MACA;IACH,CAAA,CAAA;QACE,GAAA,CAAA,SAAW,CAAA,QAAM,CAAA,YAAkB;MACnC,QAAQ,GAAA,KAAA,CAAS,eAAU,CAAA,CAAA,CAAA;UACzB,GAAA,CAAI,SAAA,CAAU,QAAO,CAAE,YAAA;YACrB,UAAO,CAAA,MAAA,EAAA;UACR;QACD;QACA,IAAI,KAAc;QAClB,IAAI,IAAA;YACF;UACA,IAAA,MAAQ,GAAA,QAAa,CAAA,IAAA,CAAA,CAAA;UACrB,KAAI,GAAG,MAAO,CAAA,KAAK;UACpB,IAAA,GAAA,MAAA,CAAA,IAAA;QAAC,CAAA,CACA,OAAA,GAAA,EAAA;UACA,UAAO,CAAA,KAAA,CAAA,GAAA,CAAA;UACR;QACD;YACE,IAAA,EAAA;UACD,UAAA,CAAA,QAAA,CAAA,CAAA;SAAM,MACL;UACA,UAAK,CAAA,IAAU,CAAC,KAAA,CAAA;UACjB,IAAA,CAAA,QAAA,CAAA,CAAA;QACC;MACF,CAAA,CAAA,CAAA;IACJ,CAAA,CAAA,CAAA;IACC,OAAA,GAAA;EACJ,CAAA,CAAA","sourcesContent":["/** PURE_IMPORTS_START _Observable,_Subscription,_symbol_iterator PURE_IMPORTS_END */\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nexport function scheduleIterable(input, scheduler) {\n    if (!input) {\n        throw new Error('Iterable cannot be null');\n    }\n    return new Observable(function (subscriber) {\n        var sub = new Subscription();\n        var iterator;\n        sub.add(function () {\n            if (iterator && typeof iterator.return === 'function') {\n                iterator.return();\n            }\n        });\n        sub.add(scheduler.schedule(function () {\n            iterator = input[Symbol_iterator]();\n            sub.add(scheduler.schedule(function () {\n                if (subscriber.closed) {\n                    return;\n                }\n                var value;\n                var done;\n                try {\n                    var result = iterator.next();\n                    value = result.value;\n                    done = result.done;\n                }\n                catch (err) {\n                    subscriber.error(err);\n                    return;\n                }\n                if (done) {\n                    subscriber.complete();\n                }\n                else {\n                    subscriber.next(value);\n                    this.schedule();\n                }\n            }));\n        }));\n        return sub;\n    });\n}\n//# sourceMappingURL=scheduleIterable.js.map\n"]},"metadata":{},"sourceType":"module"}