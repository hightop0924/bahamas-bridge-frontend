{"ast":null,"code":"import { __assign, __read, __spread } from \"tslib\";\nimport { addInstrumentationHandler, isInstanceOf, isMatchingPattern } from '@sentry/utils';\nimport { getActiveTransaction, hasTracingEnabled } from '../utils';\nexport var DEFAULT_TRACING_ORIGINS = ['localhost', /^\\//];\nexport var defaultRequestInstrumentationOptions = {\n  traceFetch: true,\n  traceXHR: true,\n  tracingOrigins: DEFAULT_TRACING_ORIGINS\n};\n/** Registers span creators for xhr and fetch requests  */\nexport function instrumentOutgoingRequests(_options) {\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  var _a = __assign(__assign({}, defaultRequestInstrumentationOptions), _options),\n    traceFetch = _a.traceFetch,\n    traceXHR = _a.traceXHR,\n    tracingOrigins = _a.tracingOrigins,\n    shouldCreateSpanForRequest = _a.shouldCreateSpanForRequest;\n  // We should cache url -> decision so that we don't have to compute\n  // regexp everytime we create a request.\n  var urlMap = {};\n  var defaultShouldCreateSpan = function (url) {\n    if (urlMap[url]) {\n      return urlMap[url];\n    }\n    var origins = tracingOrigins;\n    urlMap[url] = origins.some(function (origin) {\n      return isMatchingPattern(url, origin);\n    }) && !isMatchingPattern(url, 'sentry_key');\n    return urlMap[url];\n  };\n  // We want that our users don't have to re-implement shouldCreateSpanForRequest themselves\n  // That's why we filter out already unwanted Spans from tracingOrigins\n  var shouldCreateSpan = defaultShouldCreateSpan;\n  if (typeof shouldCreateSpanForRequest === 'function') {\n    shouldCreateSpan = function (url) {\n      return defaultShouldCreateSpan(url) && shouldCreateSpanForRequest(url);\n    };\n  }\n  var spans = {};\n  if (traceFetch) {\n    addInstrumentationHandler('fetch', function (handlerData) {\n      fetchCallback(handlerData, shouldCreateSpan, spans);\n    });\n  }\n  if (traceXHR) {\n    addInstrumentationHandler('xhr', function (handlerData) {\n      xhrCallback(handlerData, shouldCreateSpan, spans);\n    });\n  }\n}\n/**\n * Create and track fetch request spans\n */\nexport function fetchCallback(handlerData, shouldCreateSpan, spans) {\n  if (!hasTracingEnabled() || !(handlerData.fetchData && shouldCreateSpan(handlerData.fetchData.url))) {\n    return;\n  }\n  if (handlerData.endTimestamp) {\n    var spanId = handlerData.fetchData.__span;\n    if (!spanId) return;\n    var span = spans[spanId];\n    if (span) {\n      if (handlerData.response) {\n        // TODO (kmclb) remove this once types PR goes through\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        span.setHttpStatus(handlerData.response.status);\n      } else if (handlerData.error) {\n        span.setStatus('internal_error');\n      }\n      span.finish();\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete spans[spanId];\n    }\n    return;\n  }\n  var activeTransaction = getActiveTransaction();\n  if (activeTransaction) {\n    var span = activeTransaction.startChild({\n      data: __assign(__assign({}, handlerData.fetchData), {\n        type: 'fetch'\n      }),\n      description: handlerData.fetchData.method + \" \" + handlerData.fetchData.url,\n      op: 'http.client'\n    });\n    handlerData.fetchData.__span = span.spanId;\n    spans[span.spanId] = span;\n    var request = handlerData.args[0] = handlerData.args[0];\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    var options = handlerData.args[1] = handlerData.args[1] || {};\n    var headers = options.headers;\n    if (isInstanceOf(request, Request)) {\n      headers = request.headers;\n    }\n    if (headers) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      if (typeof headers.append === 'function') {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        headers.append('sentry-trace', span.toTraceparent());\n      } else if (Array.isArray(headers)) {\n        headers = __spread(headers, [['sentry-trace', span.toTraceparent()]]);\n      } else {\n        headers = __assign(__assign({}, headers), {\n          'sentry-trace': span.toTraceparent()\n        });\n      }\n    } else {\n      headers = {\n        'sentry-trace': span.toTraceparent()\n      };\n    }\n    options.headers = headers;\n  }\n}\n/**\n * Create and track xhr request spans\n */\nexport function xhrCallback(handlerData, shouldCreateSpan, spans) {\n  if (!hasTracingEnabled() || handlerData.xhr && handlerData.xhr.__sentry_own_request__ || !(handlerData.xhr && handlerData.xhr.__sentry_xhr__ && shouldCreateSpan(handlerData.xhr.__sentry_xhr__.url))) {\n    return;\n  }\n  var xhr = handlerData.xhr.__sentry_xhr__;\n  // check first if the request has finished and is tracked by an existing span which should now end\n  if (handlerData.endTimestamp) {\n    var spanId = handlerData.xhr.__sentry_xhr_span_id__;\n    if (!spanId) return;\n    var span = spans[spanId];\n    if (span) {\n      span.setHttpStatus(xhr.status_code);\n      span.finish();\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete spans[spanId];\n    }\n    return;\n  }\n  // if not, create a new span to track it\n  var activeTransaction = getActiveTransaction();\n  if (activeTransaction) {\n    var span = activeTransaction.startChild({\n      data: __assign(__assign({}, xhr.data), {\n        type: 'xhr',\n        method: xhr.method,\n        url: xhr.url\n      }),\n      description: xhr.method + \" \" + xhr.url,\n      op: 'http.client'\n    });\n    handlerData.xhr.__sentry_xhr_span_id__ = span.spanId;\n    spans[handlerData.xhr.__sentry_xhr_span_id__] = span;\n    if (handlerData.xhr.setRequestHeader) {\n      try {\n        handlerData.xhr.setRequestHeader('sentry-trace', span.toTraceparent());\n      } catch (_) {\n        // Error: InvalidStateError: Failed to execute 'setRequestHeader' on 'XMLHttpRequest': The object's state must be OPENED.\n      }\n    }\n  }\n}","map":{"version":3,"sources":["../../../../src/browser/request.ts"],"names":[],"mappings":"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","sourcesContent":["import { addInstrumentationHandler, isInstanceOf, isMatchingPattern } from '@sentry/utils';\n\nimport { Span } from '../span';\nimport { getActiveTransaction, hasTracingEnabled } from '../utils';\n\nexport const DEFAULT_TRACING_ORIGINS = ['localhost', /^\\//];\n\n/** Options for Request Instrumentation */\nexport interface RequestInstrumentationOptions {\n  /**\n   * List of strings / regex where the integration should create Spans out of. Additionally this will be used\n   * to define which outgoing requests the `sentry-trace` header will be attached to.\n   *\n   * Default: ['localhost', /^\\//] {@see DEFAULT_TRACING_ORIGINS}\n   */\n  tracingOrigins: Array<string | RegExp>;\n\n  /**\n   * Flag to disable patching all together for fetch requests.\n   *\n   * Default: true\n   */\n  traceFetch: boolean;\n\n  /**\n   * Flag to disable patching all together for xhr requests.\n   *\n   * Default: true\n   */\n  traceXHR: boolean;\n\n  /**\n   * This function will be called before creating a span for a request with the given url.\n   * Return false if you don't want a span for the given url.\n   *\n   * By default it uses the `tracingOrigins` options as a url match.\n   */\n  shouldCreateSpanForRequest?(url: string): boolean;\n}\n\n/** Data returned from fetch callback */\nexport interface FetchData {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  args: any[]; // the arguments passed to the fetch call itself\n  fetchData?: {\n    method: string;\n    url: string;\n    // span_id\n    __span?: string;\n  };\n\n  // TODO Should this be unknown instead? If we vendor types, make it a Response\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  response?: any;\n  error?: unknown;\n\n  startTimestamp: number;\n  endTimestamp?: number;\n}\n\n/** Data returned from XHR request */\nexport interface XHRData {\n  xhr?: {\n    __sentry_xhr__?: {\n      method: string;\n      url: string;\n      status_code: number;\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      data: Record<string, any>;\n    };\n    __sentry_xhr_span_id__?: string;\n    setRequestHeader?: (key: string, val: string) => void;\n    __sentry_own_request__?: boolean;\n  };\n  startTimestamp: number;\n  endTimestamp?: number;\n}\n\nexport const defaultRequestInstrumentationOptions: RequestInstrumentationOptions = {\n  traceFetch: true,\n  traceXHR: true,\n  tracingOrigins: DEFAULT_TRACING_ORIGINS,\n};\n\n/** Registers span creators for xhr and fetch requests  */\nexport function instrumentOutgoingRequests(_options?: Partial<RequestInstrumentationOptions>): void {\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  const { traceFetch, traceXHR, tracingOrigins, shouldCreateSpanForRequest } = {\n    ...defaultRequestInstrumentationOptions,\n    ..._options,\n  };\n\n  // We should cache url -> decision so that we don't have to compute\n  // regexp everytime we create a request.\n  const urlMap: Record<string, boolean> = {};\n\n  const defaultShouldCreateSpan = (url: string): boolean => {\n    if (urlMap[url]) {\n      return urlMap[url];\n    }\n    const origins = tracingOrigins;\n    urlMap[url] =\n      origins.some((origin: string | RegExp) => isMatchingPattern(url, origin)) &&\n      !isMatchingPattern(url, 'sentry_key');\n    return urlMap[url];\n  };\n\n  // We want that our users don't have to re-implement shouldCreateSpanForRequest themselves\n  // That's why we filter out already unwanted Spans from tracingOrigins\n  let shouldCreateSpan = defaultShouldCreateSpan;\n  if (typeof shouldCreateSpanForRequest === 'function') {\n    shouldCreateSpan = (url: string) => {\n      return defaultShouldCreateSpan(url) && shouldCreateSpanForRequest(url);\n    };\n  }\n\n  const spans: Record<string, Span> = {};\n\n  if (traceFetch) {\n    addInstrumentationHandler('fetch', (handlerData: FetchData) => {\n      fetchCallback(handlerData, shouldCreateSpan, spans);\n    });\n  }\n\n  if (traceXHR) {\n    addInstrumentationHandler('xhr', (handlerData: XHRData) => {\n      xhrCallback(handlerData, shouldCreateSpan, spans);\n    });\n  }\n}\n\n/**\n * Create and track fetch request spans\n */\nexport function fetchCallback(\n  handlerData: FetchData,\n  shouldCreateSpan: (url: string) => boolean,\n  spans: Record<string, Span>,\n): void {\n  if (!hasTracingEnabled() || !(handlerData.fetchData && shouldCreateSpan(handlerData.fetchData.url))) {\n    return;\n  }\n\n  if (handlerData.endTimestamp) {\n    const spanId = handlerData.fetchData.__span;\n    if (!spanId) return;\n\n    const span = spans[spanId];\n    if (span) {\n      if (handlerData.response) {\n        // TODO (kmclb) remove this once types PR goes through\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        span.setHttpStatus(handlerData.response.status);\n      } else if (handlerData.error) {\n        span.setStatus('internal_error');\n      }\n      span.finish();\n\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete spans[spanId];\n    }\n    return;\n  }\n\n  const activeTransaction = getActiveTransaction();\n  if (activeTransaction) {\n    const span = activeTransaction.startChild({\n      data: {\n        ...handlerData.fetchData,\n        type: 'fetch',\n      },\n      description: `${handlerData.fetchData.method} ${handlerData.fetchData.url}`,\n      op: 'http.client',\n    });\n\n    handlerData.fetchData.__span = span.spanId;\n    spans[span.spanId] = span;\n\n    const request = (handlerData.args[0] = handlerData.args[0] as string | Request);\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const options = (handlerData.args[1] = (handlerData.args[1] as { [key: string]: any }) || {});\n    let headers = options.headers;\n    if (isInstanceOf(request, Request)) {\n      headers = (request as Request).headers;\n    }\n    if (headers) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      if (typeof headers.append === 'function') {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        headers.append('sentry-trace', span.toTraceparent());\n      } else if (Array.isArray(headers)) {\n        headers = [...headers, ['sentry-trace', span.toTraceparent()]];\n      } else {\n        headers = { ...headers, 'sentry-trace': span.toTraceparent() };\n      }\n    } else {\n      headers = { 'sentry-trace': span.toTraceparent() };\n    }\n    options.headers = headers;\n  }\n}\n\n/**\n * Create and track xhr request spans\n */\nexport function xhrCallback(\n  handlerData: XHRData,\n  shouldCreateSpan: (url: string) => boolean,\n  spans: Record<string, Span>,\n): void {\n  if (\n    !hasTracingEnabled() ||\n    (handlerData.xhr && handlerData.xhr.__sentry_own_request__) ||\n    !(handlerData.xhr && handlerData.xhr.__sentry_xhr__ && shouldCreateSpan(handlerData.xhr.__sentry_xhr__.url))\n  ) {\n    return;\n  }\n\n  const xhr = handlerData.xhr.__sentry_xhr__;\n\n  // check first if the request has finished and is tracked by an existing span which should now end\n  if (handlerData.endTimestamp) {\n    const spanId = handlerData.xhr.__sentry_xhr_span_id__;\n    if (!spanId) return;\n\n    const span = spans[spanId];\n    if (span) {\n      span.setHttpStatus(xhr.status_code);\n      span.finish();\n\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete spans[spanId];\n    }\n    return;\n  }\n\n  // if not, create a new span to track it\n  const activeTransaction = getActiveTransaction();\n  if (activeTransaction) {\n    const span = activeTransaction.startChild({\n      data: {\n        ...xhr.data,\n        type: 'xhr',\n        method: xhr.method,\n        url: xhr.url,\n      },\n      description: `${xhr.method} ${xhr.url}`,\n      op: 'http.client',\n    });\n\n    handlerData.xhr.__sentry_xhr_span_id__ = span.spanId;\n    spans[handlerData.xhr.__sentry_xhr_span_id__] = span;\n\n    if (handlerData.xhr.setRequestHeader) {\n      try {\n        handlerData.xhr.setRequestHeader('sentry-trace', span.toTraceparent());\n      } catch (_) {\n        // Error: InvalidStateError: Failed to execute 'setRequestHeader' on 'XMLHttpRequest': The object's state must be OPENED.\n      }\n    }\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}