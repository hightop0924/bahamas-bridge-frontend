{"ast":null,"code":"'use strict';\n\nvar escapable = /[\\\\\"\\x00-\\x1f\\x7f-\\x9f\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g;\nvar gap;\nvar indent;\nvar meta = {\n  // table of character substitutions\n  '\\b': '\\\\b',\n  '\\t': '\\\\t',\n  '\\n': '\\\\n',\n  '\\f': '\\\\f',\n  '\\r': '\\\\r',\n  '\"': '\\\\\"',\n  '\\\\': '\\\\\\\\'\n};\nvar rep;\nfunction quote(string) {\n  // If the string contains no control characters, no quote characters, and no\n  // backslash characters, then we can safely slap some quotes around it.\n  // Otherwise we must also replace the offending characters with safe escape sequences.\n\n  escapable.lastIndex = 0;\n  return escapable.test(string) ? '\"' + string.replace(escapable, function (a) {\n    var c = meta[a];\n    return typeof c === 'string' ? c : '\\\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);\n  }) + '\"' : '\"' + string + '\"';\n}\nfunction str(key, holder) {\n  // Produce a string from holder[key].\n  var i; // The loop counter.\n  var k; // The member key.\n  var v; // The member value.\n  var length;\n  var mind = gap;\n  var partial;\n  var value = holder[key];\n\n  // If the value has a toJSON method, call it to obtain a replacement value.\n  if (value && typeof value === 'object' && typeof value.toJSON === 'function') {\n    value = value.toJSON(key);\n  }\n\n  // If we were called with a replacer function, then call the replacer to obtain a replacement value.\n  if (typeof rep === 'function') {\n    value = rep.call(holder, key, value);\n  }\n\n  // What happens next depends on the value's type.\n  switch (typeof value) {\n    case 'string':\n      return quote(value);\n    case 'number':\n      // JSON numbers must be finite. Encode non-finite numbers as null.\n      return isFinite(value) ? String(value) : 'null';\n    case 'boolean':\n    case 'null':\n      // If the value is a boolean or null, convert it to a string. Note:\n      // typeof null does not produce 'null'. The case is included here in\n      // the remote chance that this gets fixed someday.\n      return String(value);\n    case 'object':\n      if (!value) {\n        return 'null';\n      }\n      gap += indent;\n      partial = [];\n\n      // Array.isArray\n      if (Object.prototype.toString.apply(value) === '[object Array]') {\n        length = value.length;\n        for (i = 0; i < length; i += 1) {\n          partial[i] = str(i, value) || 'null';\n        }\n\n        // Join all of the elements together, separated with commas, and wrap them in brackets.\n        v = partial.length === 0 ? '[]' : gap ? '[\\n' + gap + partial.join(',\\n' + gap) + '\\n' + mind + ']' : '[' + partial.join(',') + ']';\n        gap = mind;\n        return v;\n      }\n\n      // If the replacer is an array, use it to select the members to be stringified.\n      if (rep && typeof rep === 'object') {\n        length = rep.length;\n        for (i = 0; i < length; i += 1) {\n          k = rep[i];\n          if (typeof k === 'string') {\n            v = str(k, value);\n            if (v) {\n              partial.push(quote(k) + (gap ? ': ' : ':') + v);\n            }\n          }\n        }\n      } else {\n        // Otherwise, iterate through all of the keys in the object.\n        for (k in value) {\n          if (Object.prototype.hasOwnProperty.call(value, k)) {\n            v = str(k, value);\n            if (v) {\n              partial.push(quote(k) + (gap ? ': ' : ':') + v);\n            }\n          }\n        }\n      }\n\n      // Join all of the member texts together, separated with commas, and wrap them in braces.\n\n      v = partial.length === 0 ? '{}' : gap ? '{\\n' + gap + partial.join(',\\n' + gap) + '\\n' + mind + '}' : '{' + partial.join(',') + '}';\n      gap = mind;\n      return v;\n    default:\n  }\n}\nmodule.exports = function (value, replacer, space) {\n  var i;\n  gap = '';\n  indent = '';\n\n  // If the space parameter is a number, make an indent string containing that many spaces.\n  if (typeof space === 'number') {\n    for (i = 0; i < space; i += 1) {\n      indent += ' ';\n    }\n  } else if (typeof space === 'string') {\n    // If the space parameter is a string, it will be used as the indent string.\n    indent = space;\n  }\n\n  // If there is a replacer, it must be a function or an array. Otherwise, throw an error.\n  rep = replacer;\n  if (replacer && typeof replacer !== 'function' && (typeof replacer !== 'object' || typeof replacer.length !== 'number')) {\n    throw new Error('JSON.stringify');\n  }\n\n  // Make a fake root object containing our value under the key of ''.\n  // Return the result of stringifying the value.\n  return str('', {\n    '': value\n  });\n};","map":{"version":3,"names":["escapable","gap","indent","meta","rep","quote","string","lastIndex","test","replace","a","c","charCodeAt","toString","slice","str","key","holder","i","k","v","length","mind","partial","value","toJSON","call","isFinite","String","Object","prototype","apply","join","push","hasOwnProperty","module","exports","replacer","space","Error"],"sources":["/home/hightop/bahamas_bridge/omnibridge-ui/node_modules/jsonify/lib/stringify.js"],"sourcesContent":["'use strict';\n\nvar escapable = /[\\\\\"\\x00-\\x1f\\x7f-\\x9f\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g;\nvar gap;\nvar indent;\nvar meta = { // table of character substitutions\n\t'\\b': '\\\\b',\n\t'\\t': '\\\\t',\n\t'\\n': '\\\\n',\n\t'\\f': '\\\\f',\n\t'\\r': '\\\\r',\n\t'\"': '\\\\\"',\n\t'\\\\': '\\\\\\\\'\n};\nvar rep;\n\nfunction quote(string) {\n\t// If the string contains no control characters, no quote characters, and no\n\t// backslash characters, then we can safely slap some quotes around it.\n\t// Otherwise we must also replace the offending characters with safe escape sequences.\n\n\tescapable.lastIndex = 0;\n\treturn escapable.test(string) ? '\"' + string.replace(escapable, function (a) {\n\t\tvar c = meta[a];\n\t\treturn typeof c === 'string' ? c\n\t\t\t: '\\\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);\n\t}) + '\"' : '\"' + string + '\"';\n}\n\nfunction str(key, holder) {\n\t// Produce a string from holder[key].\n\tvar i; // The loop counter.\n\tvar k; // The member key.\n\tvar v; // The member value.\n\tvar length;\n\tvar mind = gap;\n\tvar partial;\n\tvar value = holder[key];\n\n\t// If the value has a toJSON method, call it to obtain a replacement value.\n\tif (value && typeof value === 'object' && typeof value.toJSON === 'function') {\n\t\tvalue = value.toJSON(key);\n\t}\n\n\t// If we were called with a replacer function, then call the replacer to obtain a replacement value.\n\tif (typeof rep === 'function') {\n\t\tvalue = rep.call(holder, key, value);\n\t}\n\n\t// What happens next depends on the value's type.\n\tswitch (typeof value) {\n\t\tcase 'string':\n\t\t\treturn quote(value);\n\n\t\tcase 'number':\n\t\t\t// JSON numbers must be finite. Encode non-finite numbers as null.\n\t\t\treturn isFinite(value) ? String(value) : 'null';\n\n\t\tcase 'boolean':\n\t\tcase 'null':\n\t\t\t// If the value is a boolean or null, convert it to a string. Note:\n\t\t\t// typeof null does not produce 'null'. The case is included here in\n\t\t\t// the remote chance that this gets fixed someday.\n\t\t\treturn String(value);\n\n\t\tcase 'object':\n\t\t\tif (!value) {\n\t\t\t\treturn 'null';\n\t\t\t}\n\t\t\tgap += indent;\n\t\t\tpartial = [];\n\n\t\t\t// Array.isArray\n\t\t\tif (Object.prototype.toString.apply(value) === '[object Array]') {\n\t\t\t\tlength = value.length;\n\t\t\t\tfor (i = 0; i < length; i += 1) {\n\t\t\t\t\tpartial[i] = str(i, value) || 'null';\n\t\t\t\t}\n\n\t\t\t\t// Join all of the elements together, separated with commas, and wrap them in brackets.\n\t\t\t\tv = partial.length === 0 ? '[]' : gap\n\t\t\t\t\t? '[\\n' + gap + partial.join(',\\n' + gap) + '\\n' + mind + ']'\n\t\t\t\t\t: '[' + partial.join(',') + ']';\n\t\t\t\tgap = mind;\n\t\t\t\treturn v;\n\t\t\t}\n\n\t\t\t// If the replacer is an array, use it to select the members to be stringified.\n\t\t\tif (rep && typeof rep === 'object') {\n\t\t\t\tlength = rep.length;\n\t\t\t\tfor (i = 0; i < length; i += 1) {\n\t\t\t\t\tk = rep[i];\n\t\t\t\t\tif (typeof k === 'string') {\n\t\t\t\t\t\tv = str(k, value);\n\t\t\t\t\t\tif (v) {\n\t\t\t\t\t\t\tpartial.push(quote(k) + (gap ? ': ' : ':') + v);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Otherwise, iterate through all of the keys in the object.\n\t\t\t\tfor (k in value) {\n\t\t\t\t\tif (Object.prototype.hasOwnProperty.call(value, k)) {\n\t\t\t\t\t\tv = str(k, value);\n\t\t\t\t\t\tif (v) {\n\t\t\t\t\t\t\tpartial.push(quote(k) + (gap ? ': ' : ':') + v);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Join all of the member texts together, separated with commas, and wrap them in braces.\n\n\t\t\tv = partial.length === 0 ? '{}' : gap\n\t\t\t\t? '{\\n' + gap + partial.join(',\\n' + gap) + '\\n' + mind + '}'\n\t\t\t\t: '{' + partial.join(',') + '}';\n\t\t\tgap = mind;\n\t\t\treturn v;\n\t\tdefault:\n\t}\n}\n\nmodule.exports = function (value, replacer, space) {\n\tvar i;\n\tgap = '';\n\tindent = '';\n\n\t// If the space parameter is a number, make an indent string containing that many spaces.\n\tif (typeof space === 'number') {\n\t\tfor (i = 0; i < space; i += 1) {\n\t\t\tindent += ' ';\n\t\t}\n\t} else if (typeof space === 'string') {\n\t\t// If the space parameter is a string, it will be used as the indent string.\n\t\tindent = space;\n\t}\n\n\t// If there is a replacer, it must be a function or an array. Otherwise, throw an error.\n\trep = replacer;\n\tif (\n\t\treplacer\n\t\t&& typeof replacer !== 'function'\n\t\t&& (typeof replacer !== 'object' || typeof replacer.length !== 'number')\n\t) {\n\t\tthrow new Error('JSON.stringify');\n\t}\n\n\t// Make a fake root object containing our value under the key of ''.\n\t// Return the result of stringifying the value.\n\treturn str('', { '': value });\n};\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,SAAS,GAAG,yHAAyH;AACzI,IAAIC,GAAG;AACP,IAAIC,MAAM;AACV,IAAIC,IAAI,GAAG;EAAE;EACZ,IAAI,EAAE,KAAK;EACX,IAAI,EAAE,KAAK;EACX,IAAI,EAAE,KAAK;EACX,IAAI,EAAE,KAAK;EACX,IAAI,EAAE,KAAK;EACX,GAAG,EAAE,KAAK;EACV,IAAI,EAAE;AACP,CAAC;AACD,IAAIC,GAAG;AAEP,SAASC,KAAKA,CAACC,MAAM,EAAE;EACtB;EACA;EACA;;EAEAN,SAAS,CAACO,SAAS,GAAG,CAAC;EACvB,OAAOP,SAAS,CAACQ,IAAI,CAACF,MAAM,CAAC,GAAG,GAAG,GAAGA,MAAM,CAACG,OAAO,CAACT,SAAS,EAAE,UAAUU,CAAC,EAAE;IAC5E,IAAIC,CAAC,GAAGR,IAAI,CAACO,CAAC,CAAC;IACf,OAAO,OAAOC,CAAC,KAAK,QAAQ,GAAGA,CAAC,GAC7B,KAAK,GAAG,CAAC,MAAM,GAAGD,CAAC,CAACE,UAAU,CAAC,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,EAAEC,KAAK,CAAC,CAAC,CAAC,CAAC;EAC7D,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,GAAGR,MAAM,GAAG,GAAG;AAC9B;AAEA,SAASS,GAAGA,CAACC,GAAG,EAAEC,MAAM,EAAE;EACzB;EACA,IAAIC,CAAC,CAAC,CAAC;EACP,IAAIC,CAAC,CAAC,CAAC;EACP,IAAIC,CAAC,CAAC,CAAC;EACP,IAAIC,MAAM;EACV,IAAIC,IAAI,GAAGrB,GAAG;EACd,IAAIsB,OAAO;EACX,IAAIC,KAAK,GAAGP,MAAM,CAACD,GAAG,CAAC;;EAEvB;EACA,IAAIQ,KAAK,IAAI,OAAOA,KAAK,KAAK,QAAQ,IAAI,OAAOA,KAAK,CAACC,MAAM,KAAK,UAAU,EAAE;IAC7ED,KAAK,GAAGA,KAAK,CAACC,MAAM,CAACT,GAAG,CAAC;EAC1B;;EAEA;EACA,IAAI,OAAOZ,GAAG,KAAK,UAAU,EAAE;IAC9BoB,KAAK,GAAGpB,GAAG,CAACsB,IAAI,CAACT,MAAM,EAAED,GAAG,EAAEQ,KAAK,CAAC;EACrC;;EAEA;EACA,QAAQ,OAAOA,KAAK;IACnB,KAAK,QAAQ;MACZ,OAAOnB,KAAK,CAACmB,KAAK,CAAC;IAEpB,KAAK,QAAQ;MACZ;MACA,OAAOG,QAAQ,CAACH,KAAK,CAAC,GAAGI,MAAM,CAACJ,KAAK,CAAC,GAAG,MAAM;IAEhD,KAAK,SAAS;IACd,KAAK,MAAM;MACV;MACA;MACA;MACA,OAAOI,MAAM,CAACJ,KAAK,CAAC;IAErB,KAAK,QAAQ;MACZ,IAAI,CAACA,KAAK,EAAE;QACX,OAAO,MAAM;MACd;MACAvB,GAAG,IAAIC,MAAM;MACbqB,OAAO,GAAG,EAAE;;MAEZ;MACA,IAAIM,MAAM,CAACC,SAAS,CAACjB,QAAQ,CAACkB,KAAK,CAACP,KAAK,CAAC,KAAK,gBAAgB,EAAE;QAChEH,MAAM,GAAGG,KAAK,CAACH,MAAM;QACrB,KAAKH,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGG,MAAM,EAAEH,CAAC,IAAI,CAAC,EAAE;UAC/BK,OAAO,CAACL,CAAC,CAAC,GAAGH,GAAG,CAACG,CAAC,EAAEM,KAAK,CAAC,IAAI,MAAM;QACrC;;QAEA;QACAJ,CAAC,GAAGG,OAAO,CAACF,MAAM,KAAK,CAAC,GAAG,IAAI,GAAGpB,GAAG,GAClC,KAAK,GAAGA,GAAG,GAAGsB,OAAO,CAACS,IAAI,CAAC,KAAK,GAAG/B,GAAG,CAAC,GAAG,IAAI,GAAGqB,IAAI,GAAG,GAAG,GAC3D,GAAG,GAAGC,OAAO,CAACS,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG;QAChC/B,GAAG,GAAGqB,IAAI;QACV,OAAOF,CAAC;MACT;;MAEA;MACA,IAAIhB,GAAG,IAAI,OAAOA,GAAG,KAAK,QAAQ,EAAE;QACnCiB,MAAM,GAAGjB,GAAG,CAACiB,MAAM;QACnB,KAAKH,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGG,MAAM,EAAEH,CAAC,IAAI,CAAC,EAAE;UAC/BC,CAAC,GAAGf,GAAG,CAACc,CAAC,CAAC;UACV,IAAI,OAAOC,CAAC,KAAK,QAAQ,EAAE;YAC1BC,CAAC,GAAGL,GAAG,CAACI,CAAC,EAAEK,KAAK,CAAC;YACjB,IAAIJ,CAAC,EAAE;cACNG,OAAO,CAACU,IAAI,CAAC5B,KAAK,CAACc,CAAC,CAAC,IAAIlB,GAAG,GAAG,IAAI,GAAG,GAAG,CAAC,GAAGmB,CAAC,CAAC;YAChD;UACD;QACD;MACD,CAAC,MAAM;QACN;QACA,KAAKD,CAAC,IAAIK,KAAK,EAAE;UAChB,IAAIK,MAAM,CAACC,SAAS,CAACI,cAAc,CAACR,IAAI,CAACF,KAAK,EAAEL,CAAC,CAAC,EAAE;YACnDC,CAAC,GAAGL,GAAG,CAACI,CAAC,EAAEK,KAAK,CAAC;YACjB,IAAIJ,CAAC,EAAE;cACNG,OAAO,CAACU,IAAI,CAAC5B,KAAK,CAACc,CAAC,CAAC,IAAIlB,GAAG,GAAG,IAAI,GAAG,GAAG,CAAC,GAAGmB,CAAC,CAAC;YAChD;UACD;QACD;MACD;;MAEA;;MAEAA,CAAC,GAAGG,OAAO,CAACF,MAAM,KAAK,CAAC,GAAG,IAAI,GAAGpB,GAAG,GAClC,KAAK,GAAGA,GAAG,GAAGsB,OAAO,CAACS,IAAI,CAAC,KAAK,GAAG/B,GAAG,CAAC,GAAG,IAAI,GAAGqB,IAAI,GAAG,GAAG,GAC3D,GAAG,GAAGC,OAAO,CAACS,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG;MAChC/B,GAAG,GAAGqB,IAAI;MACV,OAAOF,CAAC;IACT;EACD;AACD;AAEAe,MAAM,CAACC,OAAO,GAAG,UAAUZ,KAAK,EAAEa,QAAQ,EAAEC,KAAK,EAAE;EAClD,IAAIpB,CAAC;EACLjB,GAAG,GAAG,EAAE;EACRC,MAAM,GAAG,EAAE;;EAEX;EACA,IAAI,OAAOoC,KAAK,KAAK,QAAQ,EAAE;IAC9B,KAAKpB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGoB,KAAK,EAAEpB,CAAC,IAAI,CAAC,EAAE;MAC9BhB,MAAM,IAAI,GAAG;IACd;EACD,CAAC,MAAM,IAAI,OAAOoC,KAAK,KAAK,QAAQ,EAAE;IACrC;IACApC,MAAM,GAAGoC,KAAK;EACf;;EAEA;EACAlC,GAAG,GAAGiC,QAAQ;EACd,IACCA,QAAQ,IACL,OAAOA,QAAQ,KAAK,UAAU,KAC7B,OAAOA,QAAQ,KAAK,QAAQ,IAAI,OAAOA,QAAQ,CAAChB,MAAM,KAAK,QAAQ,CAAC,EACvE;IACD,MAAM,IAAIkB,KAAK,CAAC,gBAAgB,CAAC;EAClC;;EAEA;EACA;EACA,OAAOxB,GAAG,CAAC,EAAE,EAAE;IAAE,EAAE,EAAES;EAAM,CAAC,CAAC;AAC9B,CAAC"},"metadata":{},"sourceType":"script"}