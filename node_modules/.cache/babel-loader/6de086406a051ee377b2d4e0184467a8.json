{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useSettings } from 'contexts/SettingsContext';\nimport { useAmbVersion } from 'hooks/useAmbVersion';\nimport { useTotalConfirms } from 'hooks/useTotalConfirms';\nimport { useValidatorsContract } from 'hooks/useValidatorsContract';\nimport { networks } from 'lib/networks';\nimport { useCallback, useMemo } from 'react';\nexport const useBridgeDirection = () => {\n  _s();\n  const {\n    bridgeDirection\n  } = useSettings();\n  const bridgeConfig = useMemo(() => networks[bridgeDirection] || Object.values(networks)[0], [bridgeDirection]);\n  const {\n    homeChainId,\n    foreignChainId,\n    ambLiveMonitorPrefix,\n    homeGraphName,\n    foreignGraphName,\n    homeAmbAddress,\n    foreignAmbAddress\n  } = bridgeConfig;\n  const foreignAmbVersion = useAmbVersion(foreignChainId, foreignAmbAddress);\n  const {\n    requiredSignatures,\n    validatorList\n  } = useValidatorsContract(foreignChainId, foreignAmbAddress);\n  const {\n    homeTotalConfirms,\n    foreignTotalConfirms\n  } = useTotalConfirms(homeChainId, foreignChainId, homeAmbAddress, foreignAmbAddress);\n  const getBridgeChainId = useCallback(chainId => chainId === homeChainId ? foreignChainId : homeChainId, [homeChainId, foreignChainId]);\n  const getMonitorUrl = useCallback((chainId, hash) => `${ambLiveMonitorPrefix}/${chainId}/${hash}`, [ambLiveMonitorPrefix]);\n  const getGraphEndpoint = useCallback(chainId => {\n    const subgraphName = homeChainId === chainId ? homeGraphName : foreignGraphName;\n    return `https://api.thegraph.com/subgraphs/name/${subgraphName}`;\n  }, [foreignGraphName, homeChainId, homeGraphName]);\n  const getAMBAddress = useCallback(chainId => chainId === homeChainId ? homeAmbAddress : foreignAmbAddress, [homeChainId, homeAmbAddress, foreignAmbAddress]);\n  const getTotalConfirms = useCallback(chainId => chainId === homeChainId ? homeTotalConfirms : foreignTotalConfirms, [homeChainId, homeTotalConfirms, foreignTotalConfirms]);\n  return {\n    bridgeDirection,\n    getBridgeChainId,\n    getMonitorUrl,\n    getGraphEndpoint,\n    getAMBAddress,\n    foreignAmbVersion,\n    homeTotalConfirms,\n    foreignTotalConfirms,\n    getTotalConfirms,\n    requiredSignatures,\n    validatorList,\n    ...bridgeConfig\n  };\n};\n_s(useBridgeDirection, \"QVB7XrkP9QLTIUg9ITw4stkae0g=\", false, function () {\n  return [useSettings, useAmbVersion, useValidatorsContract, useTotalConfirms];\n});","map":{"version":3,"names":["useSettings","useAmbVersion","useTotalConfirms","useValidatorsContract","networks","useCallback","useMemo","useBridgeDirection","_s","bridgeDirection","bridgeConfig","Object","values","homeChainId","foreignChainId","ambLiveMonitorPrefix","homeGraphName","foreignGraphName","homeAmbAddress","foreignAmbAddress","foreignAmbVersion","requiredSignatures","validatorList","homeTotalConfirms","foreignTotalConfirms","getBridgeChainId","chainId","getMonitorUrl","hash","getGraphEndpoint","subgraphName","getAMBAddress","getTotalConfirms"],"sources":["/home/hightop/bahamas_bridge/omnibridge-ui/packages/dapp/src/hooks/useBridgeDirection.js"],"sourcesContent":["import { useSettings } from 'contexts/SettingsContext';\nimport { useAmbVersion } from 'hooks/useAmbVersion';\nimport { useTotalConfirms } from 'hooks/useTotalConfirms';\nimport { useValidatorsContract } from 'hooks/useValidatorsContract';\nimport { networks } from 'lib/networks';\nimport { useCallback, useMemo } from 'react';\n\nexport const useBridgeDirection = () => {\n  const { bridgeDirection } = useSettings();\n  const bridgeConfig = useMemo(\n    () => networks[bridgeDirection] || Object.values(networks)[0],\n    [bridgeDirection],\n  );\n\n  const {\n    homeChainId,\n    foreignChainId,\n    ambLiveMonitorPrefix,\n    homeGraphName,\n    foreignGraphName,\n    homeAmbAddress,\n    foreignAmbAddress,\n  } = bridgeConfig;\n\n  const foreignAmbVersion = useAmbVersion(foreignChainId, foreignAmbAddress);\n\n  const { requiredSignatures, validatorList } = useValidatorsContract(\n    foreignChainId,\n    foreignAmbAddress,\n  );\n\n  const { homeTotalConfirms, foreignTotalConfirms } = useTotalConfirms(\n    homeChainId,\n    foreignChainId,\n    homeAmbAddress,\n    foreignAmbAddress,\n  );\n\n  const getBridgeChainId = useCallback(\n    chainId => (chainId === homeChainId ? foreignChainId : homeChainId),\n    [homeChainId, foreignChainId],\n  );\n\n  const getMonitorUrl = useCallback(\n    (chainId, hash) => `${ambLiveMonitorPrefix}/${chainId}/${hash}`,\n    [ambLiveMonitorPrefix],\n  );\n\n  const getGraphEndpoint = useCallback(\n    chainId => {\n      const subgraphName =\n        homeChainId === chainId ? homeGraphName : foreignGraphName;\n      return `https://api.thegraph.com/subgraphs/name/${subgraphName}`;\n    },\n    [foreignGraphName, homeChainId, homeGraphName],\n  );\n\n  const getAMBAddress = useCallback(\n    chainId => (chainId === homeChainId ? homeAmbAddress : foreignAmbAddress),\n    [homeChainId, homeAmbAddress, foreignAmbAddress],\n  );\n\n  const getTotalConfirms = useCallback(\n    chainId =>\n      chainId === homeChainId ? homeTotalConfirms : foreignTotalConfirms,\n    [homeChainId, homeTotalConfirms, foreignTotalConfirms],\n  );\n\n  return {\n    bridgeDirection,\n    getBridgeChainId,\n    getMonitorUrl,\n    getGraphEndpoint,\n    getAMBAddress,\n    foreignAmbVersion,\n    homeTotalConfirms,\n    foreignTotalConfirms,\n    getTotalConfirms,\n    requiredSignatures,\n    validatorList,\n    ...bridgeConfig,\n  };\n};\n"],"mappings":";AAAA,SAASA,WAAW,QAAQ,0BAA0B;AACtD,SAASC,aAAa,QAAQ,qBAAqB;AACnD,SAASC,gBAAgB,QAAQ,wBAAwB;AACzD,SAASC,qBAAqB,QAAQ,6BAA6B;AACnE,SAASC,QAAQ,QAAQ,cAAc;AACvC,SAASC,WAAW,EAAEC,OAAO,QAAQ,OAAO;AAE5C,OAAO,MAAMC,kBAAkB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtC,MAAM;IAAEC;EAAgB,CAAC,GAAGT,WAAW,CAAC,CAAC;EACzC,MAAMU,YAAY,GAAGJ,OAAO,CAC1B,MAAMF,QAAQ,CAACK,eAAe,CAAC,IAAIE,MAAM,CAACC,MAAM,CAACR,QAAQ,CAAC,CAAC,CAAC,CAAC,EAC7D,CAACK,eAAe,CAClB,CAAC;EAED,MAAM;IACJI,WAAW;IACXC,cAAc;IACdC,oBAAoB;IACpBC,aAAa;IACbC,gBAAgB;IAChBC,cAAc;IACdC;EACF,CAAC,GAAGT,YAAY;EAEhB,MAAMU,iBAAiB,GAAGnB,aAAa,CAACa,cAAc,EAAEK,iBAAiB,CAAC;EAE1E,MAAM;IAAEE,kBAAkB;IAAEC;EAAc,CAAC,GAAGnB,qBAAqB,CACjEW,cAAc,EACdK,iBACF,CAAC;EAED,MAAM;IAAEI,iBAAiB;IAAEC;EAAqB,CAAC,GAAGtB,gBAAgB,CAClEW,WAAW,EACXC,cAAc,EACdI,cAAc,EACdC,iBACF,CAAC;EAED,MAAMM,gBAAgB,GAAGpB,WAAW,CAClCqB,OAAO,IAAKA,OAAO,KAAKb,WAAW,GAAGC,cAAc,GAAGD,WAAY,EACnE,CAACA,WAAW,EAAEC,cAAc,CAC9B,CAAC;EAED,MAAMa,aAAa,GAAGtB,WAAW,CAC/B,CAACqB,OAAO,EAAEE,IAAI,KAAM,GAAEb,oBAAqB,IAAGW,OAAQ,IAAGE,IAAK,EAAC,EAC/D,CAACb,oBAAoB,CACvB,CAAC;EAED,MAAMc,gBAAgB,GAAGxB,WAAW,CAClCqB,OAAO,IAAI;IACT,MAAMI,YAAY,GAChBjB,WAAW,KAAKa,OAAO,GAAGV,aAAa,GAAGC,gBAAgB;IAC5D,OAAQ,2CAA0Ca,YAAa,EAAC;EAClE,CAAC,EACD,CAACb,gBAAgB,EAAEJ,WAAW,EAAEG,aAAa,CAC/C,CAAC;EAED,MAAMe,aAAa,GAAG1B,WAAW,CAC/BqB,OAAO,IAAKA,OAAO,KAAKb,WAAW,GAAGK,cAAc,GAAGC,iBAAkB,EACzE,CAACN,WAAW,EAAEK,cAAc,EAAEC,iBAAiB,CACjD,CAAC;EAED,MAAMa,gBAAgB,GAAG3B,WAAW,CAClCqB,OAAO,IACLA,OAAO,KAAKb,WAAW,GAAGU,iBAAiB,GAAGC,oBAAoB,EACpE,CAACX,WAAW,EAAEU,iBAAiB,EAAEC,oBAAoB,CACvD,CAAC;EAED,OAAO;IACLf,eAAe;IACfgB,gBAAgB;IAChBE,aAAa;IACbE,gBAAgB;IAChBE,aAAa;IACbX,iBAAiB;IACjBG,iBAAiB;IACjBC,oBAAoB;IACpBQ,gBAAgB;IAChBX,kBAAkB;IAClBC,aAAa;IACb,GAAGZ;EACL,CAAC;AACH,CAAC;AAACF,EAAA,CA3EWD,kBAAkB;EAAA,QACDP,WAAW,EAgBbC,aAAa,EAEOE,qBAAqB,EAKfD,gBAAgB;AAAA"},"metadata":{},"sourceType":"module"}