{"ast":null,"code":"import { fill, isThenable, loadModule, logger } from '@sentry/utils';\nimport { IS_DEBUG_BUILD } from '../../flags';\n/** Tracing integration for node-postgres package */\nvar Postgres = /** @class */function () {\n  function Postgres(options) {\n    if (options === void 0) {\n      options = {};\n    }\n    /**\n     * @inheritDoc\n     */\n    this.name = Postgres.id;\n    this._usePgNative = !!options.usePgNative;\n  }\n  /**\n   * @inheritDoc\n   */\n  Postgres.prototype.setupOnce = function (_, getCurrentHub) {\n    var _a;\n    var pkg = loadModule('pg');\n    if (!pkg) {\n      IS_DEBUG_BUILD && logger.error('Postgres Integration was unable to require `pg` package.');\n      return;\n    }\n    if (this._usePgNative && !((_a = pkg.native) === null || _a === void 0 ? void 0 : _a.Client)) {\n      IS_DEBUG_BUILD && logger.error(\"Postgres Integration was unable to access 'pg-native' bindings.\");\n      return;\n    }\n    var Client = (this._usePgNative ? pkg.native : pkg).Client;\n    /**\n     * function (query, callback) => void\n     * function (query, params, callback) => void\n     * function (query) => Promise\n     * function (query, params) => Promise\n     * function (pg.Cursor) => pg.Cursor\n     */\n    fill(Client.prototype, 'query', function (orig) {\n      return function (config, values, callback) {\n        var _a, _b, _c;\n        var scope = getCurrentHub().getScope();\n        var parentSpan = (_a = scope) === null || _a === void 0 ? void 0 : _a.getSpan();\n        var span = (_b = parentSpan) === null || _b === void 0 ? void 0 : _b.startChild({\n          description: typeof config === 'string' ? config : config.text,\n          op: 'db'\n        });\n        if (typeof callback === 'function') {\n          return orig.call(this, config, values, function (err, result) {\n            var _a;\n            (_a = span) === null || _a === void 0 ? void 0 : _a.finish();\n            callback(err, result);\n          });\n        }\n        if (typeof values === 'function') {\n          return orig.call(this, config, function (err, result) {\n            var _a;\n            (_a = span) === null || _a === void 0 ? void 0 : _a.finish();\n            values(err, result);\n          });\n        }\n        var rv = typeof values !== 'undefined' ? orig.call(this, config, values) : orig.call(this, config);\n        if (isThenable(rv)) {\n          return rv.then(function (res) {\n            var _a;\n            (_a = span) === null || _a === void 0 ? void 0 : _a.finish();\n            return res;\n          });\n        }\n        (_c = span) === null || _c === void 0 ? void 0 : _c.finish();\n        return rv;\n      };\n    });\n  };\n  /**\n   * @inheritDoc\n   */\n  Postgres.id = 'Postgres';\n  return Postgres;\n}();\nexport { Postgres };","map":{"version":3,"sources":["../../../../../src/integrations/node/postgres.ts"],"names":[],"mappings":"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","sourcesContent":["import { Hub } from '@sentry/hub';\nimport { EventProcessor, Integration } from '@sentry/types';\nimport { fill, isThenable, loadModule, logger } from '@sentry/utils';\n\nimport { IS_DEBUG_BUILD } from '../../flags';\n\ninterface PgClient {\n  prototype: {\n    query: () => void | Promise<unknown>;\n  };\n}\n\ninterface PgOptions {\n  usePgNative?: boolean;\n}\n\n/** Tracing integration for node-postgres package */\nexport class Postgres implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'Postgres';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = Postgres.id;\n\n  private _usePgNative: boolean;\n\n  public constructor(options: PgOptions = {}) {\n    this._usePgNative = !!options.usePgNative;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(_: (callback: EventProcessor) => void, getCurrentHub: () => Hub): void {\n    const pkg = loadModule<{ Client: PgClient; native: { Client: PgClient } }>('pg');\n\n    if (!pkg) {\n      IS_DEBUG_BUILD && logger.error('Postgres Integration was unable to require `pg` package.');\n      return;\n    }\n\n    if (this._usePgNative && !pkg.native?.Client) {\n      IS_DEBUG_BUILD && logger.error(\"Postgres Integration was unable to access 'pg-native' bindings.\");\n      return;\n    }\n\n    const { Client } = this._usePgNative ? pkg.native : pkg;\n\n    /**\n     * function (query, callback) => void\n     * function (query, params, callback) => void\n     * function (query) => Promise\n     * function (query, params) => Promise\n     * function (pg.Cursor) => pg.Cursor\n     */\n    fill(Client.prototype, 'query', function (orig: () => void | Promise<unknown>) {\n      return function (this: unknown, config: unknown, values: unknown, callback: unknown) {\n        const scope = getCurrentHub().getScope();\n        const parentSpan = scope?.getSpan();\n        const span = parentSpan?.startChild({\n          description: typeof config === 'string' ? config : (config as { text: string }).text,\n          op: 'db',\n        });\n\n        if (typeof callback === 'function') {\n          return orig.call(this, config, values, function (err: Error, result: unknown) {\n            span?.finish();\n            callback(err, result);\n          });\n        }\n\n        if (typeof values === 'function') {\n          return orig.call(this, config, function (err: Error, result: unknown) {\n            span?.finish();\n            values(err, result);\n          });\n        }\n\n        const rv = typeof values !== 'undefined' ? orig.call(this, config, values) : orig.call(this, config);\n\n        if (isThenable(rv)) {\n          return rv.then((res: unknown) => {\n            span?.finish();\n            return res;\n          });\n        }\n\n        span?.finish();\n        return rv;\n      };\n    });\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}