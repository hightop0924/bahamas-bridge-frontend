{"ast":null,"code":"import { ethers } from 'ethers';\nimport memoize from 'fast-memoize';\nimport { LOCAL_STORAGE_KEYS } from 'lib/constants';\nimport { getNetworkLabel, getRPCUrl, logError } from 'lib/helpers';\nconst {\n  MAINNET_RPC_URL,\n  KOVAN_RPC_URL,\n  BSC_RPC_URL,\n  SOKOL_RPC_URL,\n  POA_RPC_URL,\n  XDAI_RPC_URL\n} = LOCAL_STORAGE_KEYS;\nconst LOCAL_STORAGE_KEYS_MAP = {\n  1: MAINNET_RPC_URL,\n  42: KOVAN_RPC_URL,\n  56: BSC_RPC_URL,\n  77: SOKOL_RPC_URL,\n  99: POA_RPC_URL,\n  100: XDAI_RPC_URL\n};\nconst NETWORK_TIMEOUT = 1000;\nconst memoized = memoize(url => new ethers.providers.StaticJsonRpcProvider(url));\nconst checkRPCHealth = async url => {\n  if (!url) return null;\n  const tempProvider = memoized(url);\n  if (!tempProvider) return null;\n  try {\n    await Promise.race([\n    // eslint-disable-next-line no-underscore-dangle\n    tempProvider._networkPromise, setTimeout(() => Promise.reject(new Error('Network timeout')).catch(() => null), NETWORK_TIMEOUT)]);\n    return tempProvider;\n  } catch (err) {\n    logError({\n      providerSetError: err.message + url\n    });\n    return null;\n  }\n};\nexport const getValidEthersProvider = async chainId => {\n  var _ref, _await$checkRPCHealth, _provider$connection;\n  const label = getNetworkLabel(chainId).toUpperCase();\n  const sessionStorageKey = `HEALTHY-RPC-URL-${label}`;\n  const sessionRPCUrl = window.sessionStorage.getItem(sessionStorageKey);\n  const localRPCUrl = window.localStorage.getItem(LOCAL_STORAGE_KEYS_MAP[chainId]);\n  const rpcURLs = getRPCUrl(chainId, true);\n  const provider = (_ref = (_await$checkRPCHealth = await checkRPCHealth(localRPCUrl)) !== null && _await$checkRPCHealth !== void 0 ? _await$checkRPCHealth : await checkRPCHealth(sessionRPCUrl)) !== null && _ref !== void 0 ? _ref : (await Promise.all(rpcURLs.map(checkRPCHealth))).filter(p => !!p)[0];\n  if (provider !== null && provider !== void 0 && (_provider$connection = provider.connection) !== null && _provider$connection !== void 0 && _provider$connection.url) {\n    window.sessionStorage.setItem(sessionStorageKey, provider.connection.url);\n  }\n  return provider !== null && provider !== void 0 ? provider : null;\n};","map":{"version":3,"names":["ethers","memoize","LOCAL_STORAGE_KEYS","getNetworkLabel","getRPCUrl","logError","MAINNET_RPC_URL","KOVAN_RPC_URL","BSC_RPC_URL","SOKOL_RPC_URL","POA_RPC_URL","XDAI_RPC_URL","LOCAL_STORAGE_KEYS_MAP","NETWORK_TIMEOUT","memoized","url","providers","StaticJsonRpcProvider","checkRPCHealth","tempProvider","Promise","race","_networkPromise","setTimeout","reject","Error","catch","err","providerSetError","message","getValidEthersProvider","chainId","_ref","_await$checkRPCHealth","_provider$connection","label","toUpperCase","sessionStorageKey","sessionRPCUrl","window","sessionStorage","getItem","localRPCUrl","localStorage","rpcURLs","provider","all","map","filter","p","connection","setItem"],"sources":["/home/hightop/bahamas_bridge/omnibridge-ui/packages/dapp/src/lib/providerHelpers.js"],"sourcesContent":["import { ethers } from 'ethers';\nimport memoize from 'fast-memoize';\nimport { LOCAL_STORAGE_KEYS } from 'lib/constants';\nimport { getNetworkLabel, getRPCUrl, logError } from 'lib/helpers';\n\nconst {\n  MAINNET_RPC_URL,\n  KOVAN_RPC_URL,\n  BSC_RPC_URL,\n  SOKOL_RPC_URL,\n  POA_RPC_URL,\n  XDAI_RPC_URL,\n} = LOCAL_STORAGE_KEYS;\n\nconst LOCAL_STORAGE_KEYS_MAP = {\n  1: MAINNET_RPC_URL,\n  42: KOVAN_RPC_URL,\n  56: BSC_RPC_URL,\n  77: SOKOL_RPC_URL,\n  99: POA_RPC_URL,\n  100: XDAI_RPC_URL,\n};\n\nconst NETWORK_TIMEOUT = 1000;\n\nconst memoized = memoize(\n  url => new ethers.providers.StaticJsonRpcProvider(url),\n);\n\nconst checkRPCHealth = async url => {\n  if (!url) return null;\n  const tempProvider = memoized(url);\n  if (!tempProvider) return null;\n  try {\n    await Promise.race([\n      // eslint-disable-next-line no-underscore-dangle\n      tempProvider._networkPromise,\n      setTimeout(\n        () => Promise.reject(new Error('Network timeout')).catch(() => null),\n        NETWORK_TIMEOUT,\n      ),\n    ]);\n    return tempProvider;\n  } catch (err) {\n    logError({ providerSetError: err.message + url });\n    return null;\n  }\n};\n\nexport const getValidEthersProvider = async chainId => {\n  const label = getNetworkLabel(chainId).toUpperCase();\n  const sessionStorageKey = `HEALTHY-RPC-URL-${label}`;\n\n  const sessionRPCUrl = window.sessionStorage.getItem(sessionStorageKey);\n  const localRPCUrl = window.localStorage.getItem(\n    LOCAL_STORAGE_KEYS_MAP[chainId],\n  );\n\n  const rpcURLs = getRPCUrl(chainId, true);\n\n  const provider =\n    (await checkRPCHealth(localRPCUrl)) ??\n    (await checkRPCHealth(sessionRPCUrl)) ??\n    (await Promise.all(rpcURLs.map(checkRPCHealth))).filter(p => !!p)[0];\n  if (provider?.connection?.url) {\n    window.sessionStorage.setItem(sessionStorageKey, provider.connection.url);\n  }\n\n  return provider ?? null;\n};\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,QAAQ;AAC/B,OAAOC,OAAO,MAAM,cAAc;AAClC,SAASC,kBAAkB,QAAQ,eAAe;AAClD,SAASC,eAAe,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,aAAa;AAElE,MAAM;EACJC,eAAe;EACfC,aAAa;EACbC,WAAW;EACXC,aAAa;EACbC,WAAW;EACXC;AACF,CAAC,GAAGT,kBAAkB;AAEtB,MAAMU,sBAAsB,GAAG;EAC7B,CAAC,EAAEN,eAAe;EAClB,EAAE,EAAEC,aAAa;EACjB,EAAE,EAAEC,WAAW;EACf,EAAE,EAAEC,aAAa;EACjB,EAAE,EAAEC,WAAW;EACf,GAAG,EAAEC;AACP,CAAC;AAED,MAAME,eAAe,GAAG,IAAI;AAE5B,MAAMC,QAAQ,GAAGb,OAAO,CACtBc,GAAG,IAAI,IAAIf,MAAM,CAACgB,SAAS,CAACC,qBAAqB,CAACF,GAAG,CACvD,CAAC;AAED,MAAMG,cAAc,GAAG,MAAMH,GAAG,IAAI;EAClC,IAAI,CAACA,GAAG,EAAE,OAAO,IAAI;EACrB,MAAMI,YAAY,GAAGL,QAAQ,CAACC,GAAG,CAAC;EAClC,IAAI,CAACI,YAAY,EAAE,OAAO,IAAI;EAC9B,IAAI;IACF,MAAMC,OAAO,CAACC,IAAI,CAAC;IACjB;IACAF,YAAY,CAACG,eAAe,EAC5BC,UAAU,CACR,MAAMH,OAAO,CAACI,MAAM,CAAC,IAAIC,KAAK,CAAC,iBAAiB,CAAC,CAAC,CAACC,KAAK,CAAC,MAAM,IAAI,CAAC,EACpEb,eACF,CAAC,CACF,CAAC;IACF,OAAOM,YAAY;EACrB,CAAC,CAAC,OAAOQ,GAAG,EAAE;IACZtB,QAAQ,CAAC;MAAEuB,gBAAgB,EAAED,GAAG,CAACE,OAAO,GAAGd;IAAI,CAAC,CAAC;IACjD,OAAO,IAAI;EACb;AACF,CAAC;AAED,OAAO,MAAMe,sBAAsB,GAAG,MAAMC,OAAO,IAAI;EAAA,IAAAC,IAAA,EAAAC,qBAAA,EAAAC,oBAAA;EACrD,MAAMC,KAAK,GAAGhC,eAAe,CAAC4B,OAAO,CAAC,CAACK,WAAW,CAAC,CAAC;EACpD,MAAMC,iBAAiB,GAAI,mBAAkBF,KAAM,EAAC;EAEpD,MAAMG,aAAa,GAAGC,MAAM,CAACC,cAAc,CAACC,OAAO,CAACJ,iBAAiB,CAAC;EACtE,MAAMK,WAAW,GAAGH,MAAM,CAACI,YAAY,CAACF,OAAO,CAC7C7B,sBAAsB,CAACmB,OAAO,CAChC,CAAC;EAED,MAAMa,OAAO,GAAGxC,SAAS,CAAC2B,OAAO,EAAE,IAAI,CAAC;EAExC,MAAMc,QAAQ,IAAAb,IAAA,IAAAC,qBAAA,GACX,MAAMf,cAAc,CAACwB,WAAW,CAAC,cAAAT,qBAAA,cAAAA,qBAAA,GACjC,MAAMf,cAAc,CAACoB,aAAa,CAAC,cAAAN,IAAA,cAAAA,IAAA,GACpC,CAAC,MAAMZ,OAAO,CAAC0B,GAAG,CAACF,OAAO,CAACG,GAAG,CAAC7B,cAAc,CAAC,CAAC,EAAE8B,MAAM,CAACC,CAAC,IAAI,CAAC,CAACA,CAAC,CAAC,CAAC,CAAC,CAAC;EACtE,IAAIJ,QAAQ,aAARA,QAAQ,gBAAAX,oBAAA,GAARW,QAAQ,CAAEK,UAAU,cAAAhB,oBAAA,eAApBA,oBAAA,CAAsBnB,GAAG,EAAE;IAC7BwB,MAAM,CAACC,cAAc,CAACW,OAAO,CAACd,iBAAiB,EAAEQ,QAAQ,CAACK,UAAU,CAACnC,GAAG,CAAC;EAC3E;EAEA,OAAO8B,QAAQ,aAARA,QAAQ,cAARA,QAAQ,GAAI,IAAI;AACzB,CAAC"},"metadata":{},"sourceType":"module"}