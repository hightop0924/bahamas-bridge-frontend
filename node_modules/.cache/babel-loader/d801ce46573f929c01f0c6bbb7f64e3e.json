{"ast":null,"code":"import { __read, __spread } from \"tslib\";\nimport { addGlobalEventProcessor, getCurrentHub } from '@sentry/core';\nimport { isInstanceOf } from '@sentry/utils';\nimport { exceptionFromError } from '../eventbuilder';\nvar DEFAULT_KEY = 'cause';\nvar DEFAULT_LIMIT = 5;\n/** Adds SDK info to an event. */\nvar LinkedErrors = /** @class */function () {\n  /**\n   * @inheritDoc\n   */\n  function LinkedErrors(options) {\n    if (options === void 0) {\n      options = {};\n    }\n    /**\n     * @inheritDoc\n     */\n    this.name = LinkedErrors.id;\n    this._key = options.key || DEFAULT_KEY;\n    this._limit = options.limit || DEFAULT_LIMIT;\n  }\n  /**\n   * @inheritDoc\n   */\n  LinkedErrors.prototype.setupOnce = function () {\n    addGlobalEventProcessor(function (event, hint) {\n      var self = getCurrentHub().getIntegration(LinkedErrors);\n      return self ? _handler(self._key, self._limit, event, hint) : event;\n    });\n  };\n  /**\n   * @inheritDoc\n   */\n  LinkedErrors.id = 'LinkedErrors';\n  return LinkedErrors;\n}();\nexport { LinkedErrors };\n/**\n * @inheritDoc\n */\nexport function _handler(key, limit, event, hint) {\n  if (!event.exception || !event.exception.values || !hint || !isInstanceOf(hint.originalException, Error)) {\n    return event;\n  }\n  var linkedErrors = _walkErrorTree(limit, hint.originalException, key);\n  event.exception.values = __spread(linkedErrors, event.exception.values);\n  return event;\n}\n/**\n * JSDOC\n */\nexport function _walkErrorTree(limit, error, key, stack) {\n  if (stack === void 0) {\n    stack = [];\n  }\n  if (!isInstanceOf(error[key], Error) || stack.length + 1 >= limit) {\n    return stack;\n  }\n  var exception = exceptionFromError(error[key]);\n  return _walkErrorTree(limit, error[key], key, __spread([exception], stack));\n}","map":{"version":3,"sources":["../../../../src/integrations/linkederrors.ts"],"names":[],"mappings":";AAAA,SAAS,uBAAuB,EAAE,aAAa,QAAQ,cAAc;AAErE,SAAS,YAAY,QAAQ,eAAe;AAE5C,SAAS,kBAAkB,QAAQ,iBAAiB;AAEpD,IAAM,WAAW,GAAG,OAAO;AAC3B,IAAM,aAAa,GAAG,CAAC;AAOvB;AACA,IAAA,YAAA,GAAA,aAAA,YAAA;EAqBE;;AAEG;EACH,SAAA,YAAA,CAAmB,OAA0C,EAAA;IAA1C,IAAA,OAAA,KAAA,KAAA,CAAA,EAAA;MAAA,OAAA,GAAA,CAAA,CAA0C;IAAA;IAlB7D;;AAEG;IACa,IAAA,CAAA,IAAI,GAAW,YAAY,CAAC,EAAE;IAgB5C,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,GAAG,IAAI,WAAW;IACtC,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,KAAK,IAAI,aAAa;EAC9C;EAEA;;AAEG;EACI,YAAA,CAAA,SAAA,CAAA,SAAS,GAAhB,YAAA;IACE,uBAAuB,CAAC,UAAC,KAAY,EAAE,IAAgB,EAAA;MACrD,IAAM,IAAI,GAAG,aAAa,CAAA,CAAE,CAAC,cAAc,CAAC,YAAY,CAAC;MACzD,OAAO,IAAI,GAAG,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,EAAE,KAAK,EAAE,IAAI,CAAC,GAAG,KAAK;IACrE,CAAC,CAAC;EACJ,CAAC;EApCD;;AAEG;EACW,YAAA,CAAA,EAAE,GAAW,cAAc;EAkC3C,OAAA,YAAC;CAAA,CAAA,CAAA;SAtCY,YAAY;AAwCzB;;AAEG;AACH,OAAM,SAAU,QAAQ,CAAC,GAAW,EAAE,KAAa,EAAE,KAAY,EAAE,IAAgB,EAAA;EACjF,IAAI,CAAC,KAAK,CAAC,SAAS,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,MAAM,IAAI,CAAC,IAAI,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,iBAAiB,EAAE,KAAK,CAAC,EAAE;IACxG,OAAO,KAAK;EACb;EACD,IAAM,YAAY,GAAG,cAAc,CAAC,KAAK,EAAE,IAAI,CAAC,iBAAkC,EAAE,GAAG,CAAC;EACxF,KAAK,CAAC,SAAS,CAAC,MAAM,GAAA,QAAA,CAAO,YAAY,EAAK,KAAK,CAAC,SAAS,CAAC,MAAM,CAAC;EACrE,OAAO,KAAK;AACd;AAEA;;AAEG;AACH,OAAM,SAAU,cAAc,CAAC,KAAa,EAAE,KAAoB,EAAE,GAAW,EAAE,KAAuB,EAAA;EAAvB,IAAA,KAAA,KAAA,KAAA,CAAA,EAAA;IAAA,KAAA,GAAA,EAAuB;EAAA;EACtG,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,KAAK,CAAC,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC,IAAI,KAAK,EAAE;IACjE,OAAO,KAAK;EACb;EACD,IAAM,SAAS,GAAG,kBAAkB,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;EAChD,OAAO,cAAc,CAAC,KAAK,EAAE,KAAK,CAAC,GAAG,CAAC,EAAE,GAAG,EAAA,QAAA,CAAA,CAAG,SAAS,CAAA,EAAK,KAAK,CAAA,CAAE;AACtE","sourcesContent":["import { addGlobalEventProcessor, getCurrentHub } from '@sentry/core';\nimport { Event, EventHint, Exception, ExtendedError, Integration } from '@sentry/types';\nimport { isInstanceOf } from '@sentry/utils';\n\nimport { exceptionFromError } from '../eventbuilder';\n\nconst DEFAULT_KEY = 'cause';\nconst DEFAULT_LIMIT = 5;\n\ninterface LinkedErrorsOptions {\n  key: string;\n  limit: number;\n}\n\n/** Adds SDK info to an event. */\nexport class LinkedErrors implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'LinkedErrors';\n\n  /**\n   * @inheritDoc\n   */\n  public readonly name: string = LinkedErrors.id;\n\n  /**\n   * @inheritDoc\n   */\n  private readonly _key: LinkedErrorsOptions['key'];\n\n  /**\n   * @inheritDoc\n   */\n  private readonly _limit: LinkedErrorsOptions['limit'];\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(options: Partial<LinkedErrorsOptions> = {}) {\n    this._key = options.key || DEFAULT_KEY;\n    this._limit = options.limit || DEFAULT_LIMIT;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    addGlobalEventProcessor((event: Event, hint?: EventHint) => {\n      const self = getCurrentHub().getIntegration(LinkedErrors);\n      return self ? _handler(self._key, self._limit, event, hint) : event;\n    });\n  }\n}\n\n/**\n * @inheritDoc\n */\nexport function _handler(key: string, limit: number, event: Event, hint?: EventHint): Event | null {\n  if (!event.exception || !event.exception.values || !hint || !isInstanceOf(hint.originalException, Error)) {\n    return event;\n  }\n  const linkedErrors = _walkErrorTree(limit, hint.originalException as ExtendedError, key);\n  event.exception.values = [...linkedErrors, ...event.exception.values];\n  return event;\n}\n\n/**\n * JSDOC\n */\nexport function _walkErrorTree(limit: number, error: ExtendedError, key: string, stack: Exception[] = []): Exception[] {\n  if (!isInstanceOf(error[key], Error) || stack.length + 1 >= limit) {\n    return stack;\n  }\n  const exception = exceptionFromError(error[key]);\n  return _walkErrorTree(limit, error[key], key, [exception, ...stack]);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}