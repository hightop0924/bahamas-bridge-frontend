{"ast":null,"code":"import { dsnToString, makeDsn, urlEncode } from '@sentry/utils';\nvar SENTRY_API_VERSION = '7';\n/**\n * Helper class to provide urls, headers and metadata that can be used to form\n * different types of requests to Sentry endpoints.\n * Supports both envelopes and regular event requests.\n *\n * @deprecated Please use APIDetails\n **/\nvar API = /** @class */function () {\n  /** Create a new instance of API */\n  function API(dsn, metadata, tunnel) {\n    if (metadata === void 0) {\n      metadata = {};\n    }\n    this.dsn = dsn;\n    this._dsnObject = makeDsn(dsn);\n    this.metadata = metadata;\n    this._tunnel = tunnel;\n  }\n  /** Returns the Dsn object. */\n  API.prototype.getDsn = function () {\n    return this._dsnObject;\n  };\n  /** Does this transport force envelopes? */\n  API.prototype.forceEnvelope = function () {\n    return !!this._tunnel;\n  };\n  /** Returns the prefix to construct Sentry ingestion API endpoints. */\n  API.prototype.getBaseApiEndpoint = function () {\n    return getBaseApiEndpoint(this._dsnObject);\n  };\n  /** Returns the store endpoint URL. */\n  API.prototype.getStoreEndpoint = function () {\n    return getStoreEndpoint(this._dsnObject);\n  };\n  /**\n   * Returns the store endpoint URL with auth in the query string.\n   *\n   * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.\n   */\n  API.prototype.getStoreEndpointWithUrlEncodedAuth = function () {\n    return getStoreEndpointWithUrlEncodedAuth(this._dsnObject);\n  };\n  /**\n   * Returns the envelope endpoint URL with auth in the query string.\n   *\n   * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.\n   */\n  API.prototype.getEnvelopeEndpointWithUrlEncodedAuth = function () {\n    return getEnvelopeEndpointWithUrlEncodedAuth(this._dsnObject, this._tunnel);\n  };\n  return API;\n}();\nexport { API };\n/** Initializes API Details */\nexport function initAPIDetails(dsn, metadata, tunnel) {\n  return {\n    initDsn: dsn,\n    metadata: metadata || {},\n    dsn: makeDsn(dsn),\n    tunnel: tunnel\n  };\n}\n/** Returns the prefix to construct Sentry ingestion API endpoints. */\nfunction getBaseApiEndpoint(dsn) {\n  var protocol = dsn.protocol ? dsn.protocol + \":\" : '';\n  var port = dsn.port ? \":\" + dsn.port : '';\n  return protocol + \"//\" + dsn.host + port + (dsn.path ? \"/\" + dsn.path : '') + \"/api/\";\n}\n/** Returns the ingest API endpoint for target. */\nfunction _getIngestEndpoint(dsn, target) {\n  return \"\" + getBaseApiEndpoint(dsn) + dsn.projectId + \"/\" + target + \"/\";\n}\n/** Returns a URL-encoded string with auth config suitable for a query string. */\nfunction _encodedAuth(dsn) {\n  return urlEncode({\n    // We send only the minimum set of required information. See\n    // https://github.com/getsentry/sentry-javascript/issues/2572.\n    sentry_key: dsn.publicKey,\n    sentry_version: SENTRY_API_VERSION\n  });\n}\n/** Returns the store endpoint URL. */\nfunction getStoreEndpoint(dsn) {\n  return _getIngestEndpoint(dsn, 'store');\n}\n/**\n * Returns the store endpoint URL with auth in the query string.\n *\n * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.\n */\nexport function getStoreEndpointWithUrlEncodedAuth(dsn) {\n  return getStoreEndpoint(dsn) + \"?\" + _encodedAuth(dsn);\n}\n/** Returns the envelope endpoint URL. */\nfunction _getEnvelopeEndpoint(dsn) {\n  return _getIngestEndpoint(dsn, 'envelope');\n}\n/**\n * Returns the envelope endpoint URL with auth in the query string.\n *\n * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.\n */\nexport function getEnvelopeEndpointWithUrlEncodedAuth(dsn, tunnel) {\n  return tunnel ? tunnel : _getEnvelopeEndpoint(dsn) + \"?\" + _encodedAuth(dsn);\n}\n/**\n * Returns an object that can be used in request headers.\n * This is needed for node and the old /store endpoint in sentry\n */\nexport function getRequestHeaders(dsn, clientName, clientVersion) {\n  // CHANGE THIS to use metadata but keep clientName and clientVersion compatible\n  var header = [\"Sentry sentry_version=\" + SENTRY_API_VERSION];\n  header.push(\"sentry_client=\" + clientName + \"/\" + clientVersion);\n  header.push(\"sentry_key=\" + dsn.publicKey);\n  if (dsn.pass) {\n    header.push(\"sentry_secret=\" + dsn.pass);\n  }\n  return {\n    'Content-Type': 'application/json',\n    'X-Sentry-Auth': header.join(', ')\n  };\n}\n/** Returns the url to the report dialog endpoint. */\nexport function getReportDialogEndpoint(dsnLike, dialogOptions) {\n  var dsn = makeDsn(dsnLike);\n  var endpoint = getBaseApiEndpoint(dsn) + \"embed/error-page/\";\n  var encodedOptions = \"dsn=\" + dsnToString(dsn);\n  for (var key in dialogOptions) {\n    if (key === 'dsn') {\n      continue;\n    }\n    if (key === 'user') {\n      if (!dialogOptions.user) {\n        continue;\n      }\n      if (dialogOptions.user.name) {\n        encodedOptions += \"&name=\" + encodeURIComponent(dialogOptions.user.name);\n      }\n      if (dialogOptions.user.email) {\n        encodedOptions += \"&email=\" + encodeURIComponent(dialogOptions.user.email);\n      }\n    } else {\n      encodedOptions += \"&\" + encodeURIComponent(key) + \"=\" + encodeURIComponent(dialogOptions[key]);\n    }\n  }\n  return endpoint + \"?\" + encodedOptions;\n}","map":{"version":3,"sources":["../../src/api.ts"],"names":[],"mappings":"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","sourcesContent":["import { DsnComponents, DsnLike, SdkMetadata } from '@sentry/types';\nimport { dsnToString, makeDsn, urlEncode } from '@sentry/utils';\n\nconst SENTRY_API_VERSION = '7';\n\n/**\n * Stores details about a Sentry SDK\n */\nexport interface APIDetails {\n  /** The DSN as passed to Sentry.init() */\n  initDsn: DsnLike;\n  /** Metadata about the SDK (name, version, etc) for inclusion in envelope headers */\n  metadata: SdkMetadata;\n  /** The internally used Dsn object. */\n  readonly dsn: DsnComponents;\n  /** The envelope tunnel to use. */\n  readonly tunnel?: string;\n}\n\n/**\n * Helper class to provide urls, headers and metadata that can be used to form\n * different types of requests to Sentry endpoints.\n * Supports both envelopes and regular event requests.\n *\n * @deprecated Please use APIDetails\n **/\nexport class API {\n  /** The DSN as passed to Sentry.init() */\n  public dsn: DsnLike;\n\n  /** Metadata about the SDK (name, version, etc) for inclusion in envelope headers */\n  public metadata: SdkMetadata;\n\n  /** The internally used Dsn object. */\n  private readonly _dsnObject: DsnComponents;\n\n  /** The envelope tunnel to use. */\n  private readonly _tunnel?: string;\n\n  /** Create a new instance of API */\n  public constructor(dsn: DsnLike, metadata: SdkMetadata = {}, tunnel?: string) {\n    this.dsn = dsn;\n    this._dsnObject = makeDsn(dsn);\n    this.metadata = metadata;\n    this._tunnel = tunnel;\n  }\n\n  /** Returns the Dsn object. */\n  public getDsn(): DsnComponents {\n    return this._dsnObject;\n  }\n\n  /** Does this transport force envelopes? */\n  public forceEnvelope(): boolean {\n    return !!this._tunnel;\n  }\n\n  /** Returns the prefix to construct Sentry ingestion API endpoints. */\n  public getBaseApiEndpoint(): string {\n    return getBaseApiEndpoint(this._dsnObject);\n  }\n\n  /** Returns the store endpoint URL. */\n  public getStoreEndpoint(): string {\n    return getStoreEndpoint(this._dsnObject);\n  }\n\n  /**\n   * Returns the store endpoint URL with auth in the query string.\n   *\n   * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.\n   */\n  public getStoreEndpointWithUrlEncodedAuth(): string {\n    return getStoreEndpointWithUrlEncodedAuth(this._dsnObject);\n  }\n\n  /**\n   * Returns the envelope endpoint URL with auth in the query string.\n   *\n   * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.\n   */\n  public getEnvelopeEndpointWithUrlEncodedAuth(): string {\n    return getEnvelopeEndpointWithUrlEncodedAuth(this._dsnObject, this._tunnel);\n  }\n}\n\n/** Initializes API Details */\nexport function initAPIDetails(dsn: DsnLike, metadata?: SdkMetadata, tunnel?: string): APIDetails {\n  return {\n    initDsn: dsn,\n    metadata: metadata || {},\n    dsn: makeDsn(dsn),\n    tunnel,\n  } as APIDetails;\n}\n\n/** Returns the prefix to construct Sentry ingestion API endpoints. */\nfunction getBaseApiEndpoint(dsn: DsnComponents): string {\n  const protocol = dsn.protocol ? `${dsn.protocol}:` : '';\n  const port = dsn.port ? `:${dsn.port}` : '';\n  return `${protocol}//${dsn.host}${port}${dsn.path ? `/${dsn.path}` : ''}/api/`;\n}\n\n/** Returns the ingest API endpoint for target. */\nfunction _getIngestEndpoint(dsn: DsnComponents, target: 'store' | 'envelope'): string {\n  return `${getBaseApiEndpoint(dsn)}${dsn.projectId}/${target}/`;\n}\n\n/** Returns a URL-encoded string with auth config suitable for a query string. */\nfunction _encodedAuth(dsn: DsnComponents): string {\n  return urlEncode({\n    // We send only the minimum set of required information. See\n    // https://github.com/getsentry/sentry-javascript/issues/2572.\n    sentry_key: dsn.publicKey,\n    sentry_version: SENTRY_API_VERSION,\n  });\n}\n\n/** Returns the store endpoint URL. */\nfunction getStoreEndpoint(dsn: DsnComponents): string {\n  return _getIngestEndpoint(dsn, 'store');\n}\n\n/**\n * Returns the store endpoint URL with auth in the query string.\n *\n * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.\n */\nexport function getStoreEndpointWithUrlEncodedAuth(dsn: DsnComponents): string {\n  return `${getStoreEndpoint(dsn)}?${_encodedAuth(dsn)}`;\n}\n\n/** Returns the envelope endpoint URL. */\nfunction _getEnvelopeEndpoint(dsn: DsnComponents): string {\n  return _getIngestEndpoint(dsn, 'envelope');\n}\n\n/**\n * Returns the envelope endpoint URL with auth in the query string.\n *\n * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.\n */\nexport function getEnvelopeEndpointWithUrlEncodedAuth(dsn: DsnComponents, tunnel?: string): string {\n  return tunnel ? tunnel : `${_getEnvelopeEndpoint(dsn)}?${_encodedAuth(dsn)}`;\n}\n\n/**\n * Returns an object that can be used in request headers.\n * This is needed for node and the old /store endpoint in sentry\n */\nexport function getRequestHeaders(\n  dsn: DsnComponents,\n  clientName: string,\n  clientVersion: string,\n): { [key: string]: string } {\n  // CHANGE THIS to use metadata but keep clientName and clientVersion compatible\n  const header = [`Sentry sentry_version=${SENTRY_API_VERSION}`];\n  header.push(`sentry_client=${clientName}/${clientVersion}`);\n  header.push(`sentry_key=${dsn.publicKey}`);\n  if (dsn.pass) {\n    header.push(`sentry_secret=${dsn.pass}`);\n  }\n  return {\n    'Content-Type': 'application/json',\n    'X-Sentry-Auth': header.join(', '),\n  };\n}\n\n/** Returns the url to the report dialog endpoint. */\nexport function getReportDialogEndpoint(\n  dsnLike: DsnLike,\n  dialogOptions: {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    [key: string]: any;\n    user?: { name?: string; email?: string };\n  },\n): string {\n  const dsn = makeDsn(dsnLike);\n  const endpoint = `${getBaseApiEndpoint(dsn)}embed/error-page/`;\n\n  let encodedOptions = `dsn=${dsnToString(dsn)}`;\n  for (const key in dialogOptions) {\n    if (key === 'dsn') {\n      continue;\n    }\n\n    if (key === 'user') {\n      if (!dialogOptions.user) {\n        continue;\n      }\n      if (dialogOptions.user.name) {\n        encodedOptions += `&name=${encodeURIComponent(dialogOptions.user.name)}`;\n      }\n      if (dialogOptions.user.email) {\n        encodedOptions += `&email=${encodeURIComponent(dialogOptions.user.email)}`;\n      }\n    } else {\n      encodedOptions += `&${encodeURIComponent(key)}=${encodeURIComponent(dialogOptions[key] as string)}`;\n    }\n  }\n\n  return `${endpoint}?${encodedOptions}`;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}