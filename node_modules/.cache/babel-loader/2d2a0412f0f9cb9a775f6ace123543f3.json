{"ast":null,"code":"import { getHealthStatus } from 'lib/graphHealth';\nimport { logDebug } from 'lib/helpers';\nimport { networks } from 'lib/networks';\nconst subgraphs = [];\nconsole.log(\"networks:\", networks);\nObject.values(networks).forEach(info => {\n  subgraphs.push(info.homeGraphName);\n  subgraphs.push(info.foreignGraphName);\n});\nconst {\n  REACT_APP_GRAPH_HEALTH_UPDATE_INTERVAL\n} = process.env;\nconst DEFAULT_GRAPH_HEALTH_UPDATE_INTERVAL = 60000;\nconst UPDATE_INTERVAL = REACT_APP_GRAPH_HEALTH_UPDATE_INTERVAL || DEFAULT_GRAPH_HEALTH_UPDATE_INTERVAL;\nclass GraphHealthStore {\n  constructor() {\n    this.graphHealth = {};\n    this.updateGraphHealth();\n  }\n  async updateGraphHealth() {\n    await Promise.all(subgraphs.map(async subgraph => {\n      const status = await getHealthStatus(subgraph);\n      this.graphHealth[subgraph] = status;\n    }));\n    logDebug('Updated Graph Health', this.graphHealth);\n    setTimeout(() => this.updateGraphHealth(), UPDATE_INTERVAL);\n  }\n  status() {\n    return this.graphHealth;\n  }\n}\nconst graphHealthStore = new GraphHealthStore();\nexport const getGraphHealth = () => graphHealthStore.status();","map":{"version":3,"names":["getHealthStatus","logDebug","networks","subgraphs","console","log","Object","values","forEach","info","push","homeGraphName","foreignGraphName","REACT_APP_GRAPH_HEALTH_UPDATE_INTERVAL","process","env","DEFAULT_GRAPH_HEALTH_UPDATE_INTERVAL","UPDATE_INTERVAL","GraphHealthStore","constructor","graphHealth","updateGraphHealth","Promise","all","map","subgraph","status","setTimeout","graphHealthStore","getGraphHealth"],"sources":["/home/hightop/bahamas_bridge/omnibridge-ui/packages/dapp/src/stores/graphHealth.js"],"sourcesContent":["import { getHealthStatus } from 'lib/graphHealth';\nimport { logDebug } from 'lib/helpers';\nimport { networks } from 'lib/networks';\n\nconst subgraphs = [];\nconsole.log(\"networks:\", networks);\nObject.values(networks).forEach(info => {\n  subgraphs.push(info.homeGraphName);\n  subgraphs.push(info.foreignGraphName);\n});\n\nconst { REACT_APP_GRAPH_HEALTH_UPDATE_INTERVAL } = process.env;\n\nconst DEFAULT_GRAPH_HEALTH_UPDATE_INTERVAL = 60000;\n\nconst UPDATE_INTERVAL =\n  REACT_APP_GRAPH_HEALTH_UPDATE_INTERVAL ||\n  DEFAULT_GRAPH_HEALTH_UPDATE_INTERVAL;\n\nclass GraphHealthStore {\n  graphHealth = {};\n\n  constructor() {\n    this.updateGraphHealth();\n  }\n\n  async updateGraphHealth() {\n    await Promise.all(\n      subgraphs.map(async subgraph => {\n        const status = await getHealthStatus(subgraph);\n        this.graphHealth[subgraph] = status;\n      }),\n    );\n    logDebug('Updated Graph Health', this.graphHealth);\n    setTimeout(() => this.updateGraphHealth(), UPDATE_INTERVAL);\n  }\n\n  status() {\n    return this.graphHealth;\n  }\n}\n\nconst graphHealthStore = new GraphHealthStore();\n\nexport const getGraphHealth = () => graphHealthStore.status();\n"],"mappings":"AAAA,SAASA,eAAe,QAAQ,iBAAiB;AACjD,SAASC,QAAQ,QAAQ,aAAa;AACtC,SAASC,QAAQ,QAAQ,cAAc;AAEvC,MAAMC,SAAS,GAAG,EAAE;AACpBC,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEH,QAAQ,CAAC;AAClCI,MAAM,CAACC,MAAM,CAACL,QAAQ,CAAC,CAACM,OAAO,CAACC,IAAI,IAAI;EACtCN,SAAS,CAACO,IAAI,CAACD,IAAI,CAACE,aAAa,CAAC;EAClCR,SAAS,CAACO,IAAI,CAACD,IAAI,CAACG,gBAAgB,CAAC;AACvC,CAAC,CAAC;AAEF,MAAM;EAAEC;AAAuC,CAAC,GAAGC,OAAO,CAACC,GAAG;AAE9D,MAAMC,oCAAoC,GAAG,KAAK;AAElD,MAAMC,eAAe,GACnBJ,sCAAsC,IACtCG,oCAAoC;AAEtC,MAAME,gBAAgB,CAAC;EAGrBC,WAAWA,CAAA,EAAG;IAAA,KAFdC,WAAW,GAAG,CAAC,CAAC;IAGd,IAAI,CAACC,iBAAiB,CAAC,CAAC;EAC1B;EAEA,MAAMA,iBAAiBA,CAAA,EAAG;IACxB,MAAMC,OAAO,CAACC,GAAG,CACfpB,SAAS,CAACqB,GAAG,CAAC,MAAMC,QAAQ,IAAI;MAC9B,MAAMC,MAAM,GAAG,MAAM1B,eAAe,CAACyB,QAAQ,CAAC;MAC9C,IAAI,CAACL,WAAW,CAACK,QAAQ,CAAC,GAAGC,MAAM;IACrC,CAAC,CACH,CAAC;IACDzB,QAAQ,CAAC,sBAAsB,EAAE,IAAI,CAACmB,WAAW,CAAC;IAClDO,UAAU,CAAC,MAAM,IAAI,CAACN,iBAAiB,CAAC,CAAC,EAAEJ,eAAe,CAAC;EAC7D;EAEAS,MAAMA,CAAA,EAAG;IACP,OAAO,IAAI,CAACN,WAAW;EACzB;AACF;AAEA,MAAMQ,gBAAgB,GAAG,IAAIV,gBAAgB,CAAC,CAAC;AAE/C,OAAO,MAAMW,cAAc,GAAGA,CAAA,KAAMD,gBAAgB,CAACF,MAAM,CAAC,CAAC"},"metadata":{},"sourceType":"module"}