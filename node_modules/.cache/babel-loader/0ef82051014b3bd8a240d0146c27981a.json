{"ast":null,"code":"import { IS_DEBUG_BUILD } from './flags';\nimport { getGlobalObject } from './global';\nimport { logger } from './logger';\n/**\n * Tells whether current environment supports ErrorEvent objects\n * {@link supportsErrorEvent}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsErrorEvent() {\n  try {\n    new ErrorEvent('');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n/**\n * Tells whether current environment supports DOMError objects\n * {@link supportsDOMError}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsDOMError() {\n  try {\n    // Chrome: VM89:1 Uncaught TypeError: Failed to construct 'DOMError':\n    // 1 argument required, but only 0 present.\n    // @ts-ignore It really needs 1 argument, not 0.\n    new DOMError('');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n/**\n * Tells whether current environment supports DOMException objects\n * {@link supportsDOMException}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsDOMException() {\n  try {\n    new DOMException('');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n/**\n * Tells whether current environment supports Fetch API\n * {@link supportsFetch}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsFetch() {\n  if (!('fetch' in getGlobalObject())) {\n    return false;\n  }\n  try {\n    new Headers();\n    new Request('');\n    new Response();\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n/**\n * isNativeFetch checks if the given function is a native implementation of fetch()\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function isNativeFetch(func) {\n  return func && /^function fetch\\(\\)\\s+\\{\\s+\\[native code\\]\\s+\\}$/.test(func.toString());\n}\n/**\n * Tells whether current environment supports Fetch API natively\n * {@link supportsNativeFetch}.\n *\n * @returns true if `window.fetch` is natively implemented, false otherwise\n */\nexport function supportsNativeFetch() {\n  if (!supportsFetch()) {\n    return false;\n  }\n  var global = getGlobalObject();\n  // Fast path to avoid DOM I/O\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  if (isNativeFetch(global.fetch)) {\n    return true;\n  }\n  // window.fetch is implemented, but is polyfilled or already wrapped (e.g: by a chrome extension)\n  // so create a \"pure\" iframe to see if that has native fetch\n  var result = false;\n  var doc = global.document;\n  // eslint-disable-next-line deprecation/deprecation\n  if (doc && typeof doc.createElement === 'function') {\n    try {\n      var sandbox = doc.createElement('iframe');\n      sandbox.hidden = true;\n      doc.head.appendChild(sandbox);\n      if (sandbox.contentWindow && sandbox.contentWindow.fetch) {\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        result = isNativeFetch(sandbox.contentWindow.fetch);\n      }\n      doc.head.removeChild(sandbox);\n    } catch (err) {\n      IS_DEBUG_BUILD && logger.warn('Could not create sandbox iframe for pure fetch check, bailing to window.fetch: ', err);\n    }\n  }\n  return result;\n}\n/**\n * Tells whether current environment supports ReportingObserver API\n * {@link supportsReportingObserver}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsReportingObserver() {\n  return 'ReportingObserver' in getGlobalObject();\n}\n/**\n * Tells whether current environment supports Referrer Policy API\n * {@link supportsReferrerPolicy}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsReferrerPolicy() {\n  // Despite all stars in the sky saying that Edge supports old draft syntax, aka 'never', 'always', 'origin' and 'default'\n  // (see https://caniuse.com/#feat=referrer-policy),\n  // it doesn't. And it throws an exception instead of ignoring this parameter...\n  // REF: https://github.com/getsentry/raven-js/issues/1233\n  if (!supportsFetch()) {\n    return false;\n  }\n  try {\n    new Request('_', {\n      referrerPolicy: 'origin'\n    });\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n/**\n * Tells whether current environment supports History API\n * {@link supportsHistory}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsHistory() {\n  // NOTE: in Chrome App environment, touching history.pushState, *even inside\n  //       a try/catch block*, will cause Chrome to output an error to console.error\n  // borrowed from: https://github.com/angular/angular.js/pull/13945/files\n  var global = getGlobalObject();\n  /* eslint-disable @typescript-eslint/no-unsafe-member-access */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  var chrome = global.chrome;\n  var isChromePackagedApp = chrome && chrome.app && chrome.app.runtime;\n  /* eslint-enable @typescript-eslint/no-unsafe-member-access */\n  var hasHistoryApi = 'history' in global && !!global.history.pushState && !!global.history.replaceState;\n  return !isChromePackagedApp && hasHistoryApi;\n}","map":{"version":3,"sources":["../../src/supports.ts"],"names":[],"mappings":"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","sourcesContent":["import { IS_DEBUG_BUILD } from './flags';\nimport { getGlobalObject } from './global';\nimport { logger } from './logger';\n\n/**\n * Tells whether current environment supports ErrorEvent objects\n * {@link supportsErrorEvent}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsErrorEvent(): boolean {\n  try {\n    new ErrorEvent('');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports DOMError objects\n * {@link supportsDOMError}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsDOMError(): boolean {\n  try {\n    // Chrome: VM89:1 Uncaught TypeError: Failed to construct 'DOMError':\n    // 1 argument required, but only 0 present.\n    // @ts-ignore It really needs 1 argument, not 0.\n    new DOMError('');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports DOMException objects\n * {@link supportsDOMException}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsDOMException(): boolean {\n  try {\n    new DOMException('');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports Fetch API\n * {@link supportsFetch}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsFetch(): boolean {\n  if (!('fetch' in getGlobalObject<Window>())) {\n    return false;\n  }\n\n  try {\n    new Headers();\n    new Request('');\n    new Response();\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n/**\n * isNativeFetch checks if the given function is a native implementation of fetch()\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function isNativeFetch(func: Function): boolean {\n  return func && /^function fetch\\(\\)\\s+\\{\\s+\\[native code\\]\\s+\\}$/.test(func.toString());\n}\n\n/**\n * Tells whether current environment supports Fetch API natively\n * {@link supportsNativeFetch}.\n *\n * @returns true if `window.fetch` is natively implemented, false otherwise\n */\nexport function supportsNativeFetch(): boolean {\n  if (!supportsFetch()) {\n    return false;\n  }\n\n  const global = getGlobalObject<Window>();\n\n  // Fast path to avoid DOM I/O\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  if (isNativeFetch(global.fetch)) {\n    return true;\n  }\n\n  // window.fetch is implemented, but is polyfilled or already wrapped (e.g: by a chrome extension)\n  // so create a \"pure\" iframe to see if that has native fetch\n  let result = false;\n  const doc = global.document;\n  // eslint-disable-next-line deprecation/deprecation\n  if (doc && typeof (doc.createElement as unknown) === 'function') {\n    try {\n      const sandbox = doc.createElement('iframe');\n      sandbox.hidden = true;\n      doc.head.appendChild(sandbox);\n      if (sandbox.contentWindow && sandbox.contentWindow.fetch) {\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        result = isNativeFetch(sandbox.contentWindow.fetch);\n      }\n      doc.head.removeChild(sandbox);\n    } catch (err) {\n      IS_DEBUG_BUILD &&\n        logger.warn('Could not create sandbox iframe for pure fetch check, bailing to window.fetch: ', err);\n    }\n  }\n\n  return result;\n}\n\n/**\n * Tells whether current environment supports ReportingObserver API\n * {@link supportsReportingObserver}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsReportingObserver(): boolean {\n  return 'ReportingObserver' in getGlobalObject();\n}\n\n/**\n * Tells whether current environment supports Referrer Policy API\n * {@link supportsReferrerPolicy}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsReferrerPolicy(): boolean {\n  // Despite all stars in the sky saying that Edge supports old draft syntax, aka 'never', 'always', 'origin' and 'default'\n  // (see https://caniuse.com/#feat=referrer-policy),\n  // it doesn't. And it throws an exception instead of ignoring this parameter...\n  // REF: https://github.com/getsentry/raven-js/issues/1233\n\n  if (!supportsFetch()) {\n    return false;\n  }\n\n  try {\n    new Request('_', {\n      referrerPolicy: 'origin' as ReferrerPolicy,\n    });\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports History API\n * {@link supportsHistory}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsHistory(): boolean {\n  // NOTE: in Chrome App environment, touching history.pushState, *even inside\n  //       a try/catch block*, will cause Chrome to output an error to console.error\n  // borrowed from: https://github.com/angular/angular.js/pull/13945/files\n  const global = getGlobalObject<Window>();\n  /* eslint-disable @typescript-eslint/no-unsafe-member-access */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const chrome = (global as any).chrome;\n  const isChromePackagedApp = chrome && chrome.app && chrome.app.runtime;\n  /* eslint-enable @typescript-eslint/no-unsafe-member-access */\n  const hasHistoryApi = 'history' in global && !!global.history.pushState && !!global.history.replaceState;\n\n  return !isChromePackagedApp && hasHistoryApi;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}