{"ast":null,"code":"/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { bindReporter } from './lib/bindReporter';\nimport { getVisibilityWatcher } from './lib/getVisibilityWatcher';\nimport { initMetric } from './lib/initMetric';\nimport { observe } from './lib/observe';\nimport { onHidden } from './lib/onHidden';\nvar reportedMetricIDs = {};\nexport var getLCP = function (onReport, reportAllChanges) {\n  var visibilityWatcher = getVisibilityWatcher();\n  var metric = initMetric('LCP');\n  var report;\n  var entryHandler = function (entry) {\n    // The startTime attribute returns the value of the renderTime if it is not 0,\n    // and the value of the loadTime otherwise.\n    var value = entry.startTime;\n    // If the page was hidden prior to paint time of the entry,\n    // ignore it and mark the metric as final, otherwise add the entry.\n    if (value < visibilityWatcher.firstHiddenTime) {\n      metric.value = value;\n      metric.entries.push(entry);\n    }\n    if (report) {\n      report();\n    }\n  };\n  var po = observe('largest-contentful-paint', entryHandler);\n  if (po) {\n    report = bindReporter(onReport, metric, reportAllChanges);\n    var stopListening_1 = function () {\n      if (!reportedMetricIDs[metric.id]) {\n        po.takeRecords().map(entryHandler);\n        po.disconnect();\n        reportedMetricIDs[metric.id] = true;\n        report(true);\n      }\n    };\n    // Stop listening after input. Note: while scrolling is an input that\n    // stop LCP observation, it's unreliable since it can be programmatically\n    // generated. See: https://github.com/GoogleChrome/web-vitals/issues/75\n    ['keydown', 'click'].forEach(function (type) {\n      addEventListener(type, stopListening_1, {\n        once: true,\n        capture: true\n      });\n    });\n    onHidden(stopListening_1, true);\n  }\n};","map":{"version":3,"sources":["../../../../../src/browser/web-vitals/getLCP.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;AAcG;AAEH,SAAS,YAAY,QAAQ,oBAAoB;AACjD,SAAS,oBAAoB,QAAQ,4BAA4B;AACjE,SAAS,UAAU,QAAQ,kBAAkB;AAC7C,SAAS,OAAO,QAAiC,eAAe;AAChE,SAAS,QAAQ,QAAQ,gBAAgB;AAczC,IAAM,iBAAiB,GAA4B,CAAA,CAAE;AAErD,OAAO,IAAM,MAAM,GAAG,SAAA,CAAC,QAAuB,EAAE,gBAA0B,EAAA;EACxE,IAAM,iBAAiB,GAAG,oBAAoB,CAAA,CAAE;EAChD,IAAM,MAAM,GAAG,UAAU,CAAC,KAAK,CAAC;EAChC,IAAI,MAAuC;EAE3C,IAAM,YAAY,GAAG,SAAA,CAAC,KAAuB,EAAA;IAC3C;IACA;IACA,IAAM,KAAK,GAAG,KAAK,CAAC,SAAS;IAE7B;IACA;IACA,IAAI,KAAK,GAAG,iBAAiB,CAAC,eAAe,EAAE;MAC7C,MAAM,CAAC,KAAK,GAAG,KAAK;MACpB,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC;IAC3B;IAED,IAAI,MAAM,EAAE;MACV,MAAM,CAAA,CAAE;IACT;EACH,CAAC;EAED,IAAM,EAAE,GAAG,OAAO,CAAC,0BAA0B,EAAE,YAAY,CAAC;EAE5D,IAAI,EAAE,EAAE;IACN,MAAM,GAAG,YAAY,CAAC,QAAQ,EAAE,MAAM,EAAE,gBAAgB,CAAC;IAEzD,IAAM,eAAa,GAAG,SAAA,CAAA,EAAA;MACpB,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE;QACjC,EAAE,CAAC,WAAW,CAAA,CAAE,CAAC,GAAG,CAAC,YAAuC,CAAC;QAC7D,EAAE,CAAC,UAAU,CAAA,CAAE;QACf,iBAAiB,CAAC,MAAM,CAAC,EAAE,CAAC,GAAG,IAAI;QACnC,MAAM,CAAC,IAAI,CAAC;MACb;IACH,CAAC;IAED;IACA;IACA;IACA,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC,OAAO,CAAC,UAAA,IAAI,EAAA;MAC/B,gBAAgB,CAAC,IAAI,EAAE,eAAa,EAAE;QAAE,IAAI,EAAE,IAAI;QAAE,OAAO,EAAE;MAAI,CAAE,CAAC;IACtE,CAAC,CAAC;IAEF,QAAQ,CAAC,eAAa,EAAE,IAAI,CAAC;EAC9B;AACH,CAAC","sourcesContent":["/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { bindReporter } from './lib/bindReporter';\nimport { getVisibilityWatcher } from './lib/getVisibilityWatcher';\nimport { initMetric } from './lib/initMetric';\nimport { observe, PerformanceEntryHandler } from './lib/observe';\nimport { onHidden } from './lib/onHidden';\nimport { ReportHandler } from './types';\n\n// https://wicg.github.io/largest-contentful-paint/#sec-largest-contentful-paint-interface\nexport interface LargestContentfulPaint extends PerformanceEntry {\n  renderTime: DOMHighResTimeStamp;\n  loadTime: DOMHighResTimeStamp;\n  size: number;\n  id: string;\n  url: string;\n  element?: Element;\n  toJSON(): Record<string, string>;\n}\n\nconst reportedMetricIDs: Record<string, boolean> = {};\n\nexport const getLCP = (onReport: ReportHandler, reportAllChanges?: boolean): void => {\n  const visibilityWatcher = getVisibilityWatcher();\n  const metric = initMetric('LCP');\n  let report: ReturnType<typeof bindReporter>;\n\n  const entryHandler = (entry: PerformanceEntry): void => {\n    // The startTime attribute returns the value of the renderTime if it is not 0,\n    // and the value of the loadTime otherwise.\n    const value = entry.startTime;\n\n    // If the page was hidden prior to paint time of the entry,\n    // ignore it and mark the metric as final, otherwise add the entry.\n    if (value < visibilityWatcher.firstHiddenTime) {\n      metric.value = value;\n      metric.entries.push(entry);\n    }\n\n    if (report) {\n      report();\n    }\n  };\n\n  const po = observe('largest-contentful-paint', entryHandler);\n\n  if (po) {\n    report = bindReporter(onReport, metric, reportAllChanges);\n\n    const stopListening = (): void => {\n      if (!reportedMetricIDs[metric.id]) {\n        po.takeRecords().map(entryHandler as PerformanceEntryHandler);\n        po.disconnect();\n        reportedMetricIDs[metric.id] = true;\n        report(true);\n      }\n    };\n\n    // Stop listening after input. Note: while scrolling is an input that\n    // stop LCP observation, it's unreliable since it can be programmatically\n    // generated. See: https://github.com/GoogleChrome/web-vitals/issues/75\n    ['keydown', 'click'].forEach(type => {\n      addEventListener(type, stopListening, { once: true, capture: true });\n    });\n\n    onHidden(stopListening, true);\n  }\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}