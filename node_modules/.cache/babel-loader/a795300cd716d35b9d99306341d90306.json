{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\nimport { browserPerformanceTimeOrigin, getGlobalObject, htmlTreeAsString, isNodeEnv, logger } from '@sentry/utils';\nimport { IS_DEBUG_BUILD } from '../flags';\nimport { msToSec } from '../utils';\nimport { getCLS } from './web-vitals/getCLS';\nimport { getFID } from './web-vitals/getFID';\nimport { getLCP } from './web-vitals/getLCP';\nimport { getVisibilityWatcher } from './web-vitals/lib/getVisibilityWatcher';\nvar global = getGlobalObject();\n/** Class tracking metrics  */\nvar MetricsInstrumentation = /** @class */function () {\n  function MetricsInstrumentation(_reportAllChanges) {\n    if (_reportAllChanges === void 0) {\n      _reportAllChanges = false;\n    }\n    this._reportAllChanges = _reportAllChanges;\n    this._measurements = {};\n    this._performanceCursor = 0;\n    if (!isNodeEnv() && global && global.performance && global.document) {\n      if (global.performance.mark) {\n        global.performance.mark('sentry-tracing-init');\n      }\n      this._trackCLS();\n      this._trackLCP();\n      this._trackFID();\n    }\n  }\n  /** Add performance related spans to a transaction */\n  MetricsInstrumentation.prototype.addPerformanceEntries = function (transaction) {\n    var _this = this;\n    if (!global || !global.performance || !global.performance.getEntries || !browserPerformanceTimeOrigin) {\n      // Gatekeeper if performance API not available\n      return;\n    }\n    IS_DEBUG_BUILD && logger.log('[Tracing] Adding & adjusting spans using Performance API');\n    var timeOrigin = msToSec(browserPerformanceTimeOrigin);\n    var responseStartTimestamp;\n    var requestStartTimestamp;\n    global.performance.getEntries().slice(this._performanceCursor).forEach(function (entry) {\n      var startTime = msToSec(entry.startTime);\n      var duration = msToSec(entry.duration);\n      if (transaction.op === 'navigation' && timeOrigin + startTime < transaction.startTimestamp) {\n        return;\n      }\n      switch (entry.entryType) {\n        case 'navigation':\n          {\n            addNavigationSpans(transaction, entry, timeOrigin);\n            responseStartTimestamp = timeOrigin + msToSec(entry.responseStart);\n            requestStartTimestamp = timeOrigin + msToSec(entry.requestStart);\n            break;\n          }\n        case 'mark':\n        case 'paint':\n        case 'measure':\n          {\n            var startTimestamp = addMeasureSpans(transaction, entry, startTime, duration, timeOrigin);\n            // capture web vitals\n            var firstHidden = getVisibilityWatcher();\n            // Only report if the page wasn't hidden prior to the web vital.\n            var shouldRecord = entry.startTime < firstHidden.firstHiddenTime;\n            if (entry.name === 'first-paint' && shouldRecord) {\n              IS_DEBUG_BUILD && logger.log('[Measurements] Adding FP');\n              _this._measurements['fp'] = {\n                value: entry.startTime\n              };\n              _this._measurements['mark.fp'] = {\n                value: startTimestamp\n              };\n            }\n            if (entry.name === 'first-contentful-paint' && shouldRecord) {\n              IS_DEBUG_BUILD && logger.log('[Measurements] Adding FCP');\n              _this._measurements['fcp'] = {\n                value: entry.startTime\n              };\n              _this._measurements['mark.fcp'] = {\n                value: startTimestamp\n              };\n            }\n            break;\n          }\n        case 'resource':\n          {\n            var resourceName = entry.name.replace(global.location.origin, '');\n            addResourceSpans(transaction, entry, resourceName, startTime, duration, timeOrigin);\n            break;\n          }\n        default:\n        // Ignore other entry types.\n      }\n    });\n\n    this._performanceCursor = Math.max(performance.getEntries().length - 1, 0);\n    this._trackNavigator(transaction);\n    // Measurements are only available for pageload transactions\n    if (transaction.op === 'pageload') {\n      // normalize applicable web vital values to be relative to transaction.startTimestamp\n      var timeOrigin_1 = msToSec(browserPerformanceTimeOrigin);\n      // Generate TTFB (Time to First Byte), which measured as the time between the beginning of the transaction and the\n      // start of the response in milliseconds\n      if (typeof responseStartTimestamp === 'number') {\n        IS_DEBUG_BUILD && logger.log('[Measurements] Adding TTFB');\n        this._measurements['ttfb'] = {\n          value: (responseStartTimestamp - transaction.startTimestamp) * 1000\n        };\n        if (typeof requestStartTimestamp === 'number' && requestStartTimestamp <= responseStartTimestamp) {\n          // Capture the time spent making the request and receiving the first byte of the response.\n          // This is the time between the start of the request and the start of the response in milliseconds.\n          this._measurements['ttfb.requestTime'] = {\n            value: (responseStartTimestamp - requestStartTimestamp) * 1000\n          };\n        }\n      }\n      ['fcp', 'fp', 'lcp'].forEach(function (name) {\n        if (!_this._measurements[name] || timeOrigin_1 >= transaction.startTimestamp) {\n          return;\n        }\n        // The web vitals, fcp, fp, lcp, and ttfb, all measure relative to timeOrigin.\n        // Unfortunately, timeOrigin is not captured within the transaction span data, so these web vitals will need\n        // to be adjusted to be relative to transaction.startTimestamp.\n        var oldValue = _this._measurements[name].value;\n        var measurementTimestamp = timeOrigin_1 + msToSec(oldValue);\n        // normalizedValue should be in milliseconds\n        var normalizedValue = Math.abs((measurementTimestamp - transaction.startTimestamp) * 1000);\n        var delta = normalizedValue - oldValue;\n        IS_DEBUG_BUILD && logger.log(\"[Measurements] Normalized \" + name + \" from \" + oldValue + \" to \" + normalizedValue + \" (\" + delta + \")\");\n        _this._measurements[name].value = normalizedValue;\n      });\n      if (this._measurements['mark.fid'] && this._measurements['fid']) {\n        // create span for FID\n        _startChild(transaction, {\n          description: 'first input delay',\n          endTimestamp: this._measurements['mark.fid'].value + msToSec(this._measurements['fid'].value),\n          op: 'web.vitals',\n          startTimestamp: this._measurements['mark.fid'].value\n        });\n      }\n      // If FCP is not recorded we should not record the cls value\n      // according to the new definition of CLS.\n      if (!('fcp' in this._measurements)) {\n        delete this._measurements.cls;\n      }\n      transaction.setMeasurements(this._measurements);\n      tagMetricInfo(transaction, this._lcpEntry, this._clsEntry);\n      transaction.setTag('sentry_reportAllChanges', this._reportAllChanges);\n    }\n  };\n  /**\n   * Capture the information of the user agent.\n   */\n  MetricsInstrumentation.prototype._trackNavigator = function (transaction) {\n    var navigator = global.navigator;\n    if (!navigator) {\n      return;\n    }\n    // track network connectivity\n    var connection = navigator.connection;\n    if (connection) {\n      if (connection.effectiveType) {\n        transaction.setTag('effectiveConnectionType', connection.effectiveType);\n      }\n      if (connection.type) {\n        transaction.setTag('connectionType', connection.type);\n      }\n      if (isMeasurementValue(connection.rtt)) {\n        this._measurements['connection.rtt'] = {\n          value: connection.rtt\n        };\n      }\n      if (isMeasurementValue(connection.downlink)) {\n        this._measurements['connection.downlink'] = {\n          value: connection.downlink\n        };\n      }\n    }\n    if (isMeasurementValue(navigator.deviceMemory)) {\n      transaction.setTag('deviceMemory', String(navigator.deviceMemory));\n    }\n    if (isMeasurementValue(navigator.hardwareConcurrency)) {\n      transaction.setTag('hardwareConcurrency', String(navigator.hardwareConcurrency));\n    }\n  };\n  /** Starts tracking the Cumulative Layout Shift on the current page. */\n  MetricsInstrumentation.prototype._trackCLS = function () {\n    var _this = this;\n    // See:\n    // https://web.dev/evolving-cls/\n    // https://web.dev/cls-web-tooling/\n    getCLS(function (metric) {\n      var entry = metric.entries.pop();\n      if (!entry) {\n        return;\n      }\n      IS_DEBUG_BUILD && logger.log('[Measurements] Adding CLS');\n      _this._measurements['cls'] = {\n        value: metric.value\n      };\n      _this._clsEntry = entry;\n    });\n  };\n  /** Starts tracking the Largest Contentful Paint on the current page. */\n  MetricsInstrumentation.prototype._trackLCP = function () {\n    var _this = this;\n    getLCP(function (metric) {\n      var entry = metric.entries.pop();\n      if (!entry) {\n        return;\n      }\n      var timeOrigin = msToSec(browserPerformanceTimeOrigin);\n      var startTime = msToSec(entry.startTime);\n      IS_DEBUG_BUILD && logger.log('[Measurements] Adding LCP');\n      _this._measurements['lcp'] = {\n        value: metric.value\n      };\n      _this._measurements['mark.lcp'] = {\n        value: timeOrigin + startTime\n      };\n      _this._lcpEntry = entry;\n    }, this._reportAllChanges);\n  };\n  /** Starts tracking the First Input Delay on the current page. */\n  MetricsInstrumentation.prototype._trackFID = function () {\n    var _this = this;\n    getFID(function (metric) {\n      var entry = metric.entries.pop();\n      if (!entry) {\n        return;\n      }\n      var timeOrigin = msToSec(browserPerformanceTimeOrigin);\n      var startTime = msToSec(entry.startTime);\n      IS_DEBUG_BUILD && logger.log('[Measurements] Adding FID');\n      _this._measurements['fid'] = {\n        value: metric.value\n      };\n      _this._measurements['mark.fid'] = {\n        value: timeOrigin + startTime\n      };\n    });\n  };\n  return MetricsInstrumentation;\n}();\nexport { MetricsInstrumentation };\n/** Instrument navigation entries */\nfunction addNavigationSpans(transaction, entry, timeOrigin) {\n  ['unloadEvent', 'redirect', 'domContentLoadedEvent', 'loadEvent', 'connect'].forEach(function (event) {\n    addPerformanceNavigationTiming(transaction, entry, event, timeOrigin);\n  });\n  addPerformanceNavigationTiming(transaction, entry, 'secureConnection', timeOrigin, 'TLS/SSL', 'connectEnd');\n  addPerformanceNavigationTiming(transaction, entry, 'fetch', timeOrigin, 'cache', 'domainLookupStart');\n  addPerformanceNavigationTiming(transaction, entry, 'domainLookup', timeOrigin, 'DNS');\n  addRequest(transaction, entry, timeOrigin);\n}\n/** Create measure related spans */\nfunction addMeasureSpans(transaction, entry, startTime, duration, timeOrigin) {\n  var measureStartTimestamp = timeOrigin + startTime;\n  var measureEndTimestamp = measureStartTimestamp + duration;\n  _startChild(transaction, {\n    description: entry.name,\n    endTimestamp: measureEndTimestamp,\n    op: entry.entryType,\n    startTimestamp: measureStartTimestamp\n  });\n  return measureStartTimestamp;\n}\n/** Create resource-related spans */\nexport function addResourceSpans(transaction, entry, resourceName, startTime, duration, timeOrigin) {\n  // we already instrument based on fetch and xhr, so we don't need to\n  // duplicate spans here.\n  if (entry.initiatorType === 'xmlhttprequest' || entry.initiatorType === 'fetch') {\n    return;\n  }\n  var data = {};\n  if ('transferSize' in entry) {\n    data['Transfer Size'] = entry.transferSize;\n  }\n  if ('encodedBodySize' in entry) {\n    data['Encoded Body Size'] = entry.encodedBodySize;\n  }\n  if ('decodedBodySize' in entry) {\n    data['Decoded Body Size'] = entry.decodedBodySize;\n  }\n  var startTimestamp = timeOrigin + startTime;\n  var endTimestamp = startTimestamp + duration;\n  _startChild(transaction, {\n    description: resourceName,\n    endTimestamp: endTimestamp,\n    op: entry.initiatorType ? \"resource.\" + entry.initiatorType : 'resource',\n    startTimestamp: startTimestamp,\n    data: data\n  });\n}\n/** Create performance navigation related spans */\nfunction addPerformanceNavigationTiming(transaction, entry, event, timeOrigin, description, eventEnd) {\n  var end = eventEnd ? entry[eventEnd] : entry[event + \"End\"];\n  var start = entry[event + \"Start\"];\n  if (!start || !end) {\n    return;\n  }\n  _startChild(transaction, {\n    op: 'browser',\n    description: description !== null && description !== void 0 ? description : event,\n    startTimestamp: timeOrigin + msToSec(start),\n    endTimestamp: timeOrigin + msToSec(end)\n  });\n}\n/** Create request and response related spans */\nfunction addRequest(transaction, entry, timeOrigin) {\n  _startChild(transaction, {\n    op: 'browser',\n    description: 'request',\n    startTimestamp: timeOrigin + msToSec(entry.requestStart),\n    endTimestamp: timeOrigin + msToSec(entry.responseEnd)\n  });\n  _startChild(transaction, {\n    op: 'browser',\n    description: 'response',\n    startTimestamp: timeOrigin + msToSec(entry.responseStart),\n    endTimestamp: timeOrigin + msToSec(entry.responseEnd)\n  });\n}\n/**\n * Helper function to start child on transactions. This function will make sure that the transaction will\n * use the start timestamp of the created child span if it is earlier than the transactions actual\n * start timestamp.\n */\nexport function _startChild(transaction, _a) {\n  var startTimestamp = _a.startTimestamp,\n    ctx = __rest(_a, [\"startTimestamp\"]);\n  if (startTimestamp && transaction.startTimestamp > startTimestamp) {\n    transaction.startTimestamp = startTimestamp;\n  }\n  return transaction.startChild(__assign({\n    startTimestamp: startTimestamp\n  }, ctx));\n}\n/**\n * Checks if a given value is a valid measurement value.\n */\nfunction isMeasurementValue(value) {\n  return typeof value === 'number' && isFinite(value);\n}\n/** Add LCP / CLS data to transaction to allow debugging */\nfunction tagMetricInfo(transaction, lcpEntry, clsEntry) {\n  if (lcpEntry) {\n    IS_DEBUG_BUILD && logger.log('[Measurements] Adding LCP Data');\n    // Capture Properties of the LCP element that contributes to the LCP.\n    if (lcpEntry.element) {\n      transaction.setTag('lcp.element', htmlTreeAsString(lcpEntry.element));\n    }\n    if (lcpEntry.id) {\n      transaction.setTag('lcp.id', lcpEntry.id);\n    }\n    if (lcpEntry.url) {\n      // Trim URL to the first 200 characters.\n      transaction.setTag('lcp.url', lcpEntry.url.trim().slice(0, 200));\n    }\n    transaction.setTag('lcp.size', lcpEntry.size);\n  }\n  // See: https://developer.mozilla.org/en-US/docs/Web/API/LayoutShift\n  if (clsEntry && clsEntry.sources) {\n    IS_DEBUG_BUILD && logger.log('[Measurements] Adding CLS Data');\n    clsEntry.sources.forEach(function (source, index) {\n      return transaction.setTag(\"cls.source.\" + (index + 1), htmlTreeAsString(source.node));\n    });\n  }\n}","map":{"version":3,"sources":["../../../../src/browser/metrics.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable max-lines */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { Measurements, SpanContext } from '@sentry/types';\nimport { browserPerformanceTimeOrigin, getGlobalObject, htmlTreeAsString, isNodeEnv, logger } from '@sentry/utils';\n\nimport { IS_DEBUG_BUILD } from '../flags';\nimport { Span } from '../span';\nimport { Transaction } from '../transaction';\nimport { msToSec } from '../utils';\nimport { getCLS, LayoutShift } from './web-vitals/getCLS';\nimport { getFID } from './web-vitals/getFID';\nimport { getLCP, LargestContentfulPaint } from './web-vitals/getLCP';\nimport { getVisibilityWatcher } from './web-vitals/lib/getVisibilityWatcher';\nimport { NavigatorDeviceMemory, NavigatorNetworkInformation } from './web-vitals/types';\n\nconst global = getGlobalObject<Window>();\n\n/** Class tracking metrics  */\nexport class MetricsInstrumentation {\n  private _measurements: Measurements = {};\n\n  private _performanceCursor: number = 0;\n  private _lcpEntry: LargestContentfulPaint | undefined;\n  private _clsEntry: LayoutShift | undefined;\n\n  public constructor(private _reportAllChanges: boolean = false) {\n    if (!isNodeEnv() && global && global.performance && global.document) {\n      if (global.performance.mark) {\n        global.performance.mark('sentry-tracing-init');\n      }\n\n      this._trackCLS();\n      this._trackLCP();\n      this._trackFID();\n    }\n  }\n\n  /** Add performance related spans to a transaction */\n  public addPerformanceEntries(transaction: Transaction): void {\n    if (!global || !global.performance || !global.performance.getEntries || !browserPerformanceTimeOrigin) {\n      // Gatekeeper if performance API not available\n      return;\n    }\n\n    IS_DEBUG_BUILD && logger.log('[Tracing] Adding & adjusting spans using Performance API');\n\n    const timeOrigin = msToSec(browserPerformanceTimeOrigin);\n\n    let responseStartTimestamp: number | undefined;\n    let requestStartTimestamp: number | undefined;\n\n    global.performance\n      .getEntries()\n      .slice(this._performanceCursor)\n      .forEach((entry: Record<string, any>) => {\n        const startTime = msToSec(entry.startTime as number);\n        const duration = msToSec(entry.duration as number);\n\n        if (transaction.op === 'navigation' && timeOrigin + startTime < transaction.startTimestamp) {\n          return;\n        }\n\n        switch (entry.entryType) {\n          case 'navigation': {\n            addNavigationSpans(transaction, entry, timeOrigin);\n            responseStartTimestamp = timeOrigin + msToSec(entry.responseStart as number);\n            requestStartTimestamp = timeOrigin + msToSec(entry.requestStart as number);\n            break;\n          }\n          case 'mark':\n          case 'paint':\n          case 'measure': {\n            const startTimestamp = addMeasureSpans(transaction, entry, startTime, duration, timeOrigin);\n            // capture web vitals\n\n            const firstHidden = getVisibilityWatcher();\n            // Only report if the page wasn't hidden prior to the web vital.\n            const shouldRecord = entry.startTime < firstHidden.firstHiddenTime;\n\n            if (entry.name === 'first-paint' && shouldRecord) {\n              IS_DEBUG_BUILD && logger.log('[Measurements] Adding FP');\n              this._measurements['fp'] = { value: entry.startTime };\n              this._measurements['mark.fp'] = { value: startTimestamp };\n            }\n\n            if (entry.name === 'first-contentful-paint' && shouldRecord) {\n              IS_DEBUG_BUILD && logger.log('[Measurements] Adding FCP');\n              this._measurements['fcp'] = { value: entry.startTime };\n              this._measurements['mark.fcp'] = { value: startTimestamp };\n            }\n\n            break;\n          }\n          case 'resource': {\n            const resourceName = (entry.name as string).replace(global.location.origin, '');\n            addResourceSpans(transaction, entry, resourceName, startTime, duration, timeOrigin);\n            break;\n          }\n          default:\n          // Ignore other entry types.\n        }\n      });\n\n    this._performanceCursor = Math.max(performance.getEntries().length - 1, 0);\n\n    this._trackNavigator(transaction);\n\n    // Measurements are only available for pageload transactions\n    if (transaction.op === 'pageload') {\n      // normalize applicable web vital values to be relative to transaction.startTimestamp\n\n      const timeOrigin = msToSec(browserPerformanceTimeOrigin);\n\n      // Generate TTFB (Time to First Byte), which measured as the time between the beginning of the transaction and the\n      // start of the response in milliseconds\n      if (typeof responseStartTimestamp === 'number') {\n        IS_DEBUG_BUILD && logger.log('[Measurements] Adding TTFB');\n        this._measurements['ttfb'] = { value: (responseStartTimestamp - transaction.startTimestamp) * 1000 };\n\n        if (typeof requestStartTimestamp === 'number' && requestStartTimestamp <= responseStartTimestamp) {\n          // Capture the time spent making the request and receiving the first byte of the response.\n          // This is the time between the start of the request and the start of the response in milliseconds.\n          this._measurements['ttfb.requestTime'] = { value: (responseStartTimestamp - requestStartTimestamp) * 1000 };\n        }\n      }\n\n      ['fcp', 'fp', 'lcp'].forEach(name => {\n        if (!this._measurements[name] || timeOrigin >= transaction.startTimestamp) {\n          return;\n        }\n\n        // The web vitals, fcp, fp, lcp, and ttfb, all measure relative to timeOrigin.\n        // Unfortunately, timeOrigin is not captured within the transaction span data, so these web vitals will need\n        // to be adjusted to be relative to transaction.startTimestamp.\n\n        const oldValue = this._measurements[name].value;\n        const measurementTimestamp = timeOrigin + msToSec(oldValue);\n        // normalizedValue should be in milliseconds\n        const normalizedValue = Math.abs((measurementTimestamp - transaction.startTimestamp) * 1000);\n\n        const delta = normalizedValue - oldValue;\n        IS_DEBUG_BUILD &&\n          logger.log(`[Measurements] Normalized ${name} from ${oldValue} to ${normalizedValue} (${delta})`);\n\n        this._measurements[name].value = normalizedValue;\n      });\n\n      if (this._measurements['mark.fid'] && this._measurements['fid']) {\n        // create span for FID\n\n        _startChild(transaction, {\n          description: 'first input delay',\n          endTimestamp: this._measurements['mark.fid'].value + msToSec(this._measurements['fid'].value),\n          op: 'web.vitals',\n          startTimestamp: this._measurements['mark.fid'].value,\n        });\n      }\n\n      // If FCP is not recorded we should not record the cls value\n      // according to the new definition of CLS.\n      if (!('fcp' in this._measurements)) {\n        delete this._measurements.cls;\n      }\n\n      transaction.setMeasurements(this._measurements);\n      tagMetricInfo(transaction, this._lcpEntry, this._clsEntry);\n      transaction.setTag('sentry_reportAllChanges', this._reportAllChanges);\n    }\n  }\n\n  /**\n   * Capture the information of the user agent.\n   */\n  private _trackNavigator(transaction: Transaction): void {\n    const navigator = global.navigator as null | (Navigator & NavigatorNetworkInformation & NavigatorDeviceMemory);\n    if (!navigator) {\n      return;\n    }\n\n    // track network connectivity\n    const connection = navigator.connection;\n    if (connection) {\n      if (connection.effectiveType) {\n        transaction.setTag('effectiveConnectionType', connection.effectiveType);\n      }\n\n      if (connection.type) {\n        transaction.setTag('connectionType', connection.type);\n      }\n\n      if (isMeasurementValue(connection.rtt)) {\n        this._measurements['connection.rtt'] = { value: connection.rtt as number };\n      }\n\n      if (isMeasurementValue(connection.downlink)) {\n        this._measurements['connection.downlink'] = { value: connection.downlink as number };\n      }\n    }\n\n    if (isMeasurementValue(navigator.deviceMemory)) {\n      transaction.setTag('deviceMemory', String(navigator.deviceMemory));\n    }\n\n    if (isMeasurementValue(navigator.hardwareConcurrency)) {\n      transaction.setTag('hardwareConcurrency', String(navigator.hardwareConcurrency));\n    }\n  }\n\n  /** Starts tracking the Cumulative Layout Shift on the current page. */\n  private _trackCLS(): void {\n    // See:\n    // https://web.dev/evolving-cls/\n    // https://web.dev/cls-web-tooling/\n    getCLS(metric => {\n      const entry = metric.entries.pop();\n      if (!entry) {\n        return;\n      }\n\n      IS_DEBUG_BUILD && logger.log('[Measurements] Adding CLS');\n      this._measurements['cls'] = { value: metric.value };\n      this._clsEntry = entry as LayoutShift;\n    });\n  }\n\n  /** Starts tracking the Largest Contentful Paint on the current page. */\n  private _trackLCP(): void {\n    getLCP(metric => {\n      const entry = metric.entries.pop();\n      if (!entry) {\n        return;\n      }\n\n      const timeOrigin = msToSec(browserPerformanceTimeOrigin as number);\n      const startTime = msToSec(entry.startTime);\n      IS_DEBUG_BUILD && logger.log('[Measurements] Adding LCP');\n      this._measurements['lcp'] = { value: metric.value };\n      this._measurements['mark.lcp'] = { value: timeOrigin + startTime };\n      this._lcpEntry = entry as LargestContentfulPaint;\n    }, this._reportAllChanges);\n  }\n\n  /** Starts tracking the First Input Delay on the current page. */\n  private _trackFID(): void {\n    getFID(metric => {\n      const entry = metric.entries.pop();\n      if (!entry) {\n        return;\n      }\n\n      const timeOrigin = msToSec(browserPerformanceTimeOrigin as number);\n      const startTime = msToSec(entry.startTime);\n      IS_DEBUG_BUILD && logger.log('[Measurements] Adding FID');\n      this._measurements['fid'] = { value: metric.value };\n      this._measurements['mark.fid'] = { value: timeOrigin + startTime };\n    });\n  }\n}\n\n/** Instrument navigation entries */\nfunction addNavigationSpans(transaction: Transaction, entry: Record<string, any>, timeOrigin: number): void {\n  ['unloadEvent', 'redirect', 'domContentLoadedEvent', 'loadEvent', 'connect'].forEach(event => {\n    addPerformanceNavigationTiming(transaction, entry, event, timeOrigin);\n  });\n  addPerformanceNavigationTiming(transaction, entry, 'secureConnection', timeOrigin, 'TLS/SSL', 'connectEnd');\n  addPerformanceNavigationTiming(transaction, entry, 'fetch', timeOrigin, 'cache', 'domainLookupStart');\n  addPerformanceNavigationTiming(transaction, entry, 'domainLookup', timeOrigin, 'DNS');\n  addRequest(transaction, entry, timeOrigin);\n}\n\n/** Create measure related spans */\nfunction addMeasureSpans(\n  transaction: Transaction,\n  entry: Record<string, any>,\n  startTime: number,\n  duration: number,\n  timeOrigin: number,\n): number {\n  const measureStartTimestamp = timeOrigin + startTime;\n  const measureEndTimestamp = measureStartTimestamp + duration;\n\n  _startChild(transaction, {\n    description: entry.name as string,\n    endTimestamp: measureEndTimestamp,\n    op: entry.entryType as string,\n    startTimestamp: measureStartTimestamp,\n  });\n\n  return measureStartTimestamp;\n}\n\nexport interface ResourceEntry extends Record<string, unknown> {\n  initiatorType?: string;\n  transferSize?: number;\n  encodedBodySize?: number;\n  decodedBodySize?: number;\n}\n\n/** Create resource-related spans */\nexport function addResourceSpans(\n  transaction: Transaction,\n  entry: ResourceEntry,\n  resourceName: string,\n  startTime: number,\n  duration: number,\n  timeOrigin: number,\n): void {\n  // we already instrument based on fetch and xhr, so we don't need to\n  // duplicate spans here.\n  if (entry.initiatorType === 'xmlhttprequest' || entry.initiatorType === 'fetch') {\n    return;\n  }\n\n  const data: Record<string, any> = {};\n  if ('transferSize' in entry) {\n    data['Transfer Size'] = entry.transferSize;\n  }\n  if ('encodedBodySize' in entry) {\n    data['Encoded Body Size'] = entry.encodedBodySize;\n  }\n  if ('decodedBodySize' in entry) {\n    data['Decoded Body Size'] = entry.decodedBodySize;\n  }\n\n  const startTimestamp = timeOrigin + startTime;\n  const endTimestamp = startTimestamp + duration;\n\n  _startChild(transaction, {\n    description: resourceName,\n    endTimestamp,\n    op: entry.initiatorType ? `resource.${entry.initiatorType}` : 'resource',\n    startTimestamp,\n    data,\n  });\n}\n\n/** Create performance navigation related spans */\nfunction addPerformanceNavigationTiming(\n  transaction: Transaction,\n  entry: Record<string, any>,\n  event: string,\n  timeOrigin: number,\n  description?: string,\n  eventEnd?: string,\n): void {\n  const end = eventEnd ? (entry[eventEnd] as number | undefined) : (entry[`${event}End`] as number | undefined);\n  const start = entry[`${event}Start`] as number | undefined;\n  if (!start || !end) {\n    return;\n  }\n  _startChild(transaction, {\n    op: 'browser',\n    description: description ?? event,\n    startTimestamp: timeOrigin + msToSec(start),\n    endTimestamp: timeOrigin + msToSec(end),\n  });\n}\n\n/** Create request and response related spans */\nfunction addRequest(transaction: Transaction, entry: Record<string, any>, timeOrigin: number): void {\n  _startChild(transaction, {\n    op: 'browser',\n    description: 'request',\n    startTimestamp: timeOrigin + msToSec(entry.requestStart as number),\n    endTimestamp: timeOrigin + msToSec(entry.responseEnd as number),\n  });\n\n  _startChild(transaction, {\n    op: 'browser',\n    description: 'response',\n    startTimestamp: timeOrigin + msToSec(entry.responseStart as number),\n    endTimestamp: timeOrigin + msToSec(entry.responseEnd as number),\n  });\n}\n\n/**\n * Helper function to start child on transactions. This function will make sure that the transaction will\n * use the start timestamp of the created child span if it is earlier than the transactions actual\n * start timestamp.\n */\nexport function _startChild(transaction: Transaction, { startTimestamp, ...ctx }: SpanContext): Span {\n  if (startTimestamp && transaction.startTimestamp > startTimestamp) {\n    transaction.startTimestamp = startTimestamp;\n  }\n\n  return transaction.startChild({\n    startTimestamp,\n    ...ctx,\n  });\n}\n\n/**\n * Checks if a given value is a valid measurement value.\n */\nfunction isMeasurementValue(value: any): boolean {\n  return typeof value === 'number' && isFinite(value);\n}\n\n/** Add LCP / CLS data to transaction to allow debugging */\nfunction tagMetricInfo(\n  transaction: Transaction,\n  lcpEntry: MetricsInstrumentation['_lcpEntry'],\n  clsEntry: MetricsInstrumentation['_clsEntry'],\n): void {\n  if (lcpEntry) {\n    IS_DEBUG_BUILD && logger.log('[Measurements] Adding LCP Data');\n\n    // Capture Properties of the LCP element that contributes to the LCP.\n\n    if (lcpEntry.element) {\n      transaction.setTag('lcp.element', htmlTreeAsString(lcpEntry.element));\n    }\n\n    if (lcpEntry.id) {\n      transaction.setTag('lcp.id', lcpEntry.id);\n    }\n\n    if (lcpEntry.url) {\n      // Trim URL to the first 200 characters.\n      transaction.setTag('lcp.url', lcpEntry.url.trim().slice(0, 200));\n    }\n\n    transaction.setTag('lcp.size', lcpEntry.size);\n  }\n\n  // See: https://developer.mozilla.org/en-US/docs/Web/API/LayoutShift\n  if (clsEntry && clsEntry.sources) {\n    IS_DEBUG_BUILD && logger.log('[Measurements] Adding CLS Data');\n    clsEntry.sources.forEach((source, index) =>\n      transaction.setTag(`cls.source.${index + 1}`, htmlTreeAsString(source.node)),\n    );\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}