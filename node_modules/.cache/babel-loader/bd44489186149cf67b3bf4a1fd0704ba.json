{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subject,_Observable,_Subscriber,_Subscription,_operators_refCount PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { SubjectSubscriber } from '../Subject';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { refCount as higherOrderRefCount } from '../operators/refCount';\nvar ConnectableObservable = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(ConnectableObservable, _super);\n  function ConnectableObservable(source, subjectFactory) {\n    var _this = _super.call(this) || this;\n    _this.source = source;\n    _this.subjectFactory = subjectFactory;\n    _this._refCount = 0;\n    _this._isComplete = false;\n    return _this;\n  }\n  ConnectableObservable.prototype._subscribe = function (subscriber) {\n    return this.getSubject().subscribe(subscriber);\n  };\n  ConnectableObservable.prototype.getSubject = function () {\n    var subject = this._subject;\n    if (!subject || subject.isStopped) {\n      this._subject = this.subjectFactory();\n    }\n    return this._subject;\n  };\n  ConnectableObservable.prototype.connect = function () {\n    var connection = this._connection;\n    if (!connection) {\n      this._isComplete = false;\n      connection = this._connection = new Subscription();\n      connection.add(this.source.subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n      if (connection.closed) {\n        this._connection = null;\n        connection = Subscription.EMPTY;\n      }\n    }\n    return connection;\n  };\n  ConnectableObservable.prototype.refCount = function () {\n    return higherOrderRefCount()(this);\n  };\n  return ConnectableObservable;\n}(Observable);\nexport { ConnectableObservable };\nexport var connectableObservableDescriptor = /*@__PURE__*/function () {\n  var connectableProto = ConnectableObservable.prototype;\n  return {\n    operator: {\n      value: null\n    },\n    _refCount: {\n      value: 0,\n      writable: true\n    },\n    _subject: {\n      value: null,\n      writable: true\n    },\n    _connection: {\n      value: null,\n      writable: true\n    },\n    _subscribe: {\n      value: connectableProto._subscribe\n    },\n    _isComplete: {\n      value: connectableProto._isComplete,\n      writable: true\n    },\n    getSubject: {\n      value: connectableProto.getSubject\n    },\n    connect: {\n      value: connectableProto.connect\n    },\n    refCount: {\n      value: connectableProto.refCount\n    }\n  };\n}();\nvar ConnectableSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(ConnectableSubscriber, _super);\n  function ConnectableSubscriber(destination, connectable) {\n    var _this = _super.call(this, destination) || this;\n    _this.connectable = connectable;\n    return _this;\n  }\n  ConnectableSubscriber.prototype._error = function (err) {\n    this._unsubscribe();\n    _super.prototype._error.call(this, err);\n  };\n  ConnectableSubscriber.prototype._complete = function () {\n    this.connectable._isComplete = true;\n    this._unsubscribe();\n    _super.prototype._complete.call(this);\n  };\n  ConnectableSubscriber.prototype._unsubscribe = function () {\n    var connectable = this.connectable;\n    if (connectable) {\n      this.connectable = null;\n      var connection = connectable._connection;\n      connectable._refCount = 0;\n      connectable._subject = null;\n      connectable._connection = null;\n      if (connection) {\n        connection.unsubscribe();\n      }\n    }\n  };\n  return ConnectableSubscriber;\n}(SubjectSubscriber);\nvar RefCountOperator = /*@__PURE__*/function () {\n  function RefCountOperator(connectable) {\n    this.connectable = connectable;\n  }\n  RefCountOperator.prototype.call = function (subscriber, source) {\n    var connectable = this.connectable;\n    connectable._refCount++;\n    var refCounter = new RefCountSubscriber(subscriber, connectable);\n    var subscription = source.subscribe(refCounter);\n    if (!refCounter.closed) {\n      refCounter.connection = connectable.connect();\n    }\n    return subscription;\n  };\n  return RefCountOperator;\n}();\nvar RefCountSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(RefCountSubscriber, _super);\n  function RefCountSubscriber(destination, connectable) {\n    var _this = _super.call(this, destination) || this;\n    _this.connectable = connectable;\n    return _this;\n  }\n  RefCountSubscriber.prototype._unsubscribe = function () {\n    var connectable = this.connectable;\n    if (!connectable) {\n      this.connection = null;\n      return;\n    }\n    this.connectable = null;\n    var refCount = connectable._refCount;\n    if (refCount <= 0) {\n      this.connection = null;\n      return;\n    }\n    connectable._refCount = refCount - 1;\n    if (refCount > 1) {\n      this.connection = null;\n      return;\n    }\n    var connection = this.connection;\n    var sharedConnection = connectable._connection;\n    this.connection = null;\n    if (sharedConnection && (!connection || sharedConnection === connection)) {\n      sharedConnection.unsubscribe();\n    }\n  };\n  return RefCountSubscriber;\n}(Subscriber);","map":{"version":3,"sources":["../../../src/internal/observable/ConnectableObservable.ts"],"names":[],"mappings":"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","sourcesContent":["/** PURE_IMPORTS_START tslib,_Subject,_Observable,_Subscriber,_Subscription,_operators_refCount PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { SubjectSubscriber } from '../Subject';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { refCount as higherOrderRefCount } from '../operators/refCount';\nvar ConnectableObservable = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(ConnectableObservable, _super);\n    function ConnectableObservable(source, subjectFactory) {\n        var _this = _super.call(this) || this;\n        _this.source = source;\n        _this.subjectFactory = subjectFactory;\n        _this._refCount = 0;\n        _this._isComplete = false;\n        return _this;\n    }\n    ConnectableObservable.prototype._subscribe = function (subscriber) {\n        return this.getSubject().subscribe(subscriber);\n    };\n    ConnectableObservable.prototype.getSubject = function () {\n        var subject = this._subject;\n        if (!subject || subject.isStopped) {\n            this._subject = this.subjectFactory();\n        }\n        return this._subject;\n    };\n    ConnectableObservable.prototype.connect = function () {\n        var connection = this._connection;\n        if (!connection) {\n            this._isComplete = false;\n            connection = this._connection = new Subscription();\n            connection.add(this.source\n                .subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n            if (connection.closed) {\n                this._connection = null;\n                connection = Subscription.EMPTY;\n            }\n        }\n        return connection;\n    };\n    ConnectableObservable.prototype.refCount = function () {\n        return higherOrderRefCount()(this);\n    };\n    return ConnectableObservable;\n}(Observable));\nexport { ConnectableObservable };\nexport var connectableObservableDescriptor = /*@__PURE__*/ (function () {\n    var connectableProto = ConnectableObservable.prototype;\n    return {\n        operator: { value: null },\n        _refCount: { value: 0, writable: true },\n        _subject: { value: null, writable: true },\n        _connection: { value: null, writable: true },\n        _subscribe: { value: connectableProto._subscribe },\n        _isComplete: { value: connectableProto._isComplete, writable: true },\n        getSubject: { value: connectableProto.getSubject },\n        connect: { value: connectableProto.connect },\n        refCount: { value: connectableProto.refCount }\n    };\n})();\nvar ConnectableSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(ConnectableSubscriber, _super);\n    function ConnectableSubscriber(destination, connectable) {\n        var _this = _super.call(this, destination) || this;\n        _this.connectable = connectable;\n        return _this;\n    }\n    ConnectableSubscriber.prototype._error = function (err) {\n        this._unsubscribe();\n        _super.prototype._error.call(this, err);\n    };\n    ConnectableSubscriber.prototype._complete = function () {\n        this.connectable._isComplete = true;\n        this._unsubscribe();\n        _super.prototype._complete.call(this);\n    };\n    ConnectableSubscriber.prototype._unsubscribe = function () {\n        var connectable = this.connectable;\n        if (connectable) {\n            this.connectable = null;\n            var connection = connectable._connection;\n            connectable._refCount = 0;\n            connectable._subject = null;\n            connectable._connection = null;\n            if (connection) {\n                connection.unsubscribe();\n            }\n        }\n    };\n    return ConnectableSubscriber;\n}(SubjectSubscriber));\nvar RefCountOperator = /*@__PURE__*/ (function () {\n    function RefCountOperator(connectable) {\n        this.connectable = connectable;\n    }\n    RefCountOperator.prototype.call = function (subscriber, source) {\n        var connectable = this.connectable;\n        connectable._refCount++;\n        var refCounter = new RefCountSubscriber(subscriber, connectable);\n        var subscription = source.subscribe(refCounter);\n        if (!refCounter.closed) {\n            refCounter.connection = connectable.connect();\n        }\n        return subscription;\n    };\n    return RefCountOperator;\n}());\nvar RefCountSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(RefCountSubscriber, _super);\n    function RefCountSubscriber(destination, connectable) {\n        var _this = _super.call(this, destination) || this;\n        _this.connectable = connectable;\n        return _this;\n    }\n    RefCountSubscriber.prototype._unsubscribe = function () {\n        var connectable = this.connectable;\n        if (!connectable) {\n            this.connection = null;\n            return;\n        }\n        this.connectable = null;\n        var refCount = connectable._refCount;\n        if (refCount <= 0) {\n            this.connection = null;\n            return;\n        }\n        connectable._refCount = refCount - 1;\n        if (refCount > 1) {\n            this.connection = null;\n            return;\n        }\n        var connection = this.connection;\n        var sharedConnection = connectable._connection;\n        this.connection = null;\n        if (sharedConnection && (!connection || sharedConnection === connection)) {\n            sharedConnection.unsubscribe();\n        }\n    };\n    return RefCountSubscriber;\n}(Subscriber));\n//# sourceMappingURL=ConnectableObservable.js.map\n"]},"metadata":{},"sourceType":"module"}