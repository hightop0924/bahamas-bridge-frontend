{"ast":null,"code":"/** PURE_IMPORTS_START _subscribeToArray,_subscribeToPromise,_subscribeToIterable,_subscribeToObservable,_isArrayLike,_isPromise,_isObject,_symbol_iterator,_symbol_observable PURE_IMPORTS_END */\nimport { subscribeToArray } from './subscribeToArray';\nimport { subscribeToPromise } from './subscribeToPromise';\nimport { subscribeToIterable } from './subscribeToIterable';\nimport { subscribeToObservable } from './subscribeToObservable';\nimport { isArrayLike } from './isArrayLike';\nimport { isPromise } from './isPromise';\nimport { isObject } from './isObject';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { observable as Symbol_observable } from '../symbol/observable';\nexport var subscribeTo = function (result) {\n  if (!!result && typeof result[Symbol_observable] === 'function') {\n    return subscribeToObservable(result);\n  } else if (isArrayLike(result)) {\n    return subscribeToArray(result);\n  } else if (isPromise(result)) {\n    return subscribeToPromise(result);\n  } else if (!!result && typeof result[Symbol_iterator] === 'function') {\n    return subscribeToIterable(result);\n  } else {\n    var value = isObject(result) ? 'an invalid object' : \"'\" + result + \"'\";\n    var msg = \"You provided \" + value + \" where a stream was expected.\" + ' You can provide an Observable, Promise, Array, or Iterable.';\n    throw new TypeError(msg);\n  }\n};","map":{"version":3,"sources":["../../../src/internal/util/subscribeTo.ts"],"names":[],"mappings":"AACA;AACA,SAAS,gBAAA,QAAoB,oBAAM;AACnC,SAAS,kBAAA,QAAqB,sBAAM;AACpC,SAAS,mBAAA,QAAuB,uBAAM;AACtC,SAAS,qBAAmB,QAAA,yBAAgB;AAC5C,SAAS,WAAW,QAAM,eAAc;AACxC,SAAS,SAAQ,QAAQ,aAAa;AACtC,SAAS,QAAQ,QAAI,YAAe;AACpC,SAAS,QAAA,IAAU,eAAI,QAAmB,oBAAM;AAIhD,SAAO,UAAM,IAAW,iBAAO,QAA0B,sBAAA;AACvD,OAAA,IAAM,WAAU,GAAA,SAAA,CAAc,MAAA,EAAA;MAC5B,CAAA,CAAA,MAAO,IAAA,OAAA,MAAA,CAAA,iBAAqC,CAAA,KAAA,UAAA,EAAA;IAC7C,OAAA,qBAAA,CAAA,MAAA,CAAA;GAAM,MACL,IAAA,WAAO,CAAA,MAAgB,CAAC,EAAA;IACzB,OAAA,gBAAA,CAAA,MAAA,CAAA;GAAM,MACL,IAAA,SAAO,CAAA,MAAA,CAAA,EAAA;IACR,OAAA,kBAAA,CAAA,MAAA,CAAA;GAAM,MACL,IAAA,CAAA,CAAO,MAAA,IAAA,OAAA,MAAoB,CAAA,eAAe,CAAA,KAAA,UAAA,EAAA;IAC3C,OAAA,mBAAA,CAAA,MAAA,CAAA;GAAM,MACL;IACA,IAAM,KAAG,GAAG,QAAA,CAAA,MAAA,CAAgB,GAAA,mBAAK,GAAA,GAAA,GAAA,MAAA,GAA+B,GAAA;QAC5D,GAAA,GAAA,eAAA,GAAA,KAAA,GAAA,+BAAA,GACE,8DAAmB;IAC1B,MAAA,IAAA,SAAA,CAAA,GAAA,CAAA;EACD","sourcesContent":["/** PURE_IMPORTS_START _subscribeToArray,_subscribeToPromise,_subscribeToIterable,_subscribeToObservable,_isArrayLike,_isPromise,_isObject,_symbol_iterator,_symbol_observable PURE_IMPORTS_END */\nimport { subscribeToArray } from './subscribeToArray';\nimport { subscribeToPromise } from './subscribeToPromise';\nimport { subscribeToIterable } from './subscribeToIterable';\nimport { subscribeToObservable } from './subscribeToObservable';\nimport { isArrayLike } from './isArrayLike';\nimport { isPromise } from './isPromise';\nimport { isObject } from './isObject';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { observable as Symbol_observable } from '../symbol/observable';\nexport var subscribeTo = function (result) {\n    if (!!result && typeof result[Symbol_observable] === 'function') {\n        return subscribeToObservable(result);\n    }\n    else if (isArrayLike(result)) {\n        return subscribeToArray(result);\n    }\n    else if (isPromise(result)) {\n        return subscribeToPromise(result);\n    }\n    else if (!!result && typeof result[Symbol_iterator] === 'function') {\n        return subscribeToIterable(result);\n    }\n    else {\n        var value = isObject(result) ? 'an invalid object' : \"'\" + result + \"'\";\n        var msg = \"You provided \" + value + \" where a stream was expected.\"\n            + ' You can provide an Observable, Promise, Array, or Iterable.';\n        throw new TypeError(msg);\n    }\n};\n//# sourceMappingURL=subscribeTo.js.map\n"]},"metadata":{},"sourceType":"module"}