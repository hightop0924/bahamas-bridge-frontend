{"ast":null,"code":"import { SERVER_ERROR_CODE_RANGE, RESERVED_ERROR_CODES, STANDARD_ERROR_MAP, DEFAULT_ERROR } from \"./constants\";\nexport function isServerErrorCode(code) {\n  return code <= SERVER_ERROR_CODE_RANGE[0] && code >= SERVER_ERROR_CODE_RANGE[1];\n}\nexport function isReservedErrorCode(code) {\n  return RESERVED_ERROR_CODES.includes(code);\n}\nexport function isValidErrorCode(code) {\n  return typeof code === \"number\";\n}\nexport function getError(type) {\n  if (!Object.keys(STANDARD_ERROR_MAP).includes(type)) {\n    return STANDARD_ERROR_MAP[DEFAULT_ERROR];\n  }\n  return STANDARD_ERROR_MAP[type];\n}\nexport function getErrorByCode(code) {\n  const match = Object.values(STANDARD_ERROR_MAP).find(e => e.code === code);\n  if (!match) {\n    return STANDARD_ERROR_MAP[DEFAULT_ERROR];\n  }\n  return match;\n}\nexport function validateJsonRpcError(response) {\n  if (typeof response.error.code === \"undefined\") {\n    return {\n      valid: false,\n      error: \"Missing code for JSON-RPC error\"\n    };\n  }\n  if (typeof response.error.message === \"undefined\") {\n    return {\n      valid: false,\n      error: \"Missing message for JSON-RPC error\"\n    };\n  }\n  if (!isValidErrorCode(response.error.code)) {\n    return {\n      valid: false,\n      error: `Invalid error code type for JSON-RPC: ${response.error.code}`\n    };\n  }\n  if (isReservedErrorCode(response.error.code)) {\n    const error = getErrorByCode(response.error.code);\n    if (error.message !== STANDARD_ERROR_MAP[DEFAULT_ERROR].message && response.error.message === error.message) {\n      return {\n        valid: false,\n        error: `Invalid error code message for JSON-RPC: ${response.error.code}`\n      };\n    }\n  }\n  return {\n    valid: true\n  };\n}\nexport function parseConnectionError(e, url, type) {\n  return e.message.includes(\"getaddrinfo ENOTFOUND\") || e.message.includes(\"connect ECONNREFUSED\") ? new Error(`Unavailable ${type} RPC url at ${url}`) : e;\n}","map":{"version":3,"sources":["../../src/error.ts"],"names":[],"mappings":"AACA,SACE,uBAAuB,EACvB,oBAAoB,EACpB,kBAAkB,EAClB,aAAa,QACR,aAAa;AAGpB,OAAM,SAAU,iBAAiB,CAAC,IAAY,EAAA;EAC5C,OAAO,IAAI,IAAI,uBAAuB,CAAC,CAAC,CAAC,IAAI,IAAI,IAAI,uBAAuB,CAAC,CAAC,CAAC;AACjF;AAEA,OAAM,SAAU,mBAAmB,CAAC,IAAY,EAAA;EAC9C,OAAO,oBAAoB,CAAC,QAAQ,CAAC,IAAI,CAAC;AAC5C;AAEA,OAAM,SAAU,gBAAgB,CAAC,IAAY,EAAA;EAC3C,OAAO,OAAO,IAAI,KAAK,QAAQ;AACjC;AAEA,OAAM,SAAU,QAAQ,CAAC,IAAY,EAAA;EACnC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE;IACnD,OAAO,kBAAkB,CAAC,aAAa,CAAC;EACzC;EACD,OAAO,kBAAkB,CAAC,IAAI,CAAC;AACjC;AAEA,OAAM,SAAU,cAAc,CAAC,IAAY,EAAA;EACzC,MAAM,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,kBAAkB,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC;EAC1E,IAAI,CAAC,KAAK,EAAE;IACV,OAAO,kBAAkB,CAAC,aAAa,CAAC;EACzC;EACD,OAAO,KAAK;AACd;AAEA,OAAM,SAAU,oBAAoB,CAAC,QAAsB,EAAA;EACzD,IAAI,OAAO,QAAQ,CAAC,KAAK,CAAC,IAAI,KAAK,WAAW,EAAE;IAC9C,OAAO;MAAE,KAAK,EAAE,KAAK;MAAE,KAAK,EAAE;IAAiC,CAAE;EAClE;EACD,IAAI,OAAO,QAAQ,CAAC,KAAK,CAAC,OAAO,KAAK,WAAW,EAAE;IACjD,OAAO;MAAE,KAAK,EAAE,KAAK;MAAE,KAAK,EAAE;IAAoC,CAAE;EACrE;EACD,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE;IAC1C,OAAO;MACL,KAAK,EAAE,KAAK;MACZ,KAAK,EAAE,yCAAyC,QAAQ,CAAC,KAAK,CAAC,IAAI;KACpE;EACF;EACD,IAAI,mBAAmB,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE;IAC5C,MAAM,KAAK,GAAG,cAAc,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC;IACjD,IACE,KAAK,CAAC,OAAO,KAAK,kBAAkB,CAAC,aAAa,CAAC,CAAC,OAAO,IAC3D,QAAQ,CAAC,KAAK,CAAC,OAAO,KAAK,KAAK,CAAC,OAAO,EACxC;MACA,OAAO;QACL,KAAK,EAAE,KAAK;QACZ,KAAK,EAAE,4CAA4C,QAAQ,CAAC,KAAK,CAAC,IAAI;OACvE;IACF;EACF;EACD,OAAO;IAAE,KAAK,EAAE;EAAI,CAAE;AACxB;AAEA,OAAM,SAAU,oBAAoB,CAAC,CAAQ,EAAE,GAAW,EAAE,IAAY,EAAA;EACtE,OAAO,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,uBAAuB,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,sBAAsB,CAAC,GAC5F,IAAI,KAAK,CAAC,eAAe,IAAI,eAAe,GAAG,EAAE,CAAC,GAClD,CAAC;AACP","sourceRoot":"","sourcesContent":["import { SERVER_ERROR_CODE_RANGE, RESERVED_ERROR_CODES, STANDARD_ERROR_MAP, DEFAULT_ERROR, } from \"./constants\";\nexport function isServerErrorCode(code) {\n    return code <= SERVER_ERROR_CODE_RANGE[0] && code >= SERVER_ERROR_CODE_RANGE[1];\n}\nexport function isReservedErrorCode(code) {\n    return RESERVED_ERROR_CODES.includes(code);\n}\nexport function isValidErrorCode(code) {\n    return typeof code === \"number\";\n}\nexport function getError(type) {\n    if (!Object.keys(STANDARD_ERROR_MAP).includes(type)) {\n        return STANDARD_ERROR_MAP[DEFAULT_ERROR];\n    }\n    return STANDARD_ERROR_MAP[type];\n}\nexport function getErrorByCode(code) {\n    const match = Object.values(STANDARD_ERROR_MAP).find(e => e.code === code);\n    if (!match) {\n        return STANDARD_ERROR_MAP[DEFAULT_ERROR];\n    }\n    return match;\n}\nexport function validateJsonRpcError(response) {\n    if (typeof response.error.code === \"undefined\") {\n        return { valid: false, error: \"Missing code for JSON-RPC error\" };\n    }\n    if (typeof response.error.message === \"undefined\") {\n        return { valid: false, error: \"Missing message for JSON-RPC error\" };\n    }\n    if (!isValidErrorCode(response.error.code)) {\n        return {\n            valid: false,\n            error: `Invalid error code type for JSON-RPC: ${response.error.code}`,\n        };\n    }\n    if (isReservedErrorCode(response.error.code)) {\n        const error = getErrorByCode(response.error.code);\n        if (error.message !== STANDARD_ERROR_MAP[DEFAULT_ERROR].message &&\n            response.error.message === error.message) {\n            return {\n                valid: false,\n                error: `Invalid error code message for JSON-RPC: ${response.error.code}`,\n            };\n        }\n    }\n    return { valid: true };\n}\nexport function parseConnectionError(e, url, type) {\n    return e.message.includes(\"getaddrinfo ENOTFOUND\") || e.message.includes(\"connect ECONNREFUSED\")\n        ? new Error(`Unavailable ${type} RPC url at ${url}`)\n        : e;\n}\n//# sourceMappingURL=error.js.map"]},"metadata":{},"sourceType":"module"}