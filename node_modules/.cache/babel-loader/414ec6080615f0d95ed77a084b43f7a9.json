{"ast":null,"code":"/** PURE_IMPORTS_START _Observable,_util_isScheduler,_operators_mergeAll,_fromArray PURE_IMPORTS_END */\nimport { Observable } from '../Observable';\nimport { isScheduler } from '../util/isScheduler';\nimport { mergeAll } from '../operators/mergeAll';\nimport { fromArray } from './fromArray';\nexport function merge() {\n  var observables = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    observables[_i] = arguments[_i];\n  }\n  var concurrent = Number.POSITIVE_INFINITY;\n  var scheduler = null;\n  var last = observables[observables.length - 1];\n  if (isScheduler(last)) {\n    scheduler = observables.pop();\n    if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {\n      concurrent = observables.pop();\n    }\n  } else if (typeof last === 'number') {\n    concurrent = observables.pop();\n  }\n  if (scheduler === null && observables.length === 1 && observables[0] instanceof Observable) {\n    return observables[0];\n  }\n  return mergeAll(concurrent)(fromArray(observables, scheduler));\n}","map":{"version":3,"sources":["../../../src/internal/observable/merge.ts"],"names":[],"mappings":"AAAA;AAEA,SAAS,UAAA,QAAa,eAAM;AAC5B,SAAS,WAAU,QAAM,qBAAwB;AACjD,SAAS,QAAA,QAAW,uBAAoB;AAqHxC,SAAM,SAAU,QAAK,aAAA;AAAO,OAAA,SAAA,KAAA,CAAA,EAAA;MAAA,WAAA,GAAA,EAAA;EAAA,KAAA,IAAA,EAAA,GAAA,CAAA,EAAA,EAAA,GAAA,SAAA,CAAA,MAAoE,EAAA,EAAA,EAAA,EAAA;;EAC/F;EACA,IAAI,UAAS,GAAkB,MAAK,CAAA,iBAAA;EACnC,IAAI,SAAY,GAAA,IAAA;EAChB,IAAI,IAAA,GAAA,WAAiB,CAAE,WAAA,CAAA,MAAA,GAAA,CAAA,CAAA;MACrB,WAAS,CAAkB,IAAA,CAAA,EAAA;IAC3B,SAAI,GAAA,WAAkB,CAAA,GAAI,CAAA,CAAA;QACxB,WAAU,CAAA,MAAW,GAAA,CAAA,IAAY,OAAM,WAAA,CAAA,WAAA,CAAA,MAAA,GAAA,CAAA,CAAA,KAAA,QAAA,EAAA;MACxC,UAAA,GAAA,WAAA,CAAA,GAAA,CAAA,CAAA;IACF;GAAM,MACL,IAAA,OAAU,IAAW,KAAA,QAAe,EAAG;IACxC,UAAA,GAAA,WAAA,CAAA,GAAA,CAAA,CAAA;EAED;MACE,SAAsB,KAAA,IAAW,IAAI,WAAA,CAAA,MAAA,KAAA,CAAA,IAAA,WAAA,CAAA,CAAA,CAAA,YAAA,UAAA,EAAA;IACtC,OAAA,WAAA,CAAA,CAAA,CAAA;EAED;EACD,OAAA,QAAA,CAAA,UAAA,CAAA,CAAA,SAAA,CAAA,WAAA,EAAA,SAAA,CAAA,CAAA","sourcesContent":["/** PURE_IMPORTS_START _Observable,_util_isScheduler,_operators_mergeAll,_fromArray PURE_IMPORTS_END */\nimport { Observable } from '../Observable';\nimport { isScheduler } from '../util/isScheduler';\nimport { mergeAll } from '../operators/mergeAll';\nimport { fromArray } from './fromArray';\nexport function merge() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i] = arguments[_i];\n    }\n    var concurrent = Number.POSITIVE_INFINITY;\n    var scheduler = null;\n    var last = observables[observables.length - 1];\n    if (isScheduler(last)) {\n        scheduler = observables.pop();\n        if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {\n            concurrent = observables.pop();\n        }\n    }\n    else if (typeof last === 'number') {\n        concurrent = observables.pop();\n    }\n    if (scheduler === null && observables.length === 1 && observables[0] instanceof Observable) {\n        return observables[0];\n    }\n    return mergeAll(concurrent)(fromArray(observables, scheduler));\n}\n//# sourceMappingURL=merge.js.map\n"]},"metadata":{},"sourceType":"module"}