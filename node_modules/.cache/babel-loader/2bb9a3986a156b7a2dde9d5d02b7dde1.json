{"ast":null,"code":"/** PURE_IMPORTS_START _Observable,_util_isArray,_operators_map,_util_isObject,_from PURE_IMPORTS_END */\nimport { Observable } from '../Observable';\nimport { isArray } from '../util/isArray';\nimport { map } from '../operators/map';\nimport { isObject } from '../util/isObject';\nimport { from } from './from';\nexport function forkJoin() {\n  var sources = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    sources[_i] = arguments[_i];\n  }\n  if (sources.length === 1) {\n    var first_1 = sources[0];\n    if (isArray(first_1)) {\n      return forkJoinInternal(first_1, null);\n    }\n    if (isObject(first_1) && Object.getPrototypeOf(first_1) === Object.prototype) {\n      var keys = Object.keys(first_1);\n      return forkJoinInternal(keys.map(function (key) {\n        return first_1[key];\n      }), keys);\n    }\n  }\n  if (typeof sources[sources.length - 1] === 'function') {\n    var resultSelector_1 = sources.pop();\n    sources = sources.length === 1 && isArray(sources[0]) ? sources[0] : sources;\n    return forkJoinInternal(sources, null).pipe(map(function (args) {\n      return resultSelector_1.apply(void 0, args);\n    }));\n  }\n  return forkJoinInternal(sources, null);\n}\nfunction forkJoinInternal(sources, keys) {\n  return new Observable(function (subscriber) {\n    var len = sources.length;\n    if (len === 0) {\n      subscriber.complete();\n      return;\n    }\n    var values = new Array(len);\n    var completed = 0;\n    var emitted = 0;\n    var _loop_1 = function (i) {\n      var source = from(sources[i]);\n      var hasValue = false;\n      subscriber.add(source.subscribe({\n        next: function (value) {\n          if (!hasValue) {\n            hasValue = true;\n            emitted++;\n          }\n          values[i] = value;\n        },\n        error: function (err) {\n          return subscriber.error(err);\n        },\n        complete: function () {\n          completed++;\n          if (completed === len || !hasValue) {\n            if (emitted === len) {\n              subscriber.next(keys ? keys.reduce(function (result, key, i) {\n                return result[key] = values[i], result;\n              }, {}) : values);\n            }\n            subscriber.complete();\n          }\n        }\n      }));\n    };\n    for (var i = 0; i < len; i++) {\n      _loop_1(i);\n    }\n  });\n}","map":{"version":3,"sources":["../../../src/internal/observable/forkJoin.ts"],"names":[],"mappings":"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","sourcesContent":["/** PURE_IMPORTS_START _Observable,_util_isArray,_operators_map,_util_isObject,_from PURE_IMPORTS_END */\nimport { Observable } from '../Observable';\nimport { isArray } from '../util/isArray';\nimport { map } from '../operators/map';\nimport { isObject } from '../util/isObject';\nimport { from } from './from';\nexport function forkJoin() {\n    var sources = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        sources[_i] = arguments[_i];\n    }\n    if (sources.length === 1) {\n        var first_1 = sources[0];\n        if (isArray(first_1)) {\n            return forkJoinInternal(first_1, null);\n        }\n        if (isObject(first_1) && Object.getPrototypeOf(first_1) === Object.prototype) {\n            var keys = Object.keys(first_1);\n            return forkJoinInternal(keys.map(function (key) { return first_1[key]; }), keys);\n        }\n    }\n    if (typeof sources[sources.length - 1] === 'function') {\n        var resultSelector_1 = sources.pop();\n        sources = (sources.length === 1 && isArray(sources[0])) ? sources[0] : sources;\n        return forkJoinInternal(sources, null).pipe(map(function (args) { return resultSelector_1.apply(void 0, args); }));\n    }\n    return forkJoinInternal(sources, null);\n}\nfunction forkJoinInternal(sources, keys) {\n    return new Observable(function (subscriber) {\n        var len = sources.length;\n        if (len === 0) {\n            subscriber.complete();\n            return;\n        }\n        var values = new Array(len);\n        var completed = 0;\n        var emitted = 0;\n        var _loop_1 = function (i) {\n            var source = from(sources[i]);\n            var hasValue = false;\n            subscriber.add(source.subscribe({\n                next: function (value) {\n                    if (!hasValue) {\n                        hasValue = true;\n                        emitted++;\n                    }\n                    values[i] = value;\n                },\n                error: function (err) { return subscriber.error(err); },\n                complete: function () {\n                    completed++;\n                    if (completed === len || !hasValue) {\n                        if (emitted === len) {\n                            subscriber.next(keys ?\n                                keys.reduce(function (result, key, i) { return (result[key] = values[i], result); }, {}) :\n                                values);\n                        }\n                        subscriber.complete();\n                    }\n                }\n            }));\n        };\n        for (var i = 0; i < len; i++) {\n            _loop_1(i);\n        }\n    });\n}\n//# sourceMappingURL=forkJoin.js.map\n"]},"metadata":{},"sourceType":"module"}