{"ast":null,"code":"import { getError, getErrorByCode, isReservedErrorCode } from \"./error\";\nimport { INTERNAL_ERROR, SERVER_ERROR } from \"./constants\";\nexport function payloadId(entropy = 3) {\n  const date = Date.now() * Math.pow(10, entropy);\n  const extra = Math.floor(Math.random() * Math.pow(10, entropy));\n  return date + extra;\n}\nexport function getBigIntRpcId(entropy = 6) {\n  return BigInt(payloadId(entropy));\n}\nexport function formatJsonRpcRequest(method, params, id) {\n  return {\n    id: id || payloadId(),\n    jsonrpc: \"2.0\",\n    method,\n    params\n  };\n}\nexport function formatJsonRpcResult(id, result) {\n  return {\n    id,\n    jsonrpc: \"2.0\",\n    result\n  };\n}\nexport function formatJsonRpcError(id, error, data) {\n  return {\n    id,\n    jsonrpc: \"2.0\",\n    error: formatErrorMessage(error, data)\n  };\n}\nexport function formatErrorMessage(error, data) {\n  if (typeof error === \"undefined\") {\n    return getError(INTERNAL_ERROR);\n  }\n  if (typeof error === \"string\") {\n    error = Object.assign(Object.assign({}, getError(SERVER_ERROR)), {\n      message: error\n    });\n  }\n  if (typeof data !== \"undefined\") {\n    error.data = data;\n  }\n  if (isReservedErrorCode(error.code)) {\n    error = getErrorByCode(error.code);\n  }\n  return error;\n}","map":{"version":3,"sources":["../../src/format.ts"],"names":[],"mappings":"AAAA,SAAS,QAAQ,EAAE,cAAc,EAAE,mBAAmB,QAA2B,SAAS;AAC1F,SAAS,cAAc,EAAE,YAAY,QAAQ,aAAa;AAG1D,OAAM,SAAU,SAAS,CAAC,OAAO,GAAG,CAAC,EAAA;EACnC,MAAM,IAAI,GAAG,IAAI,CAAC,GAAG,CAAA,CAAE,GAAG,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,OAAO,CAAC;EAC/C,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAA,CAAE,GAAG,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC;EAC/D,OAAO,IAAI,GAAG,KAAK;AACrB;AAEA,OAAM,SAAU,cAAc,CAAC,OAAO,GAAG,CAAC,EAAA;EACxC,OAAO,MAAM,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;AACnC;AAEA,OAAM,SAAU,oBAAoB,CAClC,MAAc,EACd,MAAS,EACT,EAAW,EAAA;EAEX,OAAO;IACL,EAAE,EAAE,EAAE,IAAI,SAAS,CAAA,CAAE;IACrB,OAAO,EAAE,KAAK;IACd,MAAM;IACN;GACD;AACH;AAEA,OAAM,SAAU,mBAAmB,CAAU,EAAU,EAAE,MAAS,EAAA;EAChE,OAAO;IACL,EAAE;IACF,OAAO,EAAE,KAAK;IACd;GACD;AACH;AAEA,OAAM,SAAU,kBAAkB,CAChC,EAAU,EACV,KAA8B,EAC9B,IAAa,EAAA;EAEb,OAAO;IACL,EAAE;IACF,OAAO,EAAE,KAAK;IACd,KAAK,EAAE,kBAAkB,CAAC,KAAK,EAAE,IAAI;GACtC;AACH;AAEA,OAAM,SAAU,kBAAkB,CAAC,KAA8B,EAAE,IAAa,EAAA;EAC9E,IAAI,OAAO,KAAK,KAAK,WAAW,EAAE;IAChC,OAAO,QAAQ,CAAC,cAAc,CAAC;EAChC;EACD,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;IAC7B,KAAK,GAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,CAAA,CAAA,EACA,QAAQ,CAAC,YAAY,CAAC,CAAA,EAAA;MACzB,OAAO,EAAE;IAAK,CAAA,CACf;EACF;EACD,IAAI,OAAO,IAAI,KAAK,WAAW,EAAE;IAC/B,KAAK,CAAC,IAAI,GAAG,IAAI;EAClB;EACD,IAAI,mBAAmB,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE;IACnC,KAAK,GAAG,cAAc,CAAC,KAAK,CAAC,IAAI,CAAC;EACnC;EACD,OAAO,KAAK;AACd","sourceRoot":"","sourcesContent":["import { getError, getErrorByCode, isReservedErrorCode } from \"./error\";\nimport { INTERNAL_ERROR, SERVER_ERROR } from \"./constants\";\nexport function payloadId(entropy = 3) {\n    const date = Date.now() * Math.pow(10, entropy);\n    const extra = Math.floor(Math.random() * Math.pow(10, entropy));\n    return date + extra;\n}\nexport function getBigIntRpcId(entropy = 6) {\n    return BigInt(payloadId(entropy));\n}\nexport function formatJsonRpcRequest(method, params, id) {\n    return {\n        id: id || payloadId(),\n        jsonrpc: \"2.0\",\n        method,\n        params,\n    };\n}\nexport function formatJsonRpcResult(id, result) {\n    return {\n        id,\n        jsonrpc: \"2.0\",\n        result,\n    };\n}\nexport function formatJsonRpcError(id, error, data) {\n    return {\n        id,\n        jsonrpc: \"2.0\",\n        error: formatErrorMessage(error, data),\n    };\n}\nexport function formatErrorMessage(error, data) {\n    if (typeof error === \"undefined\") {\n        return getError(INTERNAL_ERROR);\n    }\n    if (typeof error === \"string\") {\n        error = Object.assign(Object.assign({}, getError(SERVER_ERROR)), { message: error });\n    }\n    if (typeof data !== \"undefined\") {\n        error.data = data;\n    }\n    if (isReservedErrorCode(error.code)) {\n        error = getErrorByCode(error.code);\n    }\n    return error;\n}\n//# sourceMappingURL=format.js.map"]},"metadata":{},"sourceType":"module"}