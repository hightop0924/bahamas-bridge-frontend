{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { createTransport } from '@sentry/core';\nimport { getNativeFetchImplementation } from './utils';\n/**\n * Creates a Transport that uses the Fetch API to send events to Sentry.\n */\nexport function makeNewFetchTransport(options, nativeFetch) {\n  if (nativeFetch === void 0) {\n    nativeFetch = getNativeFetchImplementation();\n  }\n  function makeRequest(request) {\n    var requestOptions = __assign({\n      body: request.body,\n      method: 'POST',\n      referrerPolicy: 'origin'\n    }, options.requestOptions);\n    return nativeFetch(options.url, requestOptions).then(function (response) {\n      return response.text().then(function (body) {\n        return {\n          body: body,\n          headers: {\n            'x-sentry-rate-limits': response.headers.get('X-Sentry-Rate-Limits'),\n            'retry-after': response.headers.get('Retry-After')\n          },\n          reason: response.statusText,\n          statusCode: response.status\n        };\n      });\n    });\n  }\n  return createTransport({\n    bufferSize: options.bufferSize\n  }, makeRequest);\n}","map":{"version":3,"sources":["../../../../src/transports/new-fetch.ts"],"names":[],"mappings":";AAAA,SAEE,eAAe,QAIV,cAAc;AAErB,SAAoB,4BAA4B,QAAQ,SAAS;AAMjE;;AAEG;AACH,OAAM,SAAU,qBAAqB,CACnC,OAA8B,EAC9B,WAAuD,EAAA;EAAvD,IAAA,WAAA,KAAA,KAAA,CAAA,EAAA;IAAA,WAAA,GAAyB,4BAA4B,CAAA,CAAE;EAAA;EAEvD,SAAS,WAAW,CAAC,OAAyB,EAAA;IAC5C,IAAM,cAAc,GAAA,QAAA,CAAA;MAClB,IAAI,EAAE,OAAO,CAAC,IAAI;MAClB,MAAM,EAAE,MAAM;MACd,cAAc,EAAE;IAAQ,CAAA,EACrB,OAAO,CAAC,cAAc,CAC1B;IAED,OAAO,WAAW,CAAC,OAAO,CAAC,GAAG,EAAE,cAAc,CAAC,CAAC,IAAI,CAAC,UAAA,QAAQ,EAAA;MAC3D,OAAO,QAAQ,CAAC,IAAI,CAAA,CAAE,CAAC,IAAI,CAAC,UAAA,IAAI,EAAA;QAAI,OAAC;UACnC,IAAI,EAAA,IAAA;UACJ,OAAO,EAAE;YACP,sBAAsB,EAAE,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,sBAAsB,CAAC;YACpE,aAAa,EAAE,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,aAAa;WAClD;UACD,MAAM,EAAE,QAAQ,CAAC,UAAU;UAC3B,UAAU,EAAE,QAAQ,CAAC;SACtB;MARmC,CAQlC,CAAC;IACL,CAAC,CAAC;EACJ;EAEA,OAAO,eAAe,CAAC;IAAE,UAAU,EAAE,OAAO,CAAC;EAAU,CAAE,EAAE,WAAW,CAAC;AACzE","sourcesContent":["import {\n  BaseTransportOptions,\n  createTransport,\n  NewTransport,\n  TransportMakeRequestResponse,\n  TransportRequest,\n} from '@sentry/core';\n\nimport { FetchImpl, getNativeFetchImplementation } from './utils';\n\nexport interface FetchTransportOptions extends BaseTransportOptions {\n  requestOptions?: RequestInit;\n}\n\n/**\n * Creates a Transport that uses the Fetch API to send events to Sentry.\n */\nexport function makeNewFetchTransport(\n  options: FetchTransportOptions,\n  nativeFetch: FetchImpl = getNativeFetchImplementation(),\n): NewTransport {\n  function makeRequest(request: TransportRequest): PromiseLike<TransportMakeRequestResponse> {\n    const requestOptions: RequestInit = {\n      body: request.body,\n      method: 'POST',\n      referrerPolicy: 'origin',\n      ...options.requestOptions,\n    };\n\n    return nativeFetch(options.url, requestOptions).then(response => {\n      return response.text().then(body => ({\n        body,\n        headers: {\n          'x-sentry-rate-limits': response.headers.get('X-Sentry-Rate-Limits'),\n          'retry-after': response.headers.get('Retry-After'),\n        },\n        reason: response.statusText,\n        statusCode: response.status,\n      }));\n    });\n  }\n\n  return createTransport({ bufferSize: options.bufferSize }, makeRequest);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}