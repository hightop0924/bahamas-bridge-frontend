{"ast":null,"code":"import { __assign, __read, __spread } from \"tslib\";\nimport { getMainCarrier } from '@sentry/hub';\nimport { dynamicRequire, isNaN, isNodeEnv, loadModule, logger } from '@sentry/utils';\nimport { registerErrorInstrumentation } from './errors';\nimport { IS_DEBUG_BUILD } from './flags';\nimport { IdleTransaction } from './idletransaction';\nimport { Transaction } from './transaction';\nimport { hasTracingEnabled } from './utils';\n/** Returns all trace headers that are currently on the top scope. */\nfunction traceHeaders() {\n  var scope = this.getScope();\n  if (scope) {\n    var span = scope.getSpan();\n    if (span) {\n      return {\n        'sentry-trace': span.toTraceparent()\n      };\n    }\n  }\n  return {};\n}\n/**\n * Makes a sampling decision for the given transaction and stores it on the transaction.\n *\n * Called every time a transaction is created. Only transactions which emerge with a `sampled` value of `true` will be\n * sent to Sentry.\n *\n * @param transaction: The transaction needing a sampling decision\n * @param options: The current client's options, so we can access `tracesSampleRate` and/or `tracesSampler`\n * @param samplingContext: Default and user-provided data which may be used to help make the decision\n *\n * @returns The given transaction with its `sampled` value set\n */\nfunction sample(transaction, options, samplingContext) {\n  // nothing to do if tracing is not enabled\n  if (!hasTracingEnabled(options)) {\n    transaction.sampled = false;\n    return transaction;\n  }\n  // if the user has forced a sampling decision by passing a `sampled` value in their transaction context, go with that\n  if (transaction.sampled !== undefined) {\n    transaction.setMetadata({\n      transactionSampling: {\n        method: 'explicitly_set'\n      }\n    });\n    return transaction;\n  }\n  // we would have bailed already if neither `tracesSampler` nor `tracesSampleRate` were defined, so one of these should\n  // work; prefer the hook if so\n  var sampleRate;\n  if (typeof options.tracesSampler === 'function') {\n    sampleRate = options.tracesSampler(samplingContext);\n    transaction.setMetadata({\n      transactionSampling: {\n        method: 'client_sampler',\n        // cast to number in case it's a boolean\n        rate: Number(sampleRate)\n      }\n    });\n  } else if (samplingContext.parentSampled !== undefined) {\n    sampleRate = samplingContext.parentSampled;\n    transaction.setMetadata({\n      transactionSampling: {\n        method: 'inheritance'\n      }\n    });\n  } else {\n    sampleRate = options.tracesSampleRate;\n    transaction.setMetadata({\n      transactionSampling: {\n        method: 'client_rate',\n        // cast to number in case it's a boolean\n        rate: Number(sampleRate)\n      }\n    });\n  }\n  // Since this is coming from the user (or from a function provided by the user), who knows what we might get. (The\n  // only valid values are booleans or numbers between 0 and 1.)\n  if (!isValidSampleRate(sampleRate)) {\n    IS_DEBUG_BUILD && logger.warn('[Tracing] Discarding transaction because of invalid sample rate.');\n    transaction.sampled = false;\n    return transaction;\n  }\n  // if the function returned 0 (or false), or if `tracesSampleRate` is 0, it's a sign the transaction should be dropped\n  if (!sampleRate) {\n    IS_DEBUG_BUILD && logger.log(\"[Tracing] Discarding transaction because \" + (typeof options.tracesSampler === 'function' ? 'tracesSampler returned 0 or false' : 'a negative sampling decision was inherited or tracesSampleRate is set to 0'));\n    transaction.sampled = false;\n    return transaction;\n  }\n  // Now we roll the dice. Math.random is inclusive of 0, but not of 1, so strict < is safe here. In case sampleRate is\n  // a boolean, the < comparison will cause it to be automatically cast to 1 if it's true and 0 if it's false.\n  transaction.sampled = Math.random() < sampleRate;\n  // if we're not going to keep it, we're done\n  if (!transaction.sampled) {\n    IS_DEBUG_BUILD && logger.log(\"[Tracing] Discarding transaction because it's not included in the random sample (sampling rate = \" + Number(sampleRate) + \")\");\n    return transaction;\n  }\n  IS_DEBUG_BUILD && logger.log(\"[Tracing] starting \" + transaction.op + \" transaction - \" + transaction.name);\n  return transaction;\n}\n/**\n * Checks the given sample rate to make sure it is valid type and value (a boolean, or a number between 0 and 1).\n */\nfunction isValidSampleRate(rate) {\n  // we need to check NaN explicitly because it's of type 'number' and therefore wouldn't get caught by this typecheck\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  if (isNaN(rate) || !(typeof rate === 'number' || typeof rate === 'boolean')) {\n    IS_DEBUG_BUILD && logger.warn(\"[Tracing] Given sample rate is invalid. Sample rate must be a boolean or a number between 0 and 1. Got \" + JSON.stringify(rate) + \" of type \" + JSON.stringify(typeof rate) + \".\");\n    return false;\n  }\n  // in case sampleRate is a boolean, it will get automatically cast to 1 if it's true and 0 if it's false\n  if (rate < 0 || rate > 1) {\n    IS_DEBUG_BUILD && logger.warn(\"[Tracing] Given sample rate is invalid. Sample rate must be between 0 and 1. Got \" + rate + \".\");\n    return false;\n  }\n  return true;\n}\n/**\n * Creates a new transaction and adds a sampling decision if it doesn't yet have one.\n *\n * The Hub.startTransaction method delegates to this method to do its work, passing the Hub instance in as `this`, as if\n * it had been called on the hub directly. Exists as a separate function so that it can be injected into the class as an\n * \"extension method.\"\n *\n * @param this: The Hub starting the transaction\n * @param transactionContext: Data used to configure the transaction\n * @param CustomSamplingContext: Optional data to be provided to the `tracesSampler` function (if any)\n *\n * @returns The new transaction\n *\n * @see {@link Hub.startTransaction}\n */\nfunction _startTransaction(transactionContext, customSamplingContext) {\n  var client = this.getClient();\n  var options = client && client.getOptions() || {};\n  var transaction = new Transaction(transactionContext, this);\n  transaction = sample(transaction, options, __assign({\n    parentSampled: transactionContext.parentSampled,\n    transactionContext: transactionContext\n  }, customSamplingContext));\n  if (transaction.sampled) {\n    transaction.initSpanRecorder(options._experiments && options._experiments.maxSpans);\n  }\n  return transaction;\n}\n/**\n * Create new idle transaction.\n */\nexport function startIdleTransaction(hub, transactionContext, idleTimeout, onScope, customSamplingContext) {\n  var client = hub.getClient();\n  var options = client && client.getOptions() || {};\n  var transaction = new IdleTransaction(transactionContext, hub, idleTimeout, onScope);\n  transaction = sample(transaction, options, __assign({\n    parentSampled: transactionContext.parentSampled,\n    transactionContext: transactionContext\n  }, customSamplingContext));\n  if (transaction.sampled) {\n    transaction.initSpanRecorder(options._experiments && options._experiments.maxSpans);\n  }\n  return transaction;\n}\n/**\n * @private\n */\nexport function _addTracingExtensions() {\n  var carrier = getMainCarrier();\n  if (!carrier.__SENTRY__) {\n    return;\n  }\n  carrier.__SENTRY__.extensions = carrier.__SENTRY__.extensions || {};\n  if (!carrier.__SENTRY__.extensions.startTransaction) {\n    carrier.__SENTRY__.extensions.startTransaction = _startTransaction;\n  }\n  if (!carrier.__SENTRY__.extensions.traceHeaders) {\n    carrier.__SENTRY__.extensions.traceHeaders = traceHeaders;\n  }\n}\n/**\n * @private\n */\nfunction _autoloadDatabaseIntegrations() {\n  var carrier = getMainCarrier();\n  if (!carrier.__SENTRY__) {\n    return;\n  }\n  var packageToIntegrationMapping = {\n    mongodb: function () {\n      var integration = dynamicRequire(module, './integrations/node/mongo');\n      return new integration.Mongo();\n    },\n    mongoose: function () {\n      var integration = dynamicRequire(module, './integrations/node/mongo');\n      return new integration.Mongo({\n        mongoose: true\n      });\n    },\n    mysql: function () {\n      var integration = dynamicRequire(module, './integrations/node/mysql');\n      return new integration.Mysql();\n    },\n    pg: function () {\n      var integration = dynamicRequire(module, './integrations/node/postgres');\n      return new integration.Postgres();\n    }\n  };\n  var mappedPackages = Object.keys(packageToIntegrationMapping).filter(function (moduleName) {\n    return !!loadModule(moduleName);\n  }).map(function (pkg) {\n    try {\n      return packageToIntegrationMapping[pkg]();\n    } catch (e) {\n      return undefined;\n    }\n  }).filter(function (p) {\n    return p;\n  });\n  if (mappedPackages.length > 0) {\n    carrier.__SENTRY__.integrations = __spread(carrier.__SENTRY__.integrations || [], mappedPackages);\n  }\n}\n/**\n * This patches the global object and injects the Tracing extensions methods\n */\nexport function addExtensionMethods() {\n  _addTracingExtensions();\n  // Detect and automatically load specified integrations.\n  if (isNodeEnv()) {\n    _autoloadDatabaseIntegrations();\n  }\n  // If an error happens globally, we should make sure transaction status is set to error.\n  registerErrorInstrumentation();\n}","map":{"version":3,"sources":["../../../src/hubextensions.ts"],"names":[],"mappings":"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","sourcesContent":["import { getMainCarrier, Hub } from '@sentry/hub';\nimport {\n  CustomSamplingContext,\n  Integration,\n  IntegrationClass,\n  Options,\n  SamplingContext,\n  TransactionContext,\n} from '@sentry/types';\nimport { dynamicRequire, isNaN, isNodeEnv, loadModule, logger } from '@sentry/utils';\n\nimport { registerErrorInstrumentation } from './errors';\nimport { IS_DEBUG_BUILD } from './flags';\nimport { IdleTransaction } from './idletransaction';\nimport { Transaction } from './transaction';\nimport { hasTracingEnabled } from './utils';\n\n/** Returns all trace headers that are currently on the top scope. */\nfunction traceHeaders(this: Hub): { [key: string]: string } {\n  const scope = this.getScope();\n  if (scope) {\n    const span = scope.getSpan();\n    if (span) {\n      return {\n        'sentry-trace': span.toTraceparent(),\n      };\n    }\n  }\n  return {};\n}\n\n/**\n * Makes a sampling decision for the given transaction and stores it on the transaction.\n *\n * Called every time a transaction is created. Only transactions which emerge with a `sampled` value of `true` will be\n * sent to Sentry.\n *\n * @param transaction: The transaction needing a sampling decision\n * @param options: The current client's options, so we can access `tracesSampleRate` and/or `tracesSampler`\n * @param samplingContext: Default and user-provided data which may be used to help make the decision\n *\n * @returns The given transaction with its `sampled` value set\n */\nfunction sample<T extends Transaction>(transaction: T, options: Options, samplingContext: SamplingContext): T {\n  // nothing to do if tracing is not enabled\n  if (!hasTracingEnabled(options)) {\n    transaction.sampled = false;\n    return transaction;\n  }\n\n  // if the user has forced a sampling decision by passing a `sampled` value in their transaction context, go with that\n  if (transaction.sampled !== undefined) {\n    transaction.setMetadata({\n      transactionSampling: { method: 'explicitly_set' },\n    });\n    return transaction;\n  }\n\n  // we would have bailed already if neither `tracesSampler` nor `tracesSampleRate` were defined, so one of these should\n  // work; prefer the hook if so\n  let sampleRate;\n  if (typeof options.tracesSampler === 'function') {\n    sampleRate = options.tracesSampler(samplingContext);\n    transaction.setMetadata({\n      transactionSampling: {\n        method: 'client_sampler',\n        // cast to number in case it's a boolean\n        rate: Number(sampleRate),\n      },\n    });\n  } else if (samplingContext.parentSampled !== undefined) {\n    sampleRate = samplingContext.parentSampled;\n    transaction.setMetadata({\n      transactionSampling: { method: 'inheritance' },\n    });\n  } else {\n    sampleRate = options.tracesSampleRate;\n    transaction.setMetadata({\n      transactionSampling: {\n        method: 'client_rate',\n        // cast to number in case it's a boolean\n        rate: Number(sampleRate),\n      },\n    });\n  }\n\n  // Since this is coming from the user (or from a function provided by the user), who knows what we might get. (The\n  // only valid values are booleans or numbers between 0 and 1.)\n  if (!isValidSampleRate(sampleRate)) {\n    IS_DEBUG_BUILD && logger.warn('[Tracing] Discarding transaction because of invalid sample rate.');\n    transaction.sampled = false;\n    return transaction;\n  }\n\n  // if the function returned 0 (or false), or if `tracesSampleRate` is 0, it's a sign the transaction should be dropped\n  if (!sampleRate) {\n    IS_DEBUG_BUILD &&\n      logger.log(\n        `[Tracing] Discarding transaction because ${\n          typeof options.tracesSampler === 'function'\n            ? 'tracesSampler returned 0 or false'\n            : 'a negative sampling decision was inherited or tracesSampleRate is set to 0'\n        }`,\n      );\n    transaction.sampled = false;\n    return transaction;\n  }\n\n  // Now we roll the dice. Math.random is inclusive of 0, but not of 1, so strict < is safe here. In case sampleRate is\n  // a boolean, the < comparison will cause it to be automatically cast to 1 if it's true and 0 if it's false.\n  transaction.sampled = Math.random() < (sampleRate as number | boolean);\n\n  // if we're not going to keep it, we're done\n  if (!transaction.sampled) {\n    IS_DEBUG_BUILD &&\n      logger.log(\n        `[Tracing] Discarding transaction because it's not included in the random sample (sampling rate = ${Number(\n          sampleRate,\n        )})`,\n      );\n    return transaction;\n  }\n\n  IS_DEBUG_BUILD && logger.log(`[Tracing] starting ${transaction.op} transaction - ${transaction.name}`);\n  return transaction;\n}\n\n/**\n * Checks the given sample rate to make sure it is valid type and value (a boolean, or a number between 0 and 1).\n */\nfunction isValidSampleRate(rate: unknown): boolean {\n  // we need to check NaN explicitly because it's of type 'number' and therefore wouldn't get caught by this typecheck\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  if (isNaN(rate) || !(typeof rate === 'number' || typeof rate === 'boolean')) {\n    IS_DEBUG_BUILD &&\n      logger.warn(\n        `[Tracing] Given sample rate is invalid. Sample rate must be a boolean or a number between 0 and 1. Got ${JSON.stringify(\n          rate,\n        )} of type ${JSON.stringify(typeof rate)}.`,\n      );\n    return false;\n  }\n\n  // in case sampleRate is a boolean, it will get automatically cast to 1 if it's true and 0 if it's false\n  if (rate < 0 || rate > 1) {\n    IS_DEBUG_BUILD &&\n      logger.warn(`[Tracing] Given sample rate is invalid. Sample rate must be between 0 and 1. Got ${rate}.`);\n    return false;\n  }\n  return true;\n}\n\n/**\n * Creates a new transaction and adds a sampling decision if it doesn't yet have one.\n *\n * The Hub.startTransaction method delegates to this method to do its work, passing the Hub instance in as `this`, as if\n * it had been called on the hub directly. Exists as a separate function so that it can be injected into the class as an\n * \"extension method.\"\n *\n * @param this: The Hub starting the transaction\n * @param transactionContext: Data used to configure the transaction\n * @param CustomSamplingContext: Optional data to be provided to the `tracesSampler` function (if any)\n *\n * @returns The new transaction\n *\n * @see {@link Hub.startTransaction}\n */\nfunction _startTransaction(\n  this: Hub,\n  transactionContext: TransactionContext,\n  customSamplingContext?: CustomSamplingContext,\n): Transaction {\n  const client = this.getClient();\n  const options = (client && client.getOptions()) || {};\n\n  let transaction = new Transaction(transactionContext, this);\n  transaction = sample(transaction, options, {\n    parentSampled: transactionContext.parentSampled,\n    transactionContext,\n    ...customSamplingContext,\n  });\n  if (transaction.sampled) {\n    transaction.initSpanRecorder(options._experiments && (options._experiments.maxSpans as number));\n  }\n  return transaction;\n}\n\n/**\n * Create new idle transaction.\n */\nexport function startIdleTransaction(\n  hub: Hub,\n  transactionContext: TransactionContext,\n  idleTimeout?: number,\n  onScope?: boolean,\n  customSamplingContext?: CustomSamplingContext,\n): IdleTransaction {\n  const client = hub.getClient();\n  const options = (client && client.getOptions()) || {};\n\n  let transaction = new IdleTransaction(transactionContext, hub, idleTimeout, onScope);\n  transaction = sample(transaction, options, {\n    parentSampled: transactionContext.parentSampled,\n    transactionContext,\n    ...customSamplingContext,\n  });\n  if (transaction.sampled) {\n    transaction.initSpanRecorder(options._experiments && (options._experiments.maxSpans as number));\n  }\n  return transaction;\n}\n\n/**\n * @private\n */\nexport function _addTracingExtensions(): void {\n  const carrier = getMainCarrier();\n  if (!carrier.__SENTRY__) {\n    return;\n  }\n  carrier.__SENTRY__.extensions = carrier.__SENTRY__.extensions || {};\n  if (!carrier.__SENTRY__.extensions.startTransaction) {\n    carrier.__SENTRY__.extensions.startTransaction = _startTransaction;\n  }\n  if (!carrier.__SENTRY__.extensions.traceHeaders) {\n    carrier.__SENTRY__.extensions.traceHeaders = traceHeaders;\n  }\n}\n\n/**\n * @private\n */\nfunction _autoloadDatabaseIntegrations(): void {\n  const carrier = getMainCarrier();\n  if (!carrier.__SENTRY__) {\n    return;\n  }\n\n  const packageToIntegrationMapping: Record<string, () => Integration> = {\n    mongodb() {\n      const integration = dynamicRequire(module, './integrations/node/mongo') as {\n        Mongo: IntegrationClass<Integration>;\n      };\n      return new integration.Mongo();\n    },\n    mongoose() {\n      const integration = dynamicRequire(module, './integrations/node/mongo') as {\n        Mongo: IntegrationClass<Integration>;\n      };\n      return new integration.Mongo({ mongoose: true });\n    },\n    mysql() {\n      const integration = dynamicRequire(module, './integrations/node/mysql') as {\n        Mysql: IntegrationClass<Integration>;\n      };\n      return new integration.Mysql();\n    },\n    pg() {\n      const integration = dynamicRequire(module, './integrations/node/postgres') as {\n        Postgres: IntegrationClass<Integration>;\n      };\n      return new integration.Postgres();\n    },\n  };\n\n  const mappedPackages = Object.keys(packageToIntegrationMapping)\n    .filter(moduleName => !!loadModule(moduleName))\n    .map(pkg => {\n      try {\n        return packageToIntegrationMapping[pkg]();\n      } catch (e) {\n        return undefined;\n      }\n    })\n    .filter(p => p) as Integration[];\n\n  if (mappedPackages.length > 0) {\n    carrier.__SENTRY__.integrations = [...(carrier.__SENTRY__.integrations || []), ...mappedPackages];\n  }\n}\n\n/**\n * This patches the global object and injects the Tracing extensions methods\n */\nexport function addExtensionMethods(): void {\n  _addTracingExtensions();\n\n  // Detect and automatically load specified integrations.\n  if (isNodeEnv()) {\n    _autoloadDatabaseIntegrations();\n  }\n\n  // If an error happens globally, we should make sure transaction status is set to error.\n  registerErrorInstrumentation();\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}