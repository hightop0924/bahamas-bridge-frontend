{"ast":null,"code":"/** PURE_IMPORTS_START _observable_ConnectableObservable PURE_IMPORTS_END */\nimport { connectableObservableDescriptor } from '../observable/ConnectableObservable';\nexport function multicast(subjectOrSubjectFactory, selector) {\n  return function multicastOperatorFunction(source) {\n    var subjectFactory;\n    if (typeof subjectOrSubjectFactory === 'function') {\n      subjectFactory = subjectOrSubjectFactory;\n    } else {\n      subjectFactory = function subjectFactory() {\n        return subjectOrSubjectFactory;\n      };\n    }\n    if (typeof selector === 'function') {\n      return source.lift(new MulticastOperator(subjectFactory, selector));\n    }\n    var connectable = Object.create(source, connectableObservableDescriptor);\n    connectable.source = source;\n    connectable.subjectFactory = subjectFactory;\n    return connectable;\n  };\n}\nvar MulticastOperator = /*@__PURE__*/function () {\n  function MulticastOperator(subjectFactory, selector) {\n    this.subjectFactory = subjectFactory;\n    this.selector = selector;\n  }\n  MulticastOperator.prototype.call = function (subscriber, source) {\n    var selector = this.selector;\n    var subject = this.subjectFactory();\n    var subscription = selector(subject).subscribe(subscriber);\n    subscription.add(source.subscribe(subject));\n    return subscription;\n  };\n  return MulticastOperator;\n}();\nexport { MulticastOperator };","map":{"version":3,"sources":["../../../src/internal/operators/multicast.ts"],"names":[],"mappings":"AAIA;AA6BA,SAAM,+BAA0B,QAAA,qCACmD;AACjF,OAAA,SAAO,SAAS,CAAA,uBAA0B,EAAA,QAAqB,EAAA;EAC7D,OAAA,SAAI,yBAAiC,CAAA,MAAA,EAAA;IACrC,IAAI,cAAO;QACT,OAAA,uBAAmC,KAAA,UAAwB,EAAA;MAC5D,cAAA,GAAA,uBAAA;KAAM,MACL;MACE,cAAmB,GAAA,SAAA,cAAwB,CAAA,EAAA;QAC3C,OAAA,uBAAA;MACH,CAAA;IAED;QACE,OAAO,QAAO,KAAK,UAAI,EAAA;MACxB,OAAA,MAAA,CAAA,IAAA,CAAA,IAAA,iBAAA,CAAA,cAAA,EAAA,QAAA,CAAA,CAAA;IAED;IACA,IAAA,WAAY,GAAM,MAAG,CAAA,MAAO,CAAA,MAAA,EAAA,+BAAA,CAAA;IAC5B,WAAW,CAAC,MAAA,GAAA,MAAc;IAE1B,WAAkC,CAAA,cAAY,GAAA,cAAA;IAC9C,OAAA,WAAA;EACH,CAAA;AAED;IACE,iBAAA,GAAA,aAAoB,YACA;EADA,SAAA,iBAAA,CAAA,cAAgC,EAAA,QAAA,EAAA;IAChC,IAAA,CAAA,cAAA,GAAA,cAAkD;IACrE,IAAA,CAAA,QAAA,GAAA,QAAA;EACD;EACU,iBAAA,CAAA,SAAA,CAAA,IAAQ,GAAU,UAAA,UAAA,EAAA,MAAA,EAAA;IAC1B,IAAM,QAAO,GAAG,IAAK,CAAA,QAAA;IACrB,IAAM,OAAA,GAAA,IAAY,CAAG,cAAS,CAAA,CAAO;IACrC,IAAA,YAAgB,GAAC,QAAO,CAAA,OAAU,CAAA,CAAA,SAAU,CAAA,UAAA,CAAA;IAC5C,YAAO,CAAA,GAAA,CAAA,MAAa,CAAA,SAAA,CAAA,OAAA,CAAA,CAAA;IACrB,OAAA,YAAA;EACH,CAAA;EAAC,OAAA,iBAAA","sourcesContent":["/** PURE_IMPORTS_START _observable_ConnectableObservable PURE_IMPORTS_END */\nimport { connectableObservableDescriptor } from '../observable/ConnectableObservable';\nexport function multicast(subjectOrSubjectFactory, selector) {\n    return function multicastOperatorFunction(source) {\n        var subjectFactory;\n        if (typeof subjectOrSubjectFactory === 'function') {\n            subjectFactory = subjectOrSubjectFactory;\n        }\n        else {\n            subjectFactory = function subjectFactory() {\n                return subjectOrSubjectFactory;\n            };\n        }\n        if (typeof selector === 'function') {\n            return source.lift(new MulticastOperator(subjectFactory, selector));\n        }\n        var connectable = Object.create(source, connectableObservableDescriptor);\n        connectable.source = source;\n        connectable.subjectFactory = subjectFactory;\n        return connectable;\n    };\n}\nvar MulticastOperator = /*@__PURE__*/ (function () {\n    function MulticastOperator(subjectFactory, selector) {\n        this.subjectFactory = subjectFactory;\n        this.selector = selector;\n    }\n    MulticastOperator.prototype.call = function (subscriber, source) {\n        var selector = this.selector;\n        var subject = this.subjectFactory();\n        var subscription = selector(subject).subscribe(subscriber);\n        subscription.add(source.subscribe(subject));\n        return subscription;\n    };\n    return MulticastOperator;\n}());\nexport { MulticastOperator };\n//# sourceMappingURL=multicast.js.map\n"]},"metadata":{},"sourceType":"module"}