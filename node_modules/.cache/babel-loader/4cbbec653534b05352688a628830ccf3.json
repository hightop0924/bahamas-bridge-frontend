{"ast":null,"code":"import { __assign } from \"tslib\";\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable max-lines */\nimport { getCurrentHub } from '@sentry/core';\nimport { Severity } from '@sentry/types';\nimport { addInstrumentationHandler, getEventDescription, getGlobalObject, htmlTreeAsString, parseUrl, safeJoin, severityFromString } from '@sentry/utils';\n/**\n * Default Breadcrumbs instrumentations\n * TODO: Deprecated - with v6, this will be renamed to `Instrument`\n */\nvar Breadcrumbs = /** @class */function () {\n  /**\n   * @inheritDoc\n   */\n  function Breadcrumbs(options) {\n    /**\n     * @inheritDoc\n     */\n    this.name = Breadcrumbs.id;\n    this._options = __assign({\n      console: true,\n      dom: true,\n      fetch: true,\n      history: true,\n      sentry: true,\n      xhr: true\n    }, options);\n  }\n  /**\n   * Create a breadcrumb of `sentry` from the events themselves\n   */\n  Breadcrumbs.prototype.addSentryBreadcrumb = function (event) {\n    if (!this._options.sentry) {\n      return;\n    }\n    getCurrentHub().addBreadcrumb({\n      category: \"sentry.\" + (event.type === 'transaction' ? 'transaction' : 'event'),\n      event_id: event.event_id,\n      level: event.level,\n      message: getEventDescription(event)\n    }, {\n      event: event\n    });\n  };\n  /**\n   * Instrument browser built-ins w/ breadcrumb capturing\n   *  - Console API\n   *  - DOM API (click/typing)\n   *  - XMLHttpRequest API\n   *  - Fetch API\n   *  - History API\n   */\n  Breadcrumbs.prototype.setupOnce = function () {\n    if (this._options.console) {\n      addInstrumentationHandler('console', _consoleBreadcrumb);\n    }\n    if (this._options.dom) {\n      addInstrumentationHandler('dom', _domBreadcrumb(this._options.dom));\n    }\n    if (this._options.xhr) {\n      addInstrumentationHandler('xhr', _xhrBreadcrumb);\n    }\n    if (this._options.fetch) {\n      addInstrumentationHandler('fetch', _fetchBreadcrumb);\n    }\n    if (this._options.history) {\n      addInstrumentationHandler('history', _historyBreadcrumb);\n    }\n  };\n  /**\n   * @inheritDoc\n   */\n  Breadcrumbs.id = 'Breadcrumbs';\n  return Breadcrumbs;\n}();\nexport { Breadcrumbs };\n/**\n * A HOC that creaes a function that creates breadcrumbs from DOM API calls.\n * This is a HOC so that we get access to dom options in the closure.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _domBreadcrumb(dom) {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  function _innerDomBreadcrumb(handlerData) {\n    var target;\n    var keyAttrs = typeof dom === 'object' ? dom.serializeAttribute : undefined;\n    if (typeof keyAttrs === 'string') {\n      keyAttrs = [keyAttrs];\n    }\n    // Accessing event.target can throw (see getsentry/raven-js#838, #768)\n    try {\n      target = handlerData.event.target ? htmlTreeAsString(handlerData.event.target, keyAttrs) : htmlTreeAsString(handlerData.event, keyAttrs);\n    } catch (e) {\n      target = '<unknown>';\n    }\n    if (target.length === 0) {\n      return;\n    }\n    getCurrentHub().addBreadcrumb({\n      category: \"ui.\" + handlerData.name,\n      message: target\n    }, {\n      event: handlerData.event,\n      name: handlerData.name,\n      global: handlerData.global\n    });\n  }\n  return _innerDomBreadcrumb;\n}\n/**\n * Creates breadcrumbs from console API calls\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _consoleBreadcrumb(handlerData) {\n  var breadcrumb = {\n    category: 'console',\n    data: {\n      arguments: handlerData.args,\n      logger: 'console'\n    },\n    level: severityFromString(handlerData.level),\n    message: safeJoin(handlerData.args, ' ')\n  };\n  if (handlerData.level === 'assert') {\n    if (handlerData.args[0] === false) {\n      breadcrumb.message = \"Assertion failed: \" + (safeJoin(handlerData.args.slice(1), ' ') || 'console.assert');\n      breadcrumb.data.arguments = handlerData.args.slice(1);\n    } else {\n      // Don't capture a breadcrumb for passed assertions\n      return;\n    }\n  }\n  getCurrentHub().addBreadcrumb(breadcrumb, {\n    input: handlerData.args,\n    level: handlerData.level\n  });\n}\n/**\n * Creates breadcrumbs from XHR API calls\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _xhrBreadcrumb(handlerData) {\n  if (handlerData.endTimestamp) {\n    // We only capture complete, non-sentry requests\n    if (handlerData.xhr.__sentry_own_request__) {\n      return;\n    }\n    var _a = handlerData.xhr.__sentry_xhr__ || {},\n      method = _a.method,\n      url = _a.url,\n      status_code = _a.status_code,\n      body = _a.body;\n    getCurrentHub().addBreadcrumb({\n      category: 'xhr',\n      data: {\n        method: method,\n        url: url,\n        status_code: status_code\n      },\n      type: 'http'\n    }, {\n      xhr: handlerData.xhr,\n      input: body\n    });\n    return;\n  }\n}\n/**\n * Creates breadcrumbs from fetch API calls\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _fetchBreadcrumb(handlerData) {\n  // We only capture complete fetch requests\n  if (!handlerData.endTimestamp) {\n    return;\n  }\n  if (handlerData.fetchData.url.match(/sentry_key/) && handlerData.fetchData.method === 'POST') {\n    // We will not create breadcrumbs for fetch requests that contain `sentry_key` (internal sentry requests)\n    return;\n  }\n  if (handlerData.error) {\n    getCurrentHub().addBreadcrumb({\n      category: 'fetch',\n      data: handlerData.fetchData,\n      level: Severity.Error,\n      type: 'http'\n    }, {\n      data: handlerData.error,\n      input: handlerData.args\n    });\n  } else {\n    getCurrentHub().addBreadcrumb({\n      category: 'fetch',\n      data: __assign(__assign({}, handlerData.fetchData), {\n        status_code: handlerData.response.status\n      }),\n      type: 'http'\n    }, {\n      input: handlerData.args,\n      response: handlerData.response\n    });\n  }\n}\n/**\n * Creates breadcrumbs from history API calls\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _historyBreadcrumb(handlerData) {\n  var global = getGlobalObject();\n  var from = handlerData.from;\n  var to = handlerData.to;\n  var parsedLoc = parseUrl(global.location.href);\n  var parsedFrom = parseUrl(from);\n  var parsedTo = parseUrl(to);\n  // Initial pushState doesn't provide `from` information\n  if (!parsedFrom.path) {\n    parsedFrom = parsedLoc;\n  }\n  // Use only the path component of the URL if the URL matches the current\n  // document (almost all the time when using pushState)\n  if (parsedLoc.protocol === parsedTo.protocol && parsedLoc.host === parsedTo.host) {\n    to = parsedTo.relative;\n  }\n  if (parsedLoc.protocol === parsedFrom.protocol && parsedLoc.host === parsedFrom.host) {\n    from = parsedFrom.relative;\n  }\n  getCurrentHub().addBreadcrumb({\n    category: 'navigation',\n    data: {\n      from: from,\n      to: to\n    }\n  });\n}","map":{"version":3,"sources":["../../../../src/integrations/breadcrumbs.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable max-lines */\nimport { getCurrentHub } from '@sentry/core';\nimport { Event, Integration, Severity } from '@sentry/types';\nimport {\n  addInstrumentationHandler,\n  getEventDescription,\n  getGlobalObject,\n  htmlTreeAsString,\n  parseUrl,\n  safeJoin,\n  severityFromString,\n} from '@sentry/utils';\n\n/** JSDoc */\ninterface BreadcrumbsOptions {\n  console: boolean;\n  dom: boolean | { serializeAttribute: string | string[] };\n  fetch: boolean;\n  history: boolean;\n  sentry: boolean;\n  xhr: boolean;\n}\n\n/**\n * Default Breadcrumbs instrumentations\n * TODO: Deprecated - with v6, this will be renamed to `Instrument`\n */\nexport class Breadcrumbs implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'Breadcrumbs';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = Breadcrumbs.id;\n\n  /** JSDoc */\n  private readonly _options: BreadcrumbsOptions;\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(options?: Partial<BreadcrumbsOptions>) {\n    this._options = {\n      console: true,\n      dom: true,\n      fetch: true,\n      history: true,\n      sentry: true,\n      xhr: true,\n      ...options,\n    };\n  }\n\n  /**\n   * Create a breadcrumb of `sentry` from the events themselves\n   */\n  public addSentryBreadcrumb(event: Event): void {\n    if (!this._options.sentry) {\n      return;\n    }\n    getCurrentHub().addBreadcrumb(\n      {\n        category: `sentry.${event.type === 'transaction' ? 'transaction' : 'event'}`,\n        event_id: event.event_id,\n        level: event.level,\n        message: getEventDescription(event),\n      },\n      {\n        event,\n      },\n    );\n  }\n\n  /**\n   * Instrument browser built-ins w/ breadcrumb capturing\n   *  - Console API\n   *  - DOM API (click/typing)\n   *  - XMLHttpRequest API\n   *  - Fetch API\n   *  - History API\n   */\n  public setupOnce(): void {\n    if (this._options.console) {\n      addInstrumentationHandler('console', _consoleBreadcrumb);\n    }\n    if (this._options.dom) {\n      addInstrumentationHandler('dom', _domBreadcrumb(this._options.dom));\n    }\n    if (this._options.xhr) {\n      addInstrumentationHandler('xhr', _xhrBreadcrumb);\n    }\n    if (this._options.fetch) {\n      addInstrumentationHandler('fetch', _fetchBreadcrumb);\n    }\n    if (this._options.history) {\n      addInstrumentationHandler('history', _historyBreadcrumb);\n    }\n  }\n}\n\n/**\n * A HOC that creaes a function that creates breadcrumbs from DOM API calls.\n * This is a HOC so that we get access to dom options in the closure.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _domBreadcrumb(dom: BreadcrumbsOptions['dom']): (handlerData: { [key: string]: any }) => void {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  function _innerDomBreadcrumb(handlerData: { [key: string]: any }): void {\n    let target;\n    let keyAttrs = typeof dom === 'object' ? dom.serializeAttribute : undefined;\n\n    if (typeof keyAttrs === 'string') {\n      keyAttrs = [keyAttrs];\n    }\n\n    // Accessing event.target can throw (see getsentry/raven-js#838, #768)\n    try {\n      target = handlerData.event.target\n        ? htmlTreeAsString(handlerData.event.target as Node, keyAttrs)\n        : htmlTreeAsString(handlerData.event as unknown as Node, keyAttrs);\n    } catch (e) {\n      target = '<unknown>';\n    }\n\n    if (target.length === 0) {\n      return;\n    }\n\n    getCurrentHub().addBreadcrumb(\n      {\n        category: `ui.${handlerData.name}`,\n        message: target,\n      },\n      {\n        event: handlerData.event,\n        name: handlerData.name,\n        global: handlerData.global,\n      },\n    );\n  }\n\n  return _innerDomBreadcrumb;\n}\n\n/**\n * Creates breadcrumbs from console API calls\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _consoleBreadcrumb(handlerData: { [key: string]: any }): void {\n  const breadcrumb = {\n    category: 'console',\n    data: {\n      arguments: handlerData.args,\n      logger: 'console',\n    },\n    level: severityFromString(handlerData.level),\n    message: safeJoin(handlerData.args, ' '),\n  };\n\n  if (handlerData.level === 'assert') {\n    if (handlerData.args[0] === false) {\n      breadcrumb.message = `Assertion failed: ${safeJoin(handlerData.args.slice(1), ' ') || 'console.assert'}`;\n      breadcrumb.data.arguments = handlerData.args.slice(1);\n    } else {\n      // Don't capture a breadcrumb for passed assertions\n      return;\n    }\n  }\n\n  getCurrentHub().addBreadcrumb(breadcrumb, {\n    input: handlerData.args,\n    level: handlerData.level,\n  });\n}\n\n/**\n * Creates breadcrumbs from XHR API calls\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _xhrBreadcrumb(handlerData: { [key: string]: any }): void {\n  if (handlerData.endTimestamp) {\n    // We only capture complete, non-sentry requests\n    if (handlerData.xhr.__sentry_own_request__) {\n      return;\n    }\n\n    const { method, url, status_code, body } = handlerData.xhr.__sentry_xhr__ || {};\n\n    getCurrentHub().addBreadcrumb(\n      {\n        category: 'xhr',\n        data: {\n          method,\n          url,\n          status_code,\n        },\n        type: 'http',\n      },\n      {\n        xhr: handlerData.xhr,\n        input: body,\n      },\n    );\n\n    return;\n  }\n}\n\n/**\n * Creates breadcrumbs from fetch API calls\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _fetchBreadcrumb(handlerData: { [key: string]: any }): void {\n  // We only capture complete fetch requests\n  if (!handlerData.endTimestamp) {\n    return;\n  }\n\n  if (handlerData.fetchData.url.match(/sentry_key/) && handlerData.fetchData.method === 'POST') {\n    // We will not create breadcrumbs for fetch requests that contain `sentry_key` (internal sentry requests)\n    return;\n  }\n\n  if (handlerData.error) {\n    getCurrentHub().addBreadcrumb(\n      {\n        category: 'fetch',\n        data: handlerData.fetchData,\n        level: Severity.Error,\n        type: 'http',\n      },\n      {\n        data: handlerData.error,\n        input: handlerData.args,\n      },\n    );\n  } else {\n    getCurrentHub().addBreadcrumb(\n      {\n        category: 'fetch',\n        data: {\n          ...handlerData.fetchData,\n          status_code: handlerData.response.status,\n        },\n        type: 'http',\n      },\n      {\n        input: handlerData.args,\n        response: handlerData.response,\n      },\n    );\n  }\n}\n\n/**\n * Creates breadcrumbs from history API calls\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _historyBreadcrumb(handlerData: { [key: string]: any }): void {\n  const global = getGlobalObject<Window>();\n  let from = handlerData.from;\n  let to = handlerData.to;\n  const parsedLoc = parseUrl(global.location.href);\n  let parsedFrom = parseUrl(from);\n  const parsedTo = parseUrl(to);\n\n  // Initial pushState doesn't provide `from` information\n  if (!parsedFrom.path) {\n    parsedFrom = parsedLoc;\n  }\n\n  // Use only the path component of the URL if the URL matches the current\n  // document (almost all the time when using pushState)\n  if (parsedLoc.protocol === parsedTo.protocol && parsedLoc.host === parsedTo.host) {\n    to = parsedTo.relative;\n  }\n  if (parsedLoc.protocol === parsedFrom.protocol && parsedLoc.host === parsedFrom.host) {\n    from = parsedFrom.relative;\n  }\n\n  getCurrentHub().addBreadcrumb({\n    category: 'navigation',\n    data: {\n      from,\n      to,\n    },\n  });\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}