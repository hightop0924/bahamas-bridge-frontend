{"ast":null,"code":"import { addInstrumentationHandler, logger } from '@sentry/utils';\nimport { IS_DEBUG_BUILD } from './flags';\nimport { getActiveTransaction } from './utils';\n/**\n * Configures global error listeners\n */\nexport function registerErrorInstrumentation() {\n  addInstrumentationHandler('error', errorCallback);\n  addInstrumentationHandler('unhandledrejection', errorCallback);\n}\n/**\n * If an error or unhandled promise occurs, we mark the active transaction as failed\n */\nfunction errorCallback() {\n  var activeTransaction = getActiveTransaction();\n  if (activeTransaction) {\n    var status_1 = 'internal_error';\n    IS_DEBUG_BUILD && logger.log(\"[Tracing] Transaction: \" + status_1 + \" -> Global error occured\");\n    activeTransaction.setStatus(status_1);\n  }\n}","map":{"version":3,"sources":["../../../src/errors.ts"],"names":[],"mappings":"AAAA,SAAS,yBAAyB,EAAE,MAAM,QAAQ,eAAe;AAEjE,SAAS,cAAc,QAAQ,SAAS;AAExC,SAAS,oBAAoB,QAAQ,SAAS;AAE9C;;AAEG;AACH,OAAM,SAAU,4BAA4B,CAAA,EAAA;EAC1C,yBAAyB,CAAC,OAAO,EAAE,aAAa,CAAC;EACjD,yBAAyB,CAAC,oBAAoB,EAAE,aAAa,CAAC;AAChE;AAEA;;AAEG;AACH,SAAS,aAAa,CAAA,EAAA;EACpB,IAAM,iBAAiB,GAAG,oBAAoB,CAAA,CAAE;EAChD,IAAI,iBAAiB,EAAE;IACrB,IAAM,QAAM,GAAmB,gBAAgB;IAC/C,cAAc,IAAI,MAAM,CAAC,GAAG,CAAC,yBAAA,GAA0B,QAAM,GAAA,0BAA0B,CAAC;IACxF,iBAAiB,CAAC,SAAS,CAAC,QAAM,CAAC;EACpC;AACH","sourcesContent":["import { addInstrumentationHandler, logger } from '@sentry/utils';\n\nimport { IS_DEBUG_BUILD } from './flags';\nimport { SpanStatusType } from './span';\nimport { getActiveTransaction } from './utils';\n\n/**\n * Configures global error listeners\n */\nexport function registerErrorInstrumentation(): void {\n  addInstrumentationHandler('error', errorCallback);\n  addInstrumentationHandler('unhandledrejection', errorCallback);\n}\n\n/**\n * If an error or unhandled promise occurs, we mark the active transaction as failed\n */\nfunction errorCallback(): void {\n  const activeTransaction = getActiveTransaction();\n  if (activeTransaction) {\n    const status: SpanStatusType = 'internal_error';\n    IS_DEBUG_BUILD && logger.log(`[Tracing] Transaction: ${status} -> Global error occured`);\n    activeTransaction.setStatus(status);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}