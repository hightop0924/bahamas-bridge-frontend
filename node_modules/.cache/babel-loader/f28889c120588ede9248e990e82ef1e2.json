{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.rlphash = exports.ripemd160 = exports.sha256 = exports.keccak256 = exports.keccak = void 0;\nvar _a = require('ethereum-cryptography/keccak'),\n  keccak224 = _a.keccak224,\n  keccak384 = _a.keccak384,\n  k256 = _a.keccak256,\n  keccak512 = _a.keccak512;\nvar createHash = require('create-hash');\nvar ethjsUtil = require('ethjs-util');\nvar rlp = require(\"rlp\");\nvar bytes_1 = require(\"./bytes\");\n/**\n * Creates Keccak hash of the input\n * @param a The input data (Buffer|Array|String|Number) If the string is a 0x-prefixed hex value\n * it's interpreted as hexadecimal, otherwise as utf8.\n * @param bits The Keccak width\n */\nexports.keccak = function (a, bits) {\n  if (bits === void 0) {\n    bits = 256;\n  }\n  if (typeof a === 'string' && !ethjsUtil.isHexString(a)) {\n    a = Buffer.from(a, 'utf8');\n  } else {\n    a = bytes_1.toBuffer(a);\n  }\n  if (!bits) bits = 256;\n  switch (bits) {\n    case 224:\n      {\n        return keccak224(a);\n      }\n    case 256:\n      {\n        return k256(a);\n      }\n    case 384:\n      {\n        return keccak384(a);\n      }\n    case 512:\n      {\n        return keccak512(a);\n      }\n    default:\n      {\n        throw new Error(\"Invald algorithm: keccak\" + bits);\n      }\n  }\n};\n/**\n * Creates Keccak-256 hash of the input, alias for keccak(a, 256).\n * @param a The input data (Buffer|Array|String|Number)\n */\nexports.keccak256 = function (a) {\n  return exports.keccak(a);\n};\n/**\n * Creates SHA256 hash of the input.\n * @param a The input data (Buffer|Array|String|Number)\n */\nexports.sha256 = function (a) {\n  a = bytes_1.toBuffer(a);\n  return createHash('sha256').update(a).digest();\n};\n/**\n * Creates RIPEMD160 hash of the input.\n * @param a The input data (Buffer|Array|String|Number)\n * @param padded Whether it should be padded to 256 bits or not\n */\nexports.ripemd160 = function (a, padded) {\n  a = bytes_1.toBuffer(a);\n  var hash = createHash('rmd160').update(a).digest();\n  if (padded === true) {\n    return bytes_1.setLength(hash, 32);\n  } else {\n    return hash;\n  }\n};\n/**\n * Creates SHA-3 hash of the RLP encoded version of the input.\n * @param a The input data\n */\nexports.rlphash = function (a) {\n  return exports.keccak(rlp.encode(a));\n};","map":{"version":3,"sources":["../src/hash.ts"],"names":[],"mappings":";;;;;;AAAM,IAAA,EAAA,GAAuD,OAAO,CAAC,8BAA8B,CAAC;EAA5F,SAAS,GAAA,EAAA,CAAA,SAAA;EAAE,SAAS,GAAA,EAAA,CAAA,SAAA;EAAa,IAAI,GAAA,EAAA,CAAA,SAAA;EAAE,SAAS,GAAA,EAAA,CAAA,SAA4C;AACpG,IAAM,UAAU,GAAG,OAAO,CAAC,aAAa,CAAC;AACzC,IAAM,SAAS,GAAG,OAAO,CAAC,YAAY,CAAC;AACvC,IAAA,GAAA,GAAA,OAAA,CAAA,KAAA,CAAA;AACA,IAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;AAEA;;;;;AAKG;AACU,OAAA,CAAA,MAAM,GAAG,UAAS,CAAM,EAAE,IAAkB,EAAA;EAAlB,IAAA,IAAA,KAAA,KAAA,CAAA,EAAA;IAAA,IAAA,GAAA,GAAkB;EAAA;EACvD,IAAI,OAAO,CAAC,KAAK,QAAQ,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC,CAAC,EAAE;IACtD,CAAC,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,EAAE,MAAM,CAAC;GAC3B,MAAM;IACL,CAAC,GAAG,OAAA,CAAA,QAAQ,CAAC,CAAC,CAAC;EAChB;EAED,IAAI,CAAC,IAAI,EAAE,IAAI,GAAG,GAAG;EAErB,QAAQ,IAAI;IACV,KAAK,GAAG;MAAE;QACR,OAAO,SAAS,CAAC,CAAC,CAAC;MACpB;IACD,KAAK,GAAG;MAAE;QACR,OAAO,IAAI,CAAC,CAAC,CAAC;MACf;IACD,KAAK,GAAG;MAAE;QACR,OAAO,SAAS,CAAC,CAAC,CAAC;MACpB;IACD,KAAK,GAAG;MAAE;QACR,OAAO,SAAS,CAAC,CAAC,CAAC;MACpB;IACD;MAAS;QACP,MAAM,IAAI,KAAK,CAAC,0BAAA,GAA2B,IAAM,CAAC;MACnD;EACF;AACH,CAAC;AAED;;;AAGG;AACU,OAAA,CAAA,SAAS,GAAG,UAAS,CAAM,EAAA;EACtC,OAAO,OAAA,CAAA,MAAM,CAAC,CAAC,CAAC;AAClB,CAAC;AAED;;;AAGG;AACU,OAAA,CAAA,MAAM,GAAG,UAAS,CAAM,EAAA;EACnC,CAAC,GAAG,OAAA,CAAA,QAAQ,CAAC,CAAC,CAAC;EACf,OAAO,UAAU,CAAC,QAAQ,CAAC,CACxB,MAAM,CAAC,CAAC,CAAC,CACT,MAAM,CAAA,CAAE;AACb,CAAC;AAED;;;;AAIG;AACU,OAAA,CAAA,SAAS,GAAG,UAAS,CAAM,EAAE,MAAe,EAAA;EACvD,CAAC,GAAG,OAAA,CAAA,QAAQ,CAAC,CAAC,CAAC;EACf,IAAM,IAAI,GAAG,UAAU,CAAC,QAAQ,CAAC,CAC9B,MAAM,CAAC,CAAC,CAAC,CACT,MAAM,CAAA,CAAE;EACX,IAAI,MAAM,KAAK,IAAI,EAAE;IACnB,OAAO,OAAA,CAAA,SAAS,CAAC,IAAI,EAAE,EAAE,CAAC;GAC3B,MAAM;IACL,OAAO,IAAI;EACZ;AACH,CAAC;AAED;;;AAGG;AACU,OAAA,CAAA,OAAO,GAAG,UAAS,CAAY,EAAA;EAC1C,OAAO,OAAA,CAAA,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;AAC9B,CAAC","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.rlphash = exports.ripemd160 = exports.sha256 = exports.keccak256 = exports.keccak = void 0;\nvar _a = require('ethereum-cryptography/keccak'), keccak224 = _a.keccak224, keccak384 = _a.keccak384, k256 = _a.keccak256, keccak512 = _a.keccak512;\nvar createHash = require('create-hash');\nvar ethjsUtil = require('ethjs-util');\nvar rlp = require(\"rlp\");\nvar bytes_1 = require(\"./bytes\");\n/**\n * Creates Keccak hash of the input\n * @param a The input data (Buffer|Array|String|Number) If the string is a 0x-prefixed hex value\n * it's interpreted as hexadecimal, otherwise as utf8.\n * @param bits The Keccak width\n */\nexports.keccak = function (a, bits) {\n    if (bits === void 0) { bits = 256; }\n    if (typeof a === 'string' && !ethjsUtil.isHexString(a)) {\n        a = Buffer.from(a, 'utf8');\n    }\n    else {\n        a = bytes_1.toBuffer(a);\n    }\n    if (!bits)\n        bits = 256;\n    switch (bits) {\n        case 224: {\n            return keccak224(a);\n        }\n        case 256: {\n            return k256(a);\n        }\n        case 384: {\n            return keccak384(a);\n        }\n        case 512: {\n            return keccak512(a);\n        }\n        default: {\n            throw new Error(\"Invald algorithm: keccak\" + bits);\n        }\n    }\n};\n/**\n * Creates Keccak-256 hash of the input, alias for keccak(a, 256).\n * @param a The input data (Buffer|Array|String|Number)\n */\nexports.keccak256 = function (a) {\n    return exports.keccak(a);\n};\n/**\n * Creates SHA256 hash of the input.\n * @param a The input data (Buffer|Array|String|Number)\n */\nexports.sha256 = function (a) {\n    a = bytes_1.toBuffer(a);\n    return createHash('sha256')\n        .update(a)\n        .digest();\n};\n/**\n * Creates RIPEMD160 hash of the input.\n * @param a The input data (Buffer|Array|String|Number)\n * @param padded Whether it should be padded to 256 bits or not\n */\nexports.ripemd160 = function (a, padded) {\n    a = bytes_1.toBuffer(a);\n    var hash = createHash('rmd160')\n        .update(a)\n        .digest();\n    if (padded === true) {\n        return bytes_1.setLength(hash, 32);\n    }\n    else {\n        return hash;\n    }\n};\n/**\n * Creates SHA-3 hash of the RLP encoded version of the input.\n * @param a The input data\n */\nexports.rlphash = function (a) {\n    return exports.keccak(rlp.encode(a));\n};\n//# sourceMappingURL=hash.js.map"]},"metadata":{},"sourceType":"script"}