{"ast":null,"code":"import { isJsonRpcRequest, isJsonRpcResponseSuccess, isJsonRpcResponseError, isInternalEvent, isReservedEvent } from \"@walletconnect/utils\";\nclass EventManager {\n  constructor() {\n    this._eventEmitters = [];\n  }\n  subscribe(eventEmitter) {\n    this._eventEmitters.push(eventEmitter);\n  }\n  unsubscribe(event) {\n    this._eventEmitters = this._eventEmitters.filter(x => x.event !== event);\n  }\n  trigger(payload) {\n    let eventEmitters = [];\n    let event;\n    if (isJsonRpcRequest(payload)) {\n      event = payload.method;\n    } else if (isJsonRpcResponseSuccess(payload) || isJsonRpcResponseError(payload)) {\n      event = `response:${payload.id}`;\n    } else if (isInternalEvent(payload)) {\n      event = payload.event;\n    } else {\n      event = \"\";\n    }\n    if (event) {\n      eventEmitters = this._eventEmitters.filter(eventEmitter => eventEmitter.event === event);\n    }\n    if ((!eventEmitters || !eventEmitters.length) && !isReservedEvent(event) && !isInternalEvent(event)) {\n      eventEmitters = this._eventEmitters.filter(eventEmitter => eventEmitter.event === \"call_request\");\n    }\n    eventEmitters.forEach(eventEmitter => {\n      if (isJsonRpcResponseError(payload)) {\n        const error = new Error(payload.error.message);\n        eventEmitter.callback(error, null);\n      } else {\n        eventEmitter.callback(null, payload);\n      }\n    });\n  }\n}\nexport default EventManager;","map":{"version":3,"sources":["../../src/events.ts"],"names":[],"mappings":"AAAA,SACE,gBAAgB,EAChB,wBAAwB,EACxB,sBAAsB,EACtB,eAAe,EACf,eAAe,QACV,sBAAsB;AAW7B,MAAM,YAAY,CAAA;EAGhB,WAAA,CAAA,EAAA;IACE,IAAI,CAAC,cAAc,GAAG,EAAE;EAC1B;EAEO,SAAS,CAAC,YAA2B,EAAA;IAC1C,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,YAAY,CAAC;EACxC;EAEO,WAAW,CAAC,KAAa,EAAA;IAC9B,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,KAAK,KAAK,KAAK,CAAC;EAC1E;EAEO,OAAO,CACZ,OAA2F,EAAA;IAE3F,IAAI,aAAa,GAAoB,EAAE;IACvC,IAAI,KAAa;IAEjB,IAAI,gBAAgB,CAAC,OAAO,CAAC,EAAE;MAC7B,KAAK,GAAG,OAAO,CAAC,MAAM;KACvB,MAAM,IAAI,wBAAwB,CAAC,OAAO,CAAC,IAAI,sBAAsB,CAAC,OAAO,CAAC,EAAE;MAC/E,KAAK,GAAG,YAAY,OAAO,CAAC,EAAE,EAAE;KACjC,MAAM,IAAI,eAAe,CAAC,OAAO,CAAC,EAAE;MACnC,KAAK,GAAG,OAAO,CAAC,KAAK;KACtB,MAAM;MACL,KAAK,GAAG,EAAE;IACX;IAED,IAAI,KAAK,EAAE;MACT,aAAa,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,CACvC,YAA2B,IAAK,YAAY,CAAC,KAAK,KAAK,KAAK,CAC9D;IACF;IAED,IACE,CAAC,CAAC,aAAa,IAAI,CAAC,aAAa,CAAC,MAAM,KACxC,CAAC,eAAe,CAAC,KAAK,CAAC,IACvB,CAAC,eAAe,CAAC,KAAK,CAAC,EACvB;MACA,aAAa,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,CACvC,YAA2B,IAAK,YAAY,CAAC,KAAK,KAAK,cAAc,CACvE;IACF;IAED,aAAa,CAAC,OAAO,CAAE,YAA2B,IAAI;MACpD,IAAI,sBAAsB,CAAC,OAAO,CAAC,EAAE;QACnC,MAAM,KAAK,GAAG,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC;QAC9C,YAAY,CAAC,QAAQ,CAAC,KAAK,EAAE,IAAI,CAAC;OACnC,MAAM;QACL,YAAY,CAAC,QAAQ,CAAC,IAAI,EAAE,OAAO,CAAC;MACrC;IACH,CAAC,CAAC;EACJ;AACD;AAED,eAAe,YAAY","sourceRoot":"","sourcesContent":["import { isJsonRpcRequest, isJsonRpcResponseSuccess, isJsonRpcResponseError, isInternalEvent, isReservedEvent, } from \"@walletconnect/utils\";\nclass EventManager {\n    constructor() {\n        this._eventEmitters = [];\n    }\n    subscribe(eventEmitter) {\n        this._eventEmitters.push(eventEmitter);\n    }\n    unsubscribe(event) {\n        this._eventEmitters = this._eventEmitters.filter(x => x.event !== event);\n    }\n    trigger(payload) {\n        let eventEmitters = [];\n        let event;\n        if (isJsonRpcRequest(payload)) {\n            event = payload.method;\n        }\n        else if (isJsonRpcResponseSuccess(payload) || isJsonRpcResponseError(payload)) {\n            event = `response:${payload.id}`;\n        }\n        else if (isInternalEvent(payload)) {\n            event = payload.event;\n        }\n        else {\n            event = \"\";\n        }\n        if (event) {\n            eventEmitters = this._eventEmitters.filter((eventEmitter) => eventEmitter.event === event);\n        }\n        if ((!eventEmitters || !eventEmitters.length) &&\n            !isReservedEvent(event) &&\n            !isInternalEvent(event)) {\n            eventEmitters = this._eventEmitters.filter((eventEmitter) => eventEmitter.event === \"call_request\");\n        }\n        eventEmitters.forEach((eventEmitter) => {\n            if (isJsonRpcResponseError(payload)) {\n                const error = new Error(payload.error.message);\n                eventEmitter.callback(error, null);\n            }\n            else {\n                eventEmitter.callback(null, payload);\n            }\n        });\n    }\n}\nexport default EventManager;\n//# sourceMappingURL=events.js.map"]},"metadata":{},"sourceType":"module"}