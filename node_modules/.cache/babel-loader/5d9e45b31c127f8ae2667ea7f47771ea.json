{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.JsonRpcMulticallProvider = void 0;\nconst contracts_1 = require(\"@ethersproject/contracts\");\nconst logger_1 = require(\"@ethersproject/logger\");\nconst providers_1 = require(\"@ethersproject/providers\");\nconst Multicall_json_1 = __importDefault(require(\"./Multicall.json\"));\nconst logger = new logger_1.Logger('0.1.0');\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction hasSigner(obj) {\n  return obj.getSigner !== undefined;\n}\n// Multicall3 is deployed at the same create2 address on basically every chain\n// https://github.com/mds1/multicall\nconst multicall3Address = '0xcA11bde05977b3631167028862bE2a173976CA11';\nclass JsonRpcMulticallProvider extends providers_1.BaseProvider {\n  constructor(provider) {\n    super(provider.getNetwork());\n    this.parent = provider;\n  }\n  getSigner(addressOrIndex) {\n    if (!hasSigner(this.parent)) {\n      return logger.throwError('Parent provider does not support getSigner', logger_1.Logger.errors.NOT_IMPLEMENTED, {\n        parent: this.parent\n      });\n    }\n    return this.parent.getSigner(addressOrIndex);\n  }\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  perform(method, params) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (method === 'call') {\n        const reqParams = params;\n        const target = reqParams.transaction.to;\n        const callData = reqParams.transaction.data;\n        // If there is no call data or unknown multicall contract, just passthrough to parent\n        if (!target || !callData) {\n          return this.parent.perform(method, params);\n        }\n        if (!this._pendingBatch) {\n          this._pendingBatch = [];\n        }\n        const newCall = {\n          request: {\n            target,\n            callData\n          },\n          resolve: null,\n          reject: null\n        };\n        const promise = new Promise((resolve, reject) => {\n          newCall.resolve = resolve;\n          newCall.reject = reject;\n        });\n        this._pendingBatch.push(newCall);\n        if (!this._pendingBatchAggregator) {\n          const provider = this.parent;\n          this._pendingBatchAggregator = setTimeout(() => __awaiter(this, void 0, void 0, function* () {\n            const batch = this._pendingBatch;\n            if (!batch) {\n              return;\n            }\n            this._pendingBatch = null;\n            this._pendingBatchAggregator = null;\n            const multicall = new contracts_1.Contract(multicall3Address, Multicall_json_1.default.abi, provider);\n            // returns [blockNumber, call results], so results are at index 1\n            const multicallResult = yield multicall.aggregate(batch.map(i => i.request));\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            multicallResult[1].map((result, i) => batch[i].resolve(result));\n            this._pendingBatch = null;\n            this._pendingBatchAggregator = null;\n          }), 10);\n        }\n        return promise;\n      } else {\n        return this.parent.perform(method, params);\n      }\n    });\n  }\n  detectNetwork() {\n    return this.parent.detectNetwork();\n  }\n}\nexports.JsonRpcMulticallProvider = JsonRpcMulticallProvider;","map":{"version":3,"sources":["../src/JsonRpcMulticallProvider.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.JsonRpcMulticallProvider = void 0;\nconst contracts_1 = require(\"@ethersproject/contracts\");\nconst logger_1 = require(\"@ethersproject/logger\");\nconst providers_1 = require(\"@ethersproject/providers\");\nconst Multicall_json_1 = __importDefault(require(\"./Multicall.json\"));\nconst logger = new logger_1.Logger('0.1.0');\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction hasSigner(obj) {\n    return obj.getSigner !== undefined;\n}\n// Multicall3 is deployed at the same create2 address on basically every chain\n// https://github.com/mds1/multicall\nconst multicall3Address = '0xcA11bde05977b3631167028862bE2a173976CA11';\nclass JsonRpcMulticallProvider extends providers_1.BaseProvider {\n    constructor(provider) {\n        super(provider.getNetwork());\n        this.parent = provider;\n    }\n    getSigner(addressOrIndex) {\n        if (!hasSigner(this.parent)) {\n            return logger.throwError('Parent provider does not support getSigner', logger_1.Logger.errors.NOT_IMPLEMENTED, {\n                parent: this.parent,\n            });\n        }\n        return this.parent.getSigner(addressOrIndex);\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    perform(method, params) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (method === 'call') {\n                const reqParams = params;\n                const target = reqParams.transaction.to;\n                const callData = reqParams.transaction.data;\n                // If there is no call data or unknown multicall contract, just passthrough to parent\n                if (!target || !callData) {\n                    return this.parent.perform(method, params);\n                }\n                if (!this._pendingBatch) {\n                    this._pendingBatch = [];\n                }\n                const newCall = { request: { target, callData }, resolve: null, reject: null };\n                const promise = new Promise((resolve, reject) => {\n                    newCall.resolve = resolve;\n                    newCall.reject = reject;\n                });\n                this._pendingBatch.push(newCall);\n                if (!this._pendingBatchAggregator) {\n                    const provider = this.parent;\n                    this._pendingBatchAggregator = setTimeout(() => __awaiter(this, void 0, void 0, function* () {\n                        const batch = this._pendingBatch;\n                        if (!batch) {\n                            return;\n                        }\n                        this._pendingBatch = null;\n                        this._pendingBatchAggregator = null;\n                        const multicall = new contracts_1.Contract(multicall3Address, Multicall_json_1.default.abi, provider);\n                        // returns [blockNumber, call results], so results are at index 1\n                        const multicallResult = yield multicall.aggregate(batch.map(i => i.request));\n                        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                        multicallResult[1].map((result, i) => batch[i].resolve(result));\n                        this._pendingBatch = null;\n                        this._pendingBatchAggregator = null;\n                    }), 10);\n                }\n                return promise;\n            }\n            else {\n                return this.parent.perform(method, params);\n            }\n        });\n    }\n    detectNetwork() {\n        return this.parent.detectNetwork();\n    }\n}\nexports.JsonRpcMulticallProvider = JsonRpcMulticallProvider;\n//# sourceMappingURL=JsonRpcMulticallProvider.js.map"]},"metadata":{},"sourceType":"script"}