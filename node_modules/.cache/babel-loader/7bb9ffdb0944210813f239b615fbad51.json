{"ast":null,"code":"import { dropUndefinedKeys, logger } from '@sentry/utils';\nimport { IS_DEBUG_BUILD } from './flags';\nimport { getCurrentHub } from './hub';\n/**\n * @inheritdoc\n */\nvar SessionFlusher = /** @class */function () {\n  function SessionFlusher(transport, attrs) {\n    var _this = this;\n    this.flushTimeout = 60;\n    this._pendingAggregates = {};\n    this._isEnabled = true;\n    this._transport = transport;\n    // Call to setInterval, so that flush is called every 60 seconds\n    this._intervalId = setInterval(function () {\n      return _this.flush();\n    }, this.flushTimeout * 1000);\n    this._sessionAttrs = attrs;\n  }\n  /** Sends session aggregates to Transport */\n  SessionFlusher.prototype.sendSessionAggregates = function (sessionAggregates) {\n    if (!this._transport.sendSession) {\n      IS_DEBUG_BUILD && logger.warn(\"Dropping session because custom transport doesn't implement sendSession\");\n      return;\n    }\n    void this._transport.sendSession(sessionAggregates).then(null, function (reason) {\n      IS_DEBUG_BUILD && logger.error('Error while sending session:', reason);\n    });\n  };\n  /** Checks if `pendingAggregates` has entries, and if it does flushes them by calling `sendSessions` */\n  SessionFlusher.prototype.flush = function () {\n    var sessionAggregates = this.getSessionAggregates();\n    if (sessionAggregates.aggregates.length === 0) {\n      return;\n    }\n    this._pendingAggregates = {};\n    this.sendSessionAggregates(sessionAggregates);\n  };\n  /** Massages the entries in `pendingAggregates` and returns aggregated sessions */\n  SessionFlusher.prototype.getSessionAggregates = function () {\n    var _this = this;\n    var aggregates = Object.keys(this._pendingAggregates).map(function (key) {\n      return _this._pendingAggregates[parseInt(key)];\n    });\n    var sessionAggregates = {\n      attrs: this._sessionAttrs,\n      aggregates: aggregates\n    };\n    return dropUndefinedKeys(sessionAggregates);\n  };\n  /** JSDoc */\n  SessionFlusher.prototype.close = function () {\n    clearInterval(this._intervalId);\n    this._isEnabled = false;\n    this.flush();\n  };\n  /**\n   * Wrapper function for _incrementSessionStatusCount that checks if the instance of SessionFlusher is enabled then\n   * fetches the session status of the request from `Scope.getRequestSession().status` on the scope and passes them to\n   * `_incrementSessionStatusCount` along with the start date\n   */\n  SessionFlusher.prototype.incrementSessionStatusCount = function () {\n    if (!this._isEnabled) {\n      return;\n    }\n    var scope = getCurrentHub().getScope();\n    var requestSession = scope && scope.getRequestSession();\n    if (requestSession && requestSession.status) {\n      this._incrementSessionStatusCount(requestSession.status, new Date());\n      // This is not entirely necessarily but is added as a safe guard to indicate the bounds of a request and so in\n      // case captureRequestSession is called more than once to prevent double count\n      if (scope) {\n        scope.setRequestSession(undefined);\n      }\n      /* eslint-enable @typescript-eslint/no-unsafe-member-access */\n    }\n  };\n  /**\n   * Increments status bucket in pendingAggregates buffer (internal state) corresponding to status of\n   * the session received\n   */\n  SessionFlusher.prototype._incrementSessionStatusCount = function (status, date) {\n    // Truncate minutes and seconds on Session Started attribute to have one minute bucket keys\n    var sessionStartedTrunc = new Date(date).setSeconds(0, 0);\n    this._pendingAggregates[sessionStartedTrunc] = this._pendingAggregates[sessionStartedTrunc] || {};\n    // corresponds to aggregated sessions in one specific minute bucket\n    // for example, {\"started\":\"2021-03-16T08:00:00.000Z\",\"exited\":4, \"errored\": 1}\n    var aggregationCounts = this._pendingAggregates[sessionStartedTrunc];\n    if (!aggregationCounts.started) {\n      aggregationCounts.started = new Date(sessionStartedTrunc).toISOString();\n    }\n    switch (status) {\n      case 'errored':\n        aggregationCounts.errored = (aggregationCounts.errored || 0) + 1;\n        return aggregationCounts.errored;\n      case 'ok':\n        aggregationCounts.exited = (aggregationCounts.exited || 0) + 1;\n        return aggregationCounts.exited;\n      default:\n        aggregationCounts.crashed = (aggregationCounts.crashed || 0) + 1;\n        return aggregationCounts.crashed;\n    }\n  };\n  return SessionFlusher;\n}();\nexport { SessionFlusher };","map":{"version":3,"sources":["../../src/sessionflusher.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  AggregationCounts,\n  RequestSessionStatus,\n  SessionAggregates,\n  SessionFlusherLike,\n  Transport,\n} from '@sentry/types';\nimport { dropUndefinedKeys, logger } from '@sentry/utils';\n\nimport { IS_DEBUG_BUILD } from './flags';\nimport { getCurrentHub } from './hub';\n\ntype ReleaseHealthAttributes = {\n  environment?: string;\n  release: string;\n};\n\n/**\n * @inheritdoc\n */\nexport class SessionFlusher implements SessionFlusherLike {\n  public readonly flushTimeout: number = 60;\n  private _pendingAggregates: Record<number, AggregationCounts> = {};\n  private _sessionAttrs: ReleaseHealthAttributes;\n  private _intervalId: ReturnType<typeof setInterval>;\n  private _isEnabled: boolean = true;\n  private _transport: Transport;\n\n  public constructor(transport: Transport, attrs: ReleaseHealthAttributes) {\n    this._transport = transport;\n    // Call to setInterval, so that flush is called every 60 seconds\n    this._intervalId = setInterval(() => this.flush(), this.flushTimeout * 1000);\n    this._sessionAttrs = attrs;\n  }\n\n  /** Sends session aggregates to Transport */\n  public sendSessionAggregates(sessionAggregates: SessionAggregates): void {\n    if (!this._transport.sendSession) {\n      IS_DEBUG_BUILD && logger.warn(\"Dropping session because custom transport doesn't implement sendSession\");\n      return;\n    }\n    void this._transport.sendSession(sessionAggregates).then(null, reason => {\n      IS_DEBUG_BUILD && logger.error('Error while sending session:', reason);\n    });\n  }\n\n  /** Checks if `pendingAggregates` has entries, and if it does flushes them by calling `sendSessions` */\n  public flush(): void {\n    const sessionAggregates = this.getSessionAggregates();\n    if (sessionAggregates.aggregates.length === 0) {\n      return;\n    }\n    this._pendingAggregates = {};\n    this.sendSessionAggregates(sessionAggregates);\n  }\n\n  /** Massages the entries in `pendingAggregates` and returns aggregated sessions */\n  public getSessionAggregates(): SessionAggregates {\n    const aggregates: AggregationCounts[] = Object.keys(this._pendingAggregates).map((key: string) => {\n      return this._pendingAggregates[parseInt(key)];\n    });\n\n    const sessionAggregates: SessionAggregates = {\n      attrs: this._sessionAttrs,\n      aggregates,\n    };\n    return dropUndefinedKeys(sessionAggregates);\n  }\n\n  /** JSDoc */\n  public close(): void {\n    clearInterval(this._intervalId);\n    this._isEnabled = false;\n    this.flush();\n  }\n\n  /**\n   * Wrapper function for _incrementSessionStatusCount that checks if the instance of SessionFlusher is enabled then\n   * fetches the session status of the request from `Scope.getRequestSession().status` on the scope and passes them to\n   * `_incrementSessionStatusCount` along with the start date\n   */\n  public incrementSessionStatusCount(): void {\n    if (!this._isEnabled) {\n      return;\n    }\n    const scope = getCurrentHub().getScope();\n    const requestSession = scope && scope.getRequestSession();\n\n    if (requestSession && requestSession.status) {\n      this._incrementSessionStatusCount(requestSession.status, new Date());\n      // This is not entirely necessarily but is added as a safe guard to indicate the bounds of a request and so in\n      // case captureRequestSession is called more than once to prevent double count\n      if (scope) {\n        scope.setRequestSession(undefined);\n      }\n      /* eslint-enable @typescript-eslint/no-unsafe-member-access */\n    }\n  }\n\n  /**\n   * Increments status bucket in pendingAggregates buffer (internal state) corresponding to status of\n   * the session received\n   */\n  private _incrementSessionStatusCount(status: RequestSessionStatus, date: Date): number {\n    // Truncate minutes and seconds on Session Started attribute to have one minute bucket keys\n    const sessionStartedTrunc = new Date(date).setSeconds(0, 0);\n    this._pendingAggregates[sessionStartedTrunc] = this._pendingAggregates[sessionStartedTrunc] || {};\n\n    // corresponds to aggregated sessions in one specific minute bucket\n    // for example, {\"started\":\"2021-03-16T08:00:00.000Z\",\"exited\":4, \"errored\": 1}\n    const aggregationCounts: AggregationCounts = this._pendingAggregates[sessionStartedTrunc];\n    if (!aggregationCounts.started) {\n      aggregationCounts.started = new Date(sessionStartedTrunc).toISOString();\n    }\n\n    switch (status) {\n      case 'errored':\n        aggregationCounts.errored = (aggregationCounts.errored || 0) + 1;\n        return aggregationCounts.errored;\n      case 'ok':\n        aggregationCounts.exited = (aggregationCounts.exited || 0) + 1;\n        return aggregationCounts.exited;\n      default:\n        aggregationCounts.crashed = (aggregationCounts.crashed || 0) + 1;\n        return aggregationCounts.crashed;\n    }\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}