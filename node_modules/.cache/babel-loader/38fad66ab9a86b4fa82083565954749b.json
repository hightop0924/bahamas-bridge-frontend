{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nexport function refCount() {\n  return function refCountOperatorFunction(source) {\n    return source.lift(new RefCountOperator(source));\n  };\n}\nvar RefCountOperator = /*@__PURE__*/function () {\n  function RefCountOperator(connectable) {\n    this.connectable = connectable;\n  }\n  RefCountOperator.prototype.call = function (subscriber, source) {\n    var connectable = this.connectable;\n    connectable._refCount++;\n    var refCounter = new RefCountSubscriber(subscriber, connectable);\n    var subscription = source.subscribe(refCounter);\n    if (!refCounter.closed) {\n      refCounter.connection = connectable.connect();\n    }\n    return subscription;\n  };\n  return RefCountOperator;\n}();\nvar RefCountSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(RefCountSubscriber, _super);\n  function RefCountSubscriber(destination, connectable) {\n    var _this = _super.call(this, destination) || this;\n    _this.connectable = connectable;\n    return _this;\n  }\n  RefCountSubscriber.prototype._unsubscribe = function () {\n    var connectable = this.connectable;\n    if (!connectable) {\n      this.connection = null;\n      return;\n    }\n    this.connectable = null;\n    var refCount = connectable._refCount;\n    if (refCount <= 0) {\n      this.connection = null;\n      return;\n    }\n    connectable._refCount = refCount - 1;\n    if (refCount > 1) {\n      this.connection = null;\n      return;\n    }\n    var connection = this.connection;\n    var sharedConnection = connectable._connection;\n    this.connection = null;\n    if (sharedConnection && (!connection || sharedConnection === connection)) {\n      sharedConnection.unsubscribe();\n    }\n  };\n  return RefCountSubscriber;\n}(Subscriber);","map":{"version":3,"sources":["../../../src/internal/operators/refCount.ts"],"names":[],"mappings":";AACA,OAAO,KAAE,OAAU,MAAE,OAAM;AA2D3B,SAAM,UAAU,QAAQ,eAAA;AACtB,OAAA,SAAO,QAAS,CAAA,EAAA;EACd,OAAA,SAAO,wBAAgB,CAAA,MAAiB,EAAA;IACT,OAAA,MAAA,CAAA,IAAA,CAAA,IAAA,gBAAA,CAAA,MAAA,CAAA,CAAA;EAClC,CAAA;AAED;IACE,gBAAA,GAAA,aAAoB,YAAqC;EAArC,SAAA,gBAAA,CAAA,WAAqC,EAAA;IACxD,IAAA,CAAA,WAAA,GAAA,WAAA;EACD;EAEU,gBAAA,CAAA,SAAA,CAAA,IAAA,GAAA,UAAqB,UAAA,EAAA,MAAA,EAAA;IACtB,IAAA,WAAa,GAAA,IAAS,CAAE,WAAC;IAEhC,WAAM,CAAA,SAAiB,EAAA;IACvB,IAAM,UAAA,GAAY,IAAG,kBAAiB,CAAA,UAAY,EAAA,WAAA,CAAA;IAElD,IAAI,YAAY,GAAA,MAAQ,CAAA,SAAA,CAAA,UAAA,CAAA;QACf,CAAA,UAAY,CAAA,MAAA,EAAA;MACpB,UAAA,CAAA,UAAA,GAAA,WAAA,CAAA,OAAA,CAAA,CAAA;IAED;IACD,OAAA,YAAA;EACH,CAAA;EAAC,OAAA,gBAAA;AAED,CAAA,CAAA,CAAA;IAAoC,kBAAA,GAAA,aAAA,UAAa,MAAA,EAAA;EAI/C,OAAA,CAAA,SAAA,CAAA,kBAAY,EAAA,MACQ,CAAA;EADpB,SAAA,kBAEE,CAAA,WAAM,EAAA,WAAY,EAAA;IADA,IAAA,KAAA,GAAA,MAAW,CAAX,IAAA,CAAA,IAAA,EAAA,WAAqC,CAAA,IAAA,IAAA;;IAExD,OAAA,KAAA;EAED;EAEU,kBAAA,CAAA,SAAA,CAAA,YAAqB,GAAA,YAAA;IAC7B,IAAI,WAAC,GAAa,IAAA,CAAA,WAAA;QAChB,CAAA,WAAK,EAAA;MACL,IAAA,CAAA,UAAO,GAAA,IAAA;MACR;IAED;IACA,IAAM,CAAA,WAAkB,GAAA,IAAA;IACxB,IAAI,QAAQ,GAAA,WAAO,CAAA,SAAA;QACjB,QAAK,IAAA,CAAA,EAAU;MACf,IAAA,CAAA,UAAO,GAAA,IAAA;MACR;IAEM;IACP,WAAI,CAAQ,SAAM,GAAA,QAAA,GAAA,CAAA;QAChB,QAAK,GAAA,CAAA,EAAA;MACL,IAAA,CAAA,UAAO,GAAA,IAAA;MACR;IA0BO;IACR,IAAM,UAAA,GAAA,IAAgB,CAAA,UAAU;IAChC,IAAI,gBAAc,GAAK,WAAA,CAAA,WAAA;IAEvB,IAAI,CAAA,UAAA,GAAA,IAAgB;QAClB,gBAAgB,KAAC,CAAA,UAAc,IAAA,gBAAA,KAAA,UAAA,CAAA,EAAA;MAChC,gBAAA,CAAA,WAAA,CAAA,CAAA;IACF;EACH,CAAA;EA9DoC,OAAA,kBA8DnC","sourcesContent":["/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nexport function refCount() {\n    return function refCountOperatorFunction(source) {\n        return source.lift(new RefCountOperator(source));\n    };\n}\nvar RefCountOperator = /*@__PURE__*/ (function () {\n    function RefCountOperator(connectable) {\n        this.connectable = connectable;\n    }\n    RefCountOperator.prototype.call = function (subscriber, source) {\n        var connectable = this.connectable;\n        connectable._refCount++;\n        var refCounter = new RefCountSubscriber(subscriber, connectable);\n        var subscription = source.subscribe(refCounter);\n        if (!refCounter.closed) {\n            refCounter.connection = connectable.connect();\n        }\n        return subscription;\n    };\n    return RefCountOperator;\n}());\nvar RefCountSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(RefCountSubscriber, _super);\n    function RefCountSubscriber(destination, connectable) {\n        var _this = _super.call(this, destination) || this;\n        _this.connectable = connectable;\n        return _this;\n    }\n    RefCountSubscriber.prototype._unsubscribe = function () {\n        var connectable = this.connectable;\n        if (!connectable) {\n            this.connection = null;\n            return;\n        }\n        this.connectable = null;\n        var refCount = connectable._refCount;\n        if (refCount <= 0) {\n            this.connection = null;\n            return;\n        }\n        connectable._refCount = refCount - 1;\n        if (refCount > 1) {\n            this.connection = null;\n            return;\n        }\n        var connection = this.connection;\n        var sharedConnection = connectable._connection;\n        this.connection = null;\n        if (sharedConnection && (!connection || sharedConnection === connection)) {\n            sharedConnection.unsubscribe();\n        }\n    };\n    return RefCountSubscriber;\n}(Subscriber));\n//# sourceMappingURL=refCount.js.map\n"]},"metadata":{},"sourceType":"module"}