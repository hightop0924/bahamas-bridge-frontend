{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nexport function count(predicate) {\n  return function (source) {\n    return source.lift(new CountOperator(predicate, source));\n  };\n}\nvar CountOperator = /*@__PURE__*/function () {\n  function CountOperator(predicate, source) {\n    this.predicate = predicate;\n    this.source = source;\n  }\n  CountOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new CountSubscriber(subscriber, this.predicate, this.source));\n  };\n  return CountOperator;\n}();\nvar CountSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(CountSubscriber, _super);\n  function CountSubscriber(destination, predicate, source) {\n    var _this = _super.call(this, destination) || this;\n    _this.predicate = predicate;\n    _this.source = source;\n    _this.count = 0;\n    _this.index = 0;\n    return _this;\n  }\n  CountSubscriber.prototype._next = function (value) {\n    if (this.predicate) {\n      this._tryPredicate(value);\n    } else {\n      this.count++;\n    }\n  };\n  CountSubscriber.prototype._tryPredicate = function (value) {\n    var result;\n    try {\n      result = this.predicate(value, this.index++, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      this.count++;\n    }\n  };\n  CountSubscriber.prototype._complete = function () {\n    this.destination.next(this.count);\n    this.destination.complete();\n  };\n  return CountSubscriber;\n}(Subscriber);","map":{"version":3,"sources":["../../../src/internal/operators/count.ts"],"names":[],"mappings":";AAGA,OAAO,KAAE,OAAU,MAAE,OAAM;AA6D3B,SAAM,UAAU,QAAS,eAAuE;AAC9F,OAAA,SAAO,KAAC,CAAA,SAA0B,EAAA;EACnC,OAAA,UAAA,MAAA,EAAA;IAAA,OAAA,MAAA,CAAA,IAAA,CAAA,IAAA,aAAA,CAAA,SAAA,EAAA,MAAA,CAAA,CAAA;EAAA,CAAA;AAED;IACE,aAAA,GAAA,aAAoB,YACsB;EADtB,SAAA,aAAA,CAAA,SAAuE,EAAA,MAAA,EAAA;IACvE,IAAA,CAAA,SAAA,GAAA,SAAsB;IACzC,IAAA,CAAA,MAAA,GAAA,MAAA;EAED;EACE,aAAO,CAAA,SAAO,CAAA,IAAU,GAAA,UAAI,UAAgB,EAAA,MAAU,EAAE;IACzD,OAAA,MAAA,CAAA,SAAA,CAAA,IAAA,eAAA,CAAA,UAAA,EAAA,IAAA,CAAA,SAAA,EAAA,IAAA,CAAA,MAAA,CAAA,CAAA;EACH,CAAA;EAAC,OAAA,aAAA;AAOD,CAAA,CAAA,CAAA;IAAiC,eAAA,GAAA,aAAA,UAAa,MAAA,EAAA;EAI5C,OAAA,CAAA,SAAA,CAAA,eAAY,EAAA,MACQ,CAAA;EADpB,SAAA,eAGE,CAAA,WAAM,EAAA,SAAY,EAAA,MACnB,EAAA;IAHmB,IAAA,KAAA,GAAA,MAAA,CAAA,IAAA,CAAA,IAAuE,EAAA,WAAA,CAAA,IAAA,IAAA;IACvE,KAAA,CAAA,SAAA,GAAA,SAAsB;IALlC,KAAA,CAAA,MAAK,GAAY,MAAC;IAClB,KAAA,CAAA,KAAK,GAAW,CAAC;;IAMxB,OAAA,KAAA;EAED;EACE,eAAS,CAAA,SAAW,CAAA,KAAA,GAAA,UAAA,KAAA,EAAA;QAClB,IAAI,CAAC,SAAA,EAAA;MACN,IAAA,CAAA,aAAA,CAAA,KAAA,CAAA;KAAM,MACL;MACD,IAAA,CAAA,KAAA,EAAA;IACF;EAEO,CAAR;EACE,eAAgB,CAAA,SAAA,CAAA,aAAA,GAAA,UAAA,KAAA,EAAA;IAEhB,IAAI,MAAA;QACF;MACD,MAAA,GAAA,IAAA,CAAA,SAAA,CAAA,KAAA,EAAA,IAAA,CAAA,KAAA,EAAA,EAAA,IAAA,CAAA,MAAA,CAAA;IAAC,CAAA,CACA,OAAA,GAAK,EAAA;MACL,IAAA,CAAA,WAAO,CAAA,KAAA,CAAA,GAAA,CAAA;MACR;IAED;QACE,MAAK,EAAA;MACN,IAAA,CAAA,KAAA,EAAA;IACF;EAES,CAAV;EACE,eAAK,CAAA,SAAgB,CAAC,SAAK,GAAO,YAAA;IAClC,IAAI,CAAC,WAAW,CAAC,IAAA,CAAA,IAAQ,CAAE,KAAC,CAAA;IAC7B,IAAA,CAAA,WAAA,CAAA,QAAA,CAAA,CAAA;EACH,CAAA;EArCiC,OAAA,eAqChC","sourcesContent":["/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nexport function count(predicate) {\n    return function (source) { return source.lift(new CountOperator(predicate, source)); };\n}\nvar CountOperator = /*@__PURE__*/ (function () {\n    function CountOperator(predicate, source) {\n        this.predicate = predicate;\n        this.source = source;\n    }\n    CountOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new CountSubscriber(subscriber, this.predicate, this.source));\n    };\n    return CountOperator;\n}());\nvar CountSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(CountSubscriber, _super);\n    function CountSubscriber(destination, predicate, source) {\n        var _this = _super.call(this, destination) || this;\n        _this.predicate = predicate;\n        _this.source = source;\n        _this.count = 0;\n        _this.index = 0;\n        return _this;\n    }\n    CountSubscriber.prototype._next = function (value) {\n        if (this.predicate) {\n            this._tryPredicate(value);\n        }\n        else {\n            this.count++;\n        }\n    };\n    CountSubscriber.prototype._tryPredicate = function (value) {\n        var result;\n        try {\n            result = this.predicate(value, this.index++, this.source);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        if (result) {\n            this.count++;\n        }\n    };\n    CountSubscriber.prototype._complete = function () {\n        this.destination.next(this.count);\n        this.destination.complete();\n    };\n    return CountSubscriber;\n}(Subscriber));\n//# sourceMappingURL=count.js.map\n"]},"metadata":{},"sourceType":"module"}