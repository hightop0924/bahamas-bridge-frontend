{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_innerSubscribe PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\nexport function expand(project, concurrent, scheduler) {\n  if (concurrent === void 0) {\n    concurrent = Number.POSITIVE_INFINITY;\n  }\n  concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;\n  return function (source) {\n    return source.lift(new ExpandOperator(project, concurrent, scheduler));\n  };\n}\nvar ExpandOperator = /*@__PURE__*/function () {\n  function ExpandOperator(project, concurrent, scheduler) {\n    this.project = project;\n    this.concurrent = concurrent;\n    this.scheduler = scheduler;\n  }\n  ExpandOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new ExpandSubscriber(subscriber, this.project, this.concurrent, this.scheduler));\n  };\n  return ExpandOperator;\n}();\nexport { ExpandOperator };\nvar ExpandSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(ExpandSubscriber, _super);\n  function ExpandSubscriber(destination, project, concurrent, scheduler) {\n    var _this = _super.call(this, destination) || this;\n    _this.project = project;\n    _this.concurrent = concurrent;\n    _this.scheduler = scheduler;\n    _this.index = 0;\n    _this.active = 0;\n    _this.hasCompleted = false;\n    if (concurrent < Number.POSITIVE_INFINITY) {\n      _this.buffer = [];\n    }\n    return _this;\n  }\n  ExpandSubscriber.dispatch = function (arg) {\n    var subscriber = arg.subscriber,\n      result = arg.result,\n      value = arg.value,\n      index = arg.index;\n    subscriber.subscribeToProjection(result, value, index);\n  };\n  ExpandSubscriber.prototype._next = function (value) {\n    var destination = this.destination;\n    if (destination.closed) {\n      this._complete();\n      return;\n    }\n    var index = this.index++;\n    if (this.active < this.concurrent) {\n      destination.next(value);\n      try {\n        var project = this.project;\n        var result = project(value, index);\n        if (!this.scheduler) {\n          this.subscribeToProjection(result, value, index);\n        } else {\n          var state = {\n            subscriber: this,\n            result: result,\n            value: value,\n            index: index\n          };\n          var destination_1 = this.destination;\n          destination_1.add(this.scheduler.schedule(ExpandSubscriber.dispatch, 0, state));\n        }\n      } catch (e) {\n        destination.error(e);\n      }\n    } else {\n      this.buffer.push(value);\n    }\n  };\n  ExpandSubscriber.prototype.subscribeToProjection = function (result, value, index) {\n    this.active++;\n    var destination = this.destination;\n    destination.add(innerSubscribe(result, new SimpleInnerSubscriber(this)));\n  };\n  ExpandSubscriber.prototype._complete = function () {\n    this.hasCompleted = true;\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete();\n    }\n    this.unsubscribe();\n  };\n  ExpandSubscriber.prototype.notifyNext = function (innerValue) {\n    this._next(innerValue);\n  };\n  ExpandSubscriber.prototype.notifyComplete = function () {\n    var buffer = this.buffer;\n    this.active--;\n    if (buffer && buffer.length > 0) {\n      this._next(buffer.shift());\n    }\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete();\n    }\n  };\n  return ExpandSubscriber;\n}(SimpleOuterSubscriber);\nexport { ExpandSubscriber };","map":{"version":3,"sources":["../../../src/internal/operators/expand.ts"],"names":[],"mappings":"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","sourcesContent":["/** PURE_IMPORTS_START tslib,_innerSubscribe PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\nexport function expand(project, concurrent, scheduler) {\n    if (concurrent === void 0) {\n        concurrent = Number.POSITIVE_INFINITY;\n    }\n    concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;\n    return function (source) { return source.lift(new ExpandOperator(project, concurrent, scheduler)); };\n}\nvar ExpandOperator = /*@__PURE__*/ (function () {\n    function ExpandOperator(project, concurrent, scheduler) {\n        this.project = project;\n        this.concurrent = concurrent;\n        this.scheduler = scheduler;\n    }\n    ExpandOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new ExpandSubscriber(subscriber, this.project, this.concurrent, this.scheduler));\n    };\n    return ExpandOperator;\n}());\nexport { ExpandOperator };\nvar ExpandSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(ExpandSubscriber, _super);\n    function ExpandSubscriber(destination, project, concurrent, scheduler) {\n        var _this = _super.call(this, destination) || this;\n        _this.project = project;\n        _this.concurrent = concurrent;\n        _this.scheduler = scheduler;\n        _this.index = 0;\n        _this.active = 0;\n        _this.hasCompleted = false;\n        if (concurrent < Number.POSITIVE_INFINITY) {\n            _this.buffer = [];\n        }\n        return _this;\n    }\n    ExpandSubscriber.dispatch = function (arg) {\n        var subscriber = arg.subscriber, result = arg.result, value = arg.value, index = arg.index;\n        subscriber.subscribeToProjection(result, value, index);\n    };\n    ExpandSubscriber.prototype._next = function (value) {\n        var destination = this.destination;\n        if (destination.closed) {\n            this._complete();\n            return;\n        }\n        var index = this.index++;\n        if (this.active < this.concurrent) {\n            destination.next(value);\n            try {\n                var project = this.project;\n                var result = project(value, index);\n                if (!this.scheduler) {\n                    this.subscribeToProjection(result, value, index);\n                }\n                else {\n                    var state = { subscriber: this, result: result, value: value, index: index };\n                    var destination_1 = this.destination;\n                    destination_1.add(this.scheduler.schedule(ExpandSubscriber.dispatch, 0, state));\n                }\n            }\n            catch (e) {\n                destination.error(e);\n            }\n        }\n        else {\n            this.buffer.push(value);\n        }\n    };\n    ExpandSubscriber.prototype.subscribeToProjection = function (result, value, index) {\n        this.active++;\n        var destination = this.destination;\n        destination.add(innerSubscribe(result, new SimpleInnerSubscriber(this)));\n    };\n    ExpandSubscriber.prototype._complete = function () {\n        this.hasCompleted = true;\n        if (this.hasCompleted && this.active === 0) {\n            this.destination.complete();\n        }\n        this.unsubscribe();\n    };\n    ExpandSubscriber.prototype.notifyNext = function (innerValue) {\n        this._next(innerValue);\n    };\n    ExpandSubscriber.prototype.notifyComplete = function () {\n        var buffer = this.buffer;\n        this.active--;\n        if (buffer && buffer.length > 0) {\n            this._next(buffer.shift());\n        }\n        if (this.hasCompleted && this.active === 0) {\n            this.destination.complete();\n        }\n    };\n    return ExpandSubscriber;\n}(SimpleOuterSubscriber));\nexport { ExpandSubscriber };\n//# sourceMappingURL=expand.js.map\n"]},"metadata":{},"sourceType":"module"}