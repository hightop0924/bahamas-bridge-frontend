{"ast":null,"code":"import { BigNumber, utils } from 'ethers';\nimport { GasPriceOracle } from 'gas-price-oracle';\nimport { OWLRACLE_API_KEY } from 'lib/constants';\nimport { logDebug, logError } from 'lib/helpers';\nconst lowest = arr => arr.reduce((low, item) => {\n  const lowValue = item.gasPrice.low;\n  return low > lowValue ? lowValue : low;\n}, arr[0].gasPrice.low).toFixed(2);\nconst highest = arr => arr.reduce((high, item) => {\n  const highValue = item.gasPrice.high;\n  return high < highValue ? highValue : high;\n}, arr[0].gasPrice.high).toFixed(2);\nconst median = arr => {\n  const mid = Math.floor(arr.length / 2);\n  const nums = arr.slice().map(a => (Number(a.gasPrice.open.toFixed(2)) + Number(a.gasPrice.close.toFixed(2))) / 2).sort((a, b) => a - b);\n  return (arr.length % 2 !== 0 ? nums[mid] : (nums[mid - 1] + nums[mid]) / 2).toFixed(2);\n};\nconst gasPriceOracle = new GasPriceOracle();\nconst gasPriceFromSupplier = async () => {\n  try {\n    const json = await gasPriceOracle.fetchGasPricesOffChain();\n    if (!json) {\n      logError(`Response from Oracle didn't include gas price`);\n      return null;\n    }\n    if (Object.keys(json).length > 0) {\n      return json;\n    }\n    return null;\n  } catch (e) {\n    logError(`Gas Price Oracle not available. ${e.message}`);\n  }\n  return null;\n};\nconst {\n  REACT_APP_GAS_PRICE_FALLBACK_GWEI,\n  REACT_APP_GAS_PRICE_SPEED_TYPE,\n  REACT_APP_GAS_PRICE_UPDATE_INTERVAL\n} = process.env;\nconst DEFAULT_GAS_PRICE_UPDATE_INTERVAL = 60000;\nconst DEFAULT_GAS_PRICE_SPEED_TYPE = 'standard';\nclass GasPriceStore {\n  constructor() {\n    this.gasPrice = BigNumber.from('0');\n    this.speedType = DEFAULT_GAS_PRICE_SPEED_TYPE;\n    this.updateInterval = DEFAULT_GAS_PRICE_UPDATE_INTERVAL;\n    this.medianHistoricalPrice = BigNumber.from('0');\n    this.lowestHistoricalPrice = BigNumber.from('0');\n    this.highestHistoricalPrice = BigNumber.from('0');\n    this.gasPrice = utils.parseUnits(REACT_APP_GAS_PRICE_FALLBACK_GWEI || '0', 'gwei');\n    this.speedType = REACT_APP_GAS_PRICE_SPEED_TYPE || DEFAULT_GAS_PRICE_SPEED_TYPE;\n    this.updateInterval = REACT_APP_GAS_PRICE_UPDATE_INTERVAL || DEFAULT_GAS_PRICE_UPDATE_INTERVAL;\n    this.updateGasPrice();\n    this.updateHistoricalPrice();\n  }\n  async updateGasPrice() {\n    const gasPrices = await gasPriceFromSupplier();\n    try {\n      if (gasPrices) {\n        const {\n          [this.speedType]: price\n        } = gasPrices;\n        if (price) {\n          this.gasPrice = utils.parseUnits(price.toFixed(2), 'gwei');\n        }\n        logDebug('Updated Gas Price', gasPrices);\n      }\n    } catch (gasPriceError) {\n      logError({\n        gasPriceError\n      });\n    }\n    setTimeout(() => this.updateGasPrice(), this.updateInterval);\n  }\n  async updateHistoricalPrice() {\n    try {\n      const response = await fetch(OWLRACLE_API_KEY ? `https://owlracle.info/eth/history?candles=1008&timeframe=10&apiKey=${OWLRACLE_API_KEY}` : `https://owlracle.info/eth/history?candles=1008&timeframe=10`);\n      if (!response.ok) {\n        throw new Error(`Owlracle request failed with status ${response.status}`);\n      }\n      const data = await response.json();\n      const lowestPrice = lowest(data);\n      this.lowestHistoricalPrice = utils.parseUnits(lowestPrice, 'gwei');\n      const medianPrice = median(data);\n      this.medianHistoricalPrice = utils.parseUnits(medianPrice, 'gwei');\n      const highestPrice = highest(data);\n      this.highestHistoricalPrice = utils.parseUnits(highestPrice, 'gwei');\n      logDebug('Updated Historical Gas Price', {\n        lowest: Number(lowestPrice),\n        median: Number(medianPrice),\n        highest: Number(highestPrice)\n      });\n    } catch (historicalGasPriceError) {\n      this.lowestHistoricalPrice = BigNumber.from(0);\n      this.highestHistoricalPrice = BigNumber.from(0);\n      this.medianHistoricalPrice = BigNumber.from(0);\n      logError({\n        historicalGasPriceError\n      });\n    }\n  }\n}\nconst ethGasStore = new GasPriceStore();\nexport const getCurrentEthGasPrice = () => ethGasStore.gasPrice;\nexport const getLowestHistoricalEthGasPrice = () => ethGasStore.lowestHistoricalPrice;\nexport const getMedianHistoricalEthGasPrice = () => ethGasStore.medianHistoricalPrice;\nexport const getHighestHistoricalEthGasPrice = () => ethGasStore.highestHistoricalPrice;","map":{"version":3,"names":["BigNumber","utils","GasPriceOracle","OWLRACLE_API_KEY","logDebug","logError","lowest","arr","reduce","low","item","lowValue","gasPrice","toFixed","highest","high","highValue","median","mid","Math","floor","length","nums","slice","map","a","Number","open","close","sort","b","gasPriceOracle","gasPriceFromSupplier","json","fetchGasPricesOffChain","Object","keys","e","message","REACT_APP_GAS_PRICE_FALLBACK_GWEI","REACT_APP_GAS_PRICE_SPEED_TYPE","REACT_APP_GAS_PRICE_UPDATE_INTERVAL","process","env","DEFAULT_GAS_PRICE_UPDATE_INTERVAL","DEFAULT_GAS_PRICE_SPEED_TYPE","GasPriceStore","constructor","from","speedType","updateInterval","medianHistoricalPrice","lowestHistoricalPrice","highestHistoricalPrice","parseUnits","updateGasPrice","updateHistoricalPrice","gasPrices","price","gasPriceError","setTimeout","response","fetch","ok","Error","status","data","lowestPrice","medianPrice","highestPrice","historicalGasPriceError","ethGasStore","getCurrentEthGasPrice","getLowestHistoricalEthGasPrice","getMedianHistoricalEthGasPrice","getHighestHistoricalEthGasPrice"],"sources":["/home/hightop/bahamas_bridge/omnibridge-ui/packages/dapp/src/stores/gasPrice.js"],"sourcesContent":["import { BigNumber, utils } from 'ethers';\nimport { GasPriceOracle } from 'gas-price-oracle';\nimport { OWLRACLE_API_KEY } from 'lib/constants';\nimport { logDebug, logError } from 'lib/helpers';\n\nconst lowest = arr =>\n  arr\n    .reduce((low, item) => {\n      const lowValue = item.gasPrice.low;\n      return low > lowValue ? lowValue : low;\n    }, arr[0].gasPrice.low)\n    .toFixed(2);\n\nconst highest = arr =>\n  arr\n    .reduce((high, item) => {\n      const highValue = item.gasPrice.high;\n      return high < highValue ? highValue : high;\n    }, arr[0].gasPrice.high)\n    .toFixed(2);\n\nconst median = arr => {\n  const mid = Math.floor(arr.length / 2);\n  const nums = arr\n    .slice()\n    .map(\n      a =>\n        (Number(a.gasPrice.open.toFixed(2)) +\n          Number(a.gasPrice.close.toFixed(2))) /\n        2,\n    )\n    .sort((a, b) => a - b);\n  return (\n    arr.length % 2 !== 0 ? nums[mid] : (nums[mid - 1] + nums[mid]) / 2\n  ).toFixed(2);\n};\n\nconst gasPriceOracle = new GasPriceOracle();\n\nconst gasPriceFromSupplier = async () => {\n  try {\n    const json = await gasPriceOracle.fetchGasPricesOffChain();\n\n    if (!json) {\n      logError(`Response from Oracle didn't include gas price`);\n      return null;\n    }\n\n    if (Object.keys(json).length > 0) {\n      return json;\n    }\n    return null;\n  } catch (e) {\n    logError(`Gas Price Oracle not available. ${e.message}`);\n  }\n  return null;\n};\n\nconst {\n  REACT_APP_GAS_PRICE_FALLBACK_GWEI,\n  REACT_APP_GAS_PRICE_SPEED_TYPE,\n  REACT_APP_GAS_PRICE_UPDATE_INTERVAL,\n} = process.env;\n\nconst DEFAULT_GAS_PRICE_UPDATE_INTERVAL = 60000;\nconst DEFAULT_GAS_PRICE_SPEED_TYPE = 'standard';\n\nclass GasPriceStore {\n  gasPrice = BigNumber.from('0');\n\n  speedType = DEFAULT_GAS_PRICE_SPEED_TYPE;\n\n  updateInterval = DEFAULT_GAS_PRICE_UPDATE_INTERVAL;\n\n  medianHistoricalPrice = BigNumber.from('0');\n\n  lowestHistoricalPrice = BigNumber.from('0');\n\n  highestHistoricalPrice = BigNumber.from('0');\n\n  constructor() {\n    this.gasPrice = utils.parseUnits(\n      REACT_APP_GAS_PRICE_FALLBACK_GWEI || '0',\n      'gwei',\n    );\n\n    this.speedType =\n      REACT_APP_GAS_PRICE_SPEED_TYPE || DEFAULT_GAS_PRICE_SPEED_TYPE;\n\n    this.updateInterval =\n      REACT_APP_GAS_PRICE_UPDATE_INTERVAL || DEFAULT_GAS_PRICE_UPDATE_INTERVAL;\n\n    this.updateGasPrice();\n\n    this.updateHistoricalPrice();\n  }\n\n  async updateGasPrice() {\n    const gasPrices = await gasPriceFromSupplier();\n    try {\n      if (gasPrices) {\n        const { [this.speedType]: price } = gasPrices;\n        if (price) {\n          this.gasPrice = utils.parseUnits(price.toFixed(2), 'gwei');\n        }\n        logDebug('Updated Gas Price', gasPrices);\n      }\n    } catch (gasPriceError) {\n      logError({ gasPriceError });\n    }\n\n    setTimeout(() => this.updateGasPrice(), this.updateInterval);\n  }\n\n  async updateHistoricalPrice() {\n    try {\n      const response = await fetch(\n        OWLRACLE_API_KEY\n          ? `https://owlracle.info/eth/history?candles=1008&timeframe=10&apiKey=${OWLRACLE_API_KEY}`\n          : `https://owlracle.info/eth/history?candles=1008&timeframe=10`,\n      );\n      if (!response.ok) {\n        throw new Error(\n          `Owlracle request failed with status ${response.status}`,\n        );\n      }\n\n      const data = await response.json();\n\n      const lowestPrice = lowest(data);\n      this.lowestHistoricalPrice = utils.parseUnits(lowestPrice, 'gwei');\n\n      const medianPrice = median(data);\n      this.medianHistoricalPrice = utils.parseUnits(medianPrice, 'gwei');\n\n      const highestPrice = highest(data);\n      this.highestHistoricalPrice = utils.parseUnits(highestPrice, 'gwei');\n\n      logDebug('Updated Historical Gas Price', {\n        lowest: Number(lowestPrice),\n        median: Number(medianPrice),\n        highest: Number(highestPrice),\n      });\n    } catch (historicalGasPriceError) {\n      this.lowestHistoricalPrice = BigNumber.from(0);\n      this.highestHistoricalPrice = BigNumber.from(0);\n      this.medianHistoricalPrice = BigNumber.from(0);\n      logError({ historicalGasPriceError });\n    }\n  }\n}\n\nconst ethGasStore = new GasPriceStore();\n\nexport const getCurrentEthGasPrice = () => ethGasStore.gasPrice;\n\nexport const getLowestHistoricalEthGasPrice = () =>\n  ethGasStore.lowestHistoricalPrice;\n\nexport const getMedianHistoricalEthGasPrice = () =>\n  ethGasStore.medianHistoricalPrice;\n\nexport const getHighestHistoricalEthGasPrice = () =>\n  ethGasStore.highestHistoricalPrice;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}