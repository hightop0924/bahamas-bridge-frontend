{"ast":null,"code":"var _s = $RefreshSig$();\nimport { fetchAmbVersion } from 'lib/amb';\nimport { getNetworkLabel, logError } from 'lib/helpers';\nimport { getEthersProvider } from 'lib/providers';\nimport { useEffect, useState } from 'react';\nexport const useAmbVersion = (foreignChainId, foreignAmbAddress) => {\n  _s();\n  const [foreignAmbVersion, setForeignAmbVersion] = useState();\n  const [fetching, setFetching] = useState(false);\n  useEffect(() => {\n    const label = getNetworkLabel(foreignChainId).toUpperCase();\n    const key = `${label}-AMB-VERSION`;\n    const fetchVersion = async () => {\n      const provider = await getEthersProvider(foreignChainId);\n      await fetchAmbVersion(foreignAmbAddress, provider).then(versionString => {\n        setForeignAmbVersion(versionString);\n        sessionStorage.setItem(key, versionString);\n      }).catch(versionError => logError({\n        versionError\n      }));\n      setFetching(false);\n    };\n    const version = sessionStorage.getItem(key);\n    if (!version && !fetching) {\n      setFetching(true);\n      fetchVersion();\n    } else {\n      setForeignAmbVersion(version);\n    }\n  }, [foreignAmbAddress, foreignChainId, fetching]);\n  return foreignAmbVersion;\n};\n_s(useAmbVersion, \"Bez+IioMnEpYRXv/vpNmXOEu1zc=\");","map":{"version":3,"names":["fetchAmbVersion","getNetworkLabel","logError","getEthersProvider","useEffect","useState","useAmbVersion","foreignChainId","foreignAmbAddress","_s","foreignAmbVersion","setForeignAmbVersion","fetching","setFetching","label","toUpperCase","key","fetchVersion","provider","then","versionString","sessionStorage","setItem","catch","versionError","version","getItem"],"sources":["/home/hightop/bahamas_bridge/omnibridge-ui/packages/dapp/src/hooks/useAmbVersion.js"],"sourcesContent":["import { fetchAmbVersion } from 'lib/amb';\nimport { getNetworkLabel, logError } from 'lib/helpers';\nimport { getEthersProvider } from 'lib/providers';\nimport { useEffect, useState } from 'react';\n\nexport const useAmbVersion = (foreignChainId, foreignAmbAddress) => {\n  const [foreignAmbVersion, setForeignAmbVersion] = useState();\n  const [fetching, setFetching] = useState(false);\n\n  useEffect(() => {\n    const label = getNetworkLabel(foreignChainId).toUpperCase();\n    const key = `${label}-AMB-VERSION`;\n    const fetchVersion = async () => {\n      const provider = await getEthersProvider(foreignChainId);\n      await fetchAmbVersion(foreignAmbAddress, provider)\n        .then(versionString => {\n          setForeignAmbVersion(versionString);\n          sessionStorage.setItem(key, versionString);\n        })\n        .catch(versionError => logError({ versionError }));\n      setFetching(false);\n    };\n    const version = sessionStorage.getItem(key);\n    if (!version && !fetching) {\n      setFetching(true);\n      fetchVersion();\n    } else {\n      setForeignAmbVersion(version);\n    }\n  }, [foreignAmbAddress, foreignChainId, fetching]);\n\n  return foreignAmbVersion;\n};\n"],"mappings":";AAAA,SAASA,eAAe,QAAQ,SAAS;AACzC,SAASC,eAAe,EAAEC,QAAQ,QAAQ,aAAa;AACvD,SAASC,iBAAiB,QAAQ,eAAe;AACjD,SAASC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAE3C,OAAO,MAAMC,aAAa,GAAGA,CAACC,cAAc,EAAEC,iBAAiB,KAAK;EAAAC,EAAA;EAClE,MAAM,CAACC,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGN,QAAQ,CAAC,CAAC;EAC5D,MAAM,CAACO,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;EAE/CD,SAAS,CAAC,MAAM;IACd,MAAMU,KAAK,GAAGb,eAAe,CAACM,cAAc,CAAC,CAACQ,WAAW,CAAC,CAAC;IAC3D,MAAMC,GAAG,GAAI,GAAEF,KAAM,cAAa;IAClC,MAAMG,YAAY,GAAG,MAAAA,CAAA,KAAY;MAC/B,MAAMC,QAAQ,GAAG,MAAMf,iBAAiB,CAACI,cAAc,CAAC;MACxD,MAAMP,eAAe,CAACQ,iBAAiB,EAAEU,QAAQ,CAAC,CAC/CC,IAAI,CAACC,aAAa,IAAI;QACrBT,oBAAoB,CAACS,aAAa,CAAC;QACnCC,cAAc,CAACC,OAAO,CAACN,GAAG,EAAEI,aAAa,CAAC;MAC5C,CAAC,CAAC,CACDG,KAAK,CAACC,YAAY,IAAItB,QAAQ,CAAC;QAAEsB;MAAa,CAAC,CAAC,CAAC;MACpDX,WAAW,CAAC,KAAK,CAAC;IACpB,CAAC;IACD,MAAMY,OAAO,GAAGJ,cAAc,CAACK,OAAO,CAACV,GAAG,CAAC;IAC3C,IAAI,CAACS,OAAO,IAAI,CAACb,QAAQ,EAAE;MACzBC,WAAW,CAAC,IAAI,CAAC;MACjBI,YAAY,CAAC,CAAC;IAChB,CAAC,MAAM;MACLN,oBAAoB,CAACc,OAAO,CAAC;IAC/B;EACF,CAAC,EAAE,CAACjB,iBAAiB,EAAED,cAAc,EAAEK,QAAQ,CAAC,CAAC;EAEjD,OAAOF,iBAAiB;AAC1B,CAAC;AAACD,EAAA,CA3BWH,aAAa"},"metadata":{},"sourceType":"module"}