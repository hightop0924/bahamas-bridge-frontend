{"ast":null,"code":"/** PURE_IMPORTS_START _Observable PURE_IMPORTS_END */\nimport { Observable } from '../Observable';\nexport function range(start, count, scheduler) {\n  if (start === void 0) {\n    start = 0;\n  }\n  return new Observable(function (subscriber) {\n    if (count === undefined) {\n      count = start;\n      start = 0;\n    }\n    var index = 0;\n    var current = start;\n    if (scheduler) {\n      return scheduler.schedule(dispatch, 0, {\n        index: index,\n        count: count,\n        start: start,\n        subscriber: subscriber\n      });\n    } else {\n      do {\n        if (index++ >= count) {\n          subscriber.complete();\n          break;\n        }\n        subscriber.next(current++);\n        if (subscriber.closed) {\n          break;\n        }\n      } while (true);\n    }\n    return undefined;\n  });\n}\nexport function dispatch(state) {\n  var start = state.start,\n    index = state.index,\n    count = state.count,\n    subscriber = state.subscriber;\n  if (index >= count) {\n    subscriber.complete();\n    return;\n  }\n  subscriber.next(start);\n  if (subscriber.closed) {\n    return;\n  }\n  state.index = index + 1;\n  state.start = start + 1;\n  this.schedule(state);\n}","map":{"version":3,"sources":["../../../src/internal/observable/range.ts"],"names":[],"mappings":"AACA;AAoCA,SAAM,UAAU,QAAuB,eAEjB;AAFA,OAAA,SAAA,KAAA,CAAA,KAAA,EAAA,KAAA,EAAA,SAAiB,EAAA;EAGrC,IAAA,KAAO,KAAI,KAAA,CAAA,EAAmB;IAC5B,KAAI,GAAA,CAAK;EACP;SACA,IAAA,UAAU,CAAA,UAAA,UAAA,EAAA;IACX,IAAA,KAAA,KAAA,SAAA,EAAA;MAEG,KAAK,GAAG,KAAE;MACV,KAAA,GAAO,CAAA;IAEX;QACE,KAAA,GAAO,CAAA;QACL,OAAA,GAAK,KAAA;QACN,SAAE,EAAA;MACJ,OAAA,SAAA,CAAA,QAAA,CAAA,QAAA,EAAA,CAAA,EAAA;QAAM,KAAA,EAAA,KAAA;QAAA,KAAA,EAAA,KAAA;QAAA,KAAA,EAAA,KAAA;QAAA,UAAA,EAAA;MACL,CAAA,CAAA;KACE,MACE;SACA;QACD,IAAA,KAAA,EAAA,IAAA,KAAA,EAAA;UACD,UAAW,CAAI,QAAQ,CAAA,CAAE;UACrB;QACF;QACD,UAAA,CAAA,IAAA,CAAA,OAAA,EAAA,CAAA;QACF,IAAA,UAAc,CAAA,MAAA,EAAA;UAChB;QAEM;MACN,CAAA,QAAA,IAAA;IACJ;IAGK,OAAA,SAAkB;EACd,CAAA,CAAA;AAER;OACE,SAAA,QAAW,CAAA,KAAW,EAAA;MACtB,KAAA,GAAO,KAAA,CAAA,KAAA;IAAA,KAAA,GAAA,KAAA,CAAA,KAAA;IAAA,KAAA,GAAA,KAAA,CAAA,KAAA;IAAA,UAAA,GAAA,KAAA,CAAA,UAAA;EACR,IAAA,KAAA,IAAA,KAAA,EAAA;IAED,UAAW,CAAI,QAAQ,CAAA,CAAA;IAEnB;EACF;EACD,UAAA,CAAA,IAAA,CAAA,KAAA,CAAA;EAED,IAAA,UAAc,CAAA,MAAK,EAAI;IACvB;EAEA;EACD,KAAA,CAAA,KAAA,GAAA,KAAA,GAAA,CAAA","sourcesContent":["/** PURE_IMPORTS_START _Observable PURE_IMPORTS_END */\nimport { Observable } from '../Observable';\nexport function range(start, count, scheduler) {\n    if (start === void 0) {\n        start = 0;\n    }\n    return new Observable(function (subscriber) {\n        if (count === undefined) {\n            count = start;\n            start = 0;\n        }\n        var index = 0;\n        var current = start;\n        if (scheduler) {\n            return scheduler.schedule(dispatch, 0, {\n                index: index, count: count, start: start, subscriber: subscriber\n            });\n        }\n        else {\n            do {\n                if (index++ >= count) {\n                    subscriber.complete();\n                    break;\n                }\n                subscriber.next(current++);\n                if (subscriber.closed) {\n                    break;\n                }\n            } while (true);\n        }\n        return undefined;\n    });\n}\nexport function dispatch(state) {\n    var start = state.start, index = state.index, count = state.count, subscriber = state.subscriber;\n    if (index >= count) {\n        subscriber.complete();\n        return;\n    }\n    subscriber.next(start);\n    if (subscriber.closed) {\n        return;\n    }\n    state.index = index + 1;\n    state.start = start + 1;\n    this.schedule(state);\n}\n//# sourceMappingURL=range.js.map\n"]},"metadata":{},"sourceType":"module"}