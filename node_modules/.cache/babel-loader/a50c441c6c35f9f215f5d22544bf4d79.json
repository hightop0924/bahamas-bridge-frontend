{"ast":null,"code":"import { __read, __spread } from \"tslib\";\nimport { addGlobalEventProcessor, getCurrentHub } from '@sentry/hub';\nimport { addNonEnumerableProperty, logger } from '@sentry/utils';\nimport { IS_DEBUG_BUILD } from './flags';\nexport var installedIntegrations = [];\n/**\n * @private\n */\nfunction filterDuplicates(integrations) {\n  return integrations.reduce(function (acc, integrations) {\n    if (acc.every(function (accIntegration) {\n      return integrations.name !== accIntegration.name;\n    })) {\n      acc.push(integrations);\n    }\n    return acc;\n  }, []);\n}\n/** Gets integration to install */\nexport function getIntegrationsToSetup(options) {\n  var defaultIntegrations = options.defaultIntegrations && __spread(options.defaultIntegrations) || [];\n  var userIntegrations = options.integrations;\n  var integrations = __spread(filterDuplicates(defaultIntegrations));\n  if (Array.isArray(userIntegrations)) {\n    // Filter out integrations that are also included in user options\n    integrations = __spread(integrations.filter(function (integrations) {\n      return userIntegrations.every(function (userIntegration) {\n        return userIntegration.name !== integrations.name;\n      });\n    }), filterDuplicates(userIntegrations));\n  } else if (typeof userIntegrations === 'function') {\n    integrations = userIntegrations(integrations);\n    integrations = Array.isArray(integrations) ? integrations : [integrations];\n  }\n  // Make sure that if present, `Debug` integration will always run last\n  var integrationsNames = integrations.map(function (i) {\n    return i.name;\n  });\n  var alwaysLastToRun = 'Debug';\n  if (integrationsNames.indexOf(alwaysLastToRun) !== -1) {\n    integrations.push.apply(integrations, __spread(integrations.splice(integrationsNames.indexOf(alwaysLastToRun), 1)));\n  }\n  return integrations;\n}\n/** Setup given integration */\nexport function setupIntegration(integration) {\n  if (installedIntegrations.indexOf(integration.name) !== -1) {\n    return;\n  }\n  integration.setupOnce(addGlobalEventProcessor, getCurrentHub);\n  installedIntegrations.push(integration.name);\n  IS_DEBUG_BUILD && logger.log(\"Integration installed: \" + integration.name);\n}\n/**\n * Given a list of integration instances this installs them all. When `withDefaults` is set to `true` then all default\n * integrations are added unless they were already provided before.\n * @param integrations array of integration instances\n * @param withDefault should enable default integrations\n */\nexport function setupIntegrations(options) {\n  var integrations = {};\n  getIntegrationsToSetup(options).forEach(function (integration) {\n    integrations[integration.name] = integration;\n    setupIntegration(integration);\n  });\n  // set the `initialized` flag so we don't run through the process again unecessarily; use `Object.defineProperty`\n  // because by default it creates a property which is nonenumerable, which we want since `initialized` shouldn't be\n  // considered a member of the index the way the actual integrations are\n  addNonEnumerableProperty(integrations, 'initialized', true);\n  return integrations;\n}","map":{"version":3,"sources":["../../src/integration.ts"],"names":[],"mappings":"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","sourcesContent":["import { addGlobalEventProcessor, getCurrentHub } from '@sentry/hub';\nimport { Integration, Options } from '@sentry/types';\nimport { addNonEnumerableProperty, logger } from '@sentry/utils';\n\nimport { IS_DEBUG_BUILD } from './flags';\n\nexport const installedIntegrations: string[] = [];\n\n/** Map of integrations assigned to a client */\nexport type IntegrationIndex = {\n  [key: string]: Integration;\n} & { initialized?: boolean };\n\n/**\n * @private\n */\nfunction filterDuplicates(integrations: Integration[]): Integration[] {\n  return integrations.reduce((acc, integrations) => {\n    if (acc.every(accIntegration => integrations.name !== accIntegration.name)) {\n      acc.push(integrations);\n    }\n    return acc;\n  }, [] as Integration[]);\n}\n\n/** Gets integration to install */\nexport function getIntegrationsToSetup(options: Options): Integration[] {\n  const defaultIntegrations = (options.defaultIntegrations && [...options.defaultIntegrations]) || [];\n  const userIntegrations = options.integrations;\n\n  let integrations: Integration[] = [...filterDuplicates(defaultIntegrations)];\n\n  if (Array.isArray(userIntegrations)) {\n    // Filter out integrations that are also included in user options\n    integrations = [\n      ...integrations.filter(integrations =>\n        userIntegrations.every(userIntegration => userIntegration.name !== integrations.name),\n      ),\n      // And filter out duplicated user options integrations\n      ...filterDuplicates(userIntegrations),\n    ];\n  } else if (typeof userIntegrations === 'function') {\n    integrations = userIntegrations(integrations);\n    integrations = Array.isArray(integrations) ? integrations : [integrations];\n  }\n\n  // Make sure that if present, `Debug` integration will always run last\n  const integrationsNames = integrations.map(i => i.name);\n  const alwaysLastToRun = 'Debug';\n  if (integrationsNames.indexOf(alwaysLastToRun) !== -1) {\n    integrations.push(...integrations.splice(integrationsNames.indexOf(alwaysLastToRun), 1));\n  }\n\n  return integrations;\n}\n\n/** Setup given integration */\nexport function setupIntegration(integration: Integration): void {\n  if (installedIntegrations.indexOf(integration.name) !== -1) {\n    return;\n  }\n  integration.setupOnce(addGlobalEventProcessor, getCurrentHub);\n  installedIntegrations.push(integration.name);\n  IS_DEBUG_BUILD && logger.log(`Integration installed: ${integration.name}`);\n}\n\n/**\n * Given a list of integration instances this installs them all. When `withDefaults` is set to `true` then all default\n * integrations are added unless they were already provided before.\n * @param integrations array of integration instances\n * @param withDefault should enable default integrations\n */\nexport function setupIntegrations<O extends Options>(options: O): IntegrationIndex {\n  const integrations: IntegrationIndex = {};\n  getIntegrationsToSetup(options).forEach(integration => {\n    integrations[integration.name] = integration;\n    setupIntegration(integration);\n  });\n  // set the `initialized` flag so we don't run through the process again unecessarily; use `Object.defineProperty`\n  // because by default it creates a property which is nonenumerable, which we want since `initialized` shouldn't be\n  // considered a member of the index the way the actual integrations are\n  addNonEnumerableProperty(integrations, 'initialized', true);\n  return integrations;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}