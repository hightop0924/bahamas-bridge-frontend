{"ast":null,"code":"// Extracted from https://github.com/ethereumjs/ethereumjs-util and stripped out irrelevant code\n// Original code licensed under the Mozilla Public License Version 2.0\n\nconst createKeccakHash = require('keccak/js');\nconst BN = require('bn.js');\n\n/**\n * Returns a buffer filled with 0s\n * @method zeros\n * @param {Number} bytes  the number of bytes the buffer should be\n * @return {Buffer}\n */\nfunction zeros(bytes) {\n  return Buffer.allocUnsafe(bytes).fill(0);\n}\n\n/**\n * Left Pads an `Array` or `Buffer` with leading zeros till it has `length` bytes.\n * Or it truncates the beginning if it exceeds.\n * @method setLength\n * @param {Buffer|Array} msg the value to pad\n * @param {Number} length the number of bytes the output should be\n * @param {Boolean} [right=false] whether to start padding form the left or right\n * @return {Buffer|Array}\n */\nfunction setLength(msg, length, right) {\n  const buf = zeros(length);\n  msg = toBuffer(msg);\n  if (right) {\n    if (msg.length < length) {\n      msg.copy(buf);\n      return buf;\n    }\n    return msg.slice(0, length);\n  } else {\n    if (msg.length < length) {\n      msg.copy(buf, length - msg.length);\n      return buf;\n    }\n    return msg.slice(-length);\n  }\n}\n\n/**\n * Right Pads an `Array` or `Buffer` with leading zeros till it has `length` bytes.\n * Or it truncates the beginning if it exceeds.\n * @param {Buffer|Array} msg the value to pad\n * @param {Number} length the number of bytes the output should be\n * @return {Buffer|Array}\n */\nfunction setLengthRight(msg, length) {\n  return setLength(msg, length, true);\n}\n\n/**\n * Attempts to turn a value into a `Buffer`. As input it supports `Buffer`, `String`, `Number`, null/undefined, `BN` and other objects with a `toArray()` method.\n * @param {*} v the value\n */\nfunction toBuffer(v) {\n  if (!Buffer.isBuffer(v)) {\n    if (Array.isArray(v)) {\n      v = Buffer.from(v);\n    } else if (typeof v === 'string') {\n      if (isHexString(v)) {\n        v = Buffer.from(padToEven(stripHexPrefix(v)), 'hex');\n      } else {\n        v = Buffer.from(v);\n      }\n    } else if (typeof v === 'number') {\n      v = intToBuffer(v);\n    } else if (v === null || v === undefined) {\n      v = Buffer.allocUnsafe(0);\n    } else if (BN.isBN(v)) {\n      v = v.toArrayLike(Buffer);\n    } else if (v.toArray) {\n      // converts a BN to a Buffer\n      v = Buffer.from(v.toArray());\n    } else {\n      throw new Error('invalid type');\n    }\n  }\n  return v;\n}\n\n/**\n * Converts a `Buffer` into a hex `String`\n * @param {Buffer} buf\n * @return {String}\n */\nfunction bufferToHex(buf) {\n  buf = toBuffer(buf);\n  return '0x' + buf.toString('hex');\n}\n\n/**\n * Creates Keccak hash of the input\n * @param {Buffer|Array|String|Number} a the input data\n * @param {Number} [bits=256] the Keccak width\n * @return {Buffer}\n */\nfunction keccak(a, bits) {\n  a = toBuffer(a);\n  if (!bits) bits = 256;\n  return createKeccakHash('keccak' + bits).update(a).digest();\n}\nfunction padToEven(str) {\n  return str.length % 2 ? '0' + str : str;\n}\nfunction isHexString(str) {\n  return typeof str === 'string' && str.match(/^0x[0-9A-Fa-f]*$/);\n}\nfunction stripHexPrefix(str) {\n  if (typeof str === 'string' && str.startsWith('0x')) {\n    return str.slice(2);\n  }\n  return str;\n}\nmodule.exports = {\n  zeros,\n  setLength,\n  setLengthRight,\n  isHexString,\n  stripHexPrefix,\n  toBuffer,\n  bufferToHex,\n  keccak\n};","map":{"version":3,"names":["createKeccakHash","require","BN","zeros","bytes","Buffer","allocUnsafe","fill","setLength","msg","length","right","buf","toBuffer","copy","slice","setLengthRight","v","isBuffer","Array","isArray","from","isHexString","padToEven","stripHexPrefix","intToBuffer","undefined","isBN","toArrayLike","toArray","Error","bufferToHex","toString","keccak","a","bits","update","digest","str","match","startsWith","module","exports"],"sources":["/home/hightop/bahamas_bridge/omnibridge-ui/node_modules/walletlink/dist/vendor-js/eth-eip712-util/util.js"],"sourcesContent":["// Extracted from https://github.com/ethereumjs/ethereumjs-util and stripped out irrelevant code\n// Original code licensed under the Mozilla Public License Version 2.0\n\nconst createKeccakHash = require('keccak/js')\nconst BN = require('bn.js')\n\n/**\n * Returns a buffer filled with 0s\n * @method zeros\n * @param {Number} bytes  the number of bytes the buffer should be\n * @return {Buffer}\n */\nfunction zeros (bytes) {\n  return Buffer.allocUnsafe(bytes).fill(0)\n}\n\n/**\n * Left Pads an `Array` or `Buffer` with leading zeros till it has `length` bytes.\n * Or it truncates the beginning if it exceeds.\n * @method setLength\n * @param {Buffer|Array} msg the value to pad\n * @param {Number} length the number of bytes the output should be\n * @param {Boolean} [right=false] whether to start padding form the left or right\n * @return {Buffer|Array}\n */\nfunction setLength (msg, length, right) {\n  const buf = zeros(length)\n  msg = toBuffer(msg)\n  if (right) {\n    if (msg.length < length) {\n      msg.copy(buf)\n      return buf\n    }\n    return msg.slice(0, length)\n  } else {\n    if (msg.length < length) {\n      msg.copy(buf, length - msg.length)\n      return buf\n    }\n    return msg.slice(-length)\n  }\n}\n\n/**\n * Right Pads an `Array` or `Buffer` with leading zeros till it has `length` bytes.\n * Or it truncates the beginning if it exceeds.\n * @param {Buffer|Array} msg the value to pad\n * @param {Number} length the number of bytes the output should be\n * @return {Buffer|Array}\n */\nfunction setLengthRight (msg, length) {\n  return setLength(msg, length, true)\n}\n\n/**\n * Attempts to turn a value into a `Buffer`. As input it supports `Buffer`, `String`, `Number`, null/undefined, `BN` and other objects with a `toArray()` method.\n * @param {*} v the value\n */\nfunction toBuffer (v) {\n  if (!Buffer.isBuffer(v)) {\n    if (Array.isArray(v)) {\n      v = Buffer.from(v)\n    } else if (typeof v === 'string') {\n      if (isHexString(v)) {\n        v = Buffer.from(padToEven(stripHexPrefix(v)), 'hex')\n      } else {\n        v = Buffer.from(v)\n      }\n    } else if (typeof v === 'number') {\n      v = intToBuffer(v)\n    } else if (v === null || v === undefined) {\n      v = Buffer.allocUnsafe(0)\n    } else if (BN.isBN(v)) {\n      v = v.toArrayLike(Buffer)\n    } else if (v.toArray) {\n      // converts a BN to a Buffer\n      v = Buffer.from(v.toArray())\n    } else {\n      throw new Error('invalid type')\n    }\n  }\n  return v\n}\n\n/**\n * Converts a `Buffer` into a hex `String`\n * @param {Buffer} buf\n * @return {String}\n */\nfunction bufferToHex (buf) {\n  buf = toBuffer(buf)\n  return '0x' + buf.toString('hex')\n}\n\n/**\n * Creates Keccak hash of the input\n * @param {Buffer|Array|String|Number} a the input data\n * @param {Number} [bits=256] the Keccak width\n * @return {Buffer}\n */\nfunction keccak (a, bits) {\n  a = toBuffer(a)\n  if (!bits) bits = 256\n\n  return createKeccakHash('keccak' + bits).update(a).digest()\n}\n\nfunction padToEven (str) {\n  return str.length % 2 ? '0' + str : str\n}\n\nfunction isHexString (str) {\n  return typeof str === 'string' && str.match(/^0x[0-9A-Fa-f]*$/)\n}\n\nfunction stripHexPrefix (str) {\n  if (typeof str === 'string' && str.startsWith('0x')) {\n    return str.slice(2)\n  }\n  return str\n}\n\nmodule.exports = {\n  zeros,\n  setLength,\n  setLengthRight,\n  isHexString,\n  stripHexPrefix,\n  toBuffer,\n  bufferToHex,\n  keccak\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}