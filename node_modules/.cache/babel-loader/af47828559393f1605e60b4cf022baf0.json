{"ast":null,"code":"/** PURE_IMPORTS_START _Observable,_scheduler_async,_util_isNumeric PURE_IMPORTS_END */\nimport { Observable } from '../Observable';\nimport { async } from '../scheduler/async';\nimport { isNumeric } from '../util/isNumeric';\nexport function interval(period, scheduler) {\n  if (period === void 0) {\n    period = 0;\n  }\n  if (scheduler === void 0) {\n    scheduler = async;\n  }\n  if (!isNumeric(period) || period < 0) {\n    period = 0;\n  }\n  if (!scheduler || typeof scheduler.schedule !== 'function') {\n    scheduler = async;\n  }\n  return new Observable(function (subscriber) {\n    subscriber.add(scheduler.schedule(dispatch, period, {\n      subscriber: subscriber,\n      counter: 0,\n      period: period\n    }));\n    return subscriber;\n  });\n}\nfunction dispatch(state) {\n  var subscriber = state.subscriber,\n    counter = state.counter,\n    period = state.period;\n  subscriber.next(counter);\n  this.schedule({\n    subscriber: subscriber,\n    counter: counter + 1,\n    period: period\n  }, period);\n}","map":{"version":3,"sources":["../../../src/internal/observable/interval.ts"],"names":[],"mappings":"AAAA;AACA,SAAS,UAAO,QAAM,eAAoB;AAE1C,SAAS,KAAA,QAAW,oBAAM;AAmD1B,SAAM,SAAU,QAAS,mBACgC;AADhC,OAAA,SAAA,QAAA,CAAA,MAAA,EAAA,SAAU,EAAA;EACV,IAAA,MAAA,KAAA,KAAA,CAAA,EAAA;IACnB,MAAC,GAAA,CAAS;EACZ;EACD,IAAA,SAAA,KAAA,KAAA,CAAA,EAAA;IAEG,SAAC,GAAS,KAAI;EAChB;EACD,IAAA,CAAA,SAAA,CAAA,MAAA,CAAA,IAAA,MAAA,GAAA,CAAA,EAAA;IAED,MAAO,GAAI,CAAA;EACT;MAGA,CAAA,SAAO,IAAA,OAAW,SAAA,CAAA,QAAA,KAAA,UAAA,EAAA;IACjB,SAAA,GAAA,KAAA;EACJ;EAED,OAAS,IAAA,UAAmE,CAAA,UAAA,UAAA,EAAA;IAClE,UAAA,CAAA,GAAA,CAAA,SAAA,CAAA,QAAY,CAAA,QAAA,EAAA,MAAA,EAAA;MAAO,UAAE,EAAA,UAAA;MAAiB,OAAA,EAAA,CAAA;MAAA,MAAA,EAAA;IAAA,CAAA,CAAA,CAAA;IAC9C,OAAW,UAAK;EAChB,CAAA,CAAA;AACF","sourcesContent":["/** PURE_IMPORTS_START _Observable,_scheduler_async,_util_isNumeric PURE_IMPORTS_END */\nimport { Observable } from '../Observable';\nimport { async } from '../scheduler/async';\nimport { isNumeric } from '../util/isNumeric';\nexport function interval(period, scheduler) {\n    if (period === void 0) {\n        period = 0;\n    }\n    if (scheduler === void 0) {\n        scheduler = async;\n    }\n    if (!isNumeric(period) || period < 0) {\n        period = 0;\n    }\n    if (!scheduler || typeof scheduler.schedule !== 'function') {\n        scheduler = async;\n    }\n    return new Observable(function (subscriber) {\n        subscriber.add(scheduler.schedule(dispatch, period, { subscriber: subscriber, counter: 0, period: period }));\n        return subscriber;\n    });\n}\nfunction dispatch(state) {\n    var subscriber = state.subscriber, counter = state.counter, period = state.period;\n    subscriber.next(counter);\n    this.schedule({ subscriber: subscriber, counter: counter + 1, period: period }, period);\n}\n//# sourceMappingURL=interval.js.map\n"]},"metadata":{},"sourceType":"module"}