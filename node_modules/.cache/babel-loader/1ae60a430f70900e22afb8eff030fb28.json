{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useBridgeContext } from 'contexts/BridgeContext';\nimport { useWeb3Context } from 'contexts/Web3Context';\nimport { useBridgeDirection } from 'hooks/useBridgeDirection';\nimport { useGraphHealth } from 'hooks/useGraphHealth';\nimport { combineRequestsWithExecutions, getExecutions, getRequests } from 'lib/history';\nimport { useEffect, useState } from 'react';\nexport const useClaimableTransfers = () => {\n  _s();\n  const {\n    homeChainId,\n    foreignChainId,\n    getGraphEndpoint\n  } = useBridgeDirection();\n  const {\n    account\n  } = useWeb3Context();\n  const {\n    txHash\n  } = useBridgeContext();\n  const [transfers, setTransfers] = useState();\n  const [loading, setLoading] = useState(false);\n  const {\n    homeHealthy,\n    foreignHealthy\n  } = useGraphHealth();\n  const subgraphHealthy = homeHealthy && foreignHealthy;\n  useEffect(() => {\n    if (!account) return () => undefined;\n    let isSubscribed = true;\n    async function update() {\n      setLoading(true);\n      setTransfers();\n      const {\n        requests\n      } = await getRequests(account, getGraphEndpoint(homeChainId));\n      const {\n        executions\n      } = await getExecutions(getGraphEndpoint(foreignChainId), requests);\n      const homeTransfers = combineRequestsWithExecutions(requests, executions, homeChainId, foreignChainId).sort((a, b) => b.timestamp - a.timestamp).filter(t => !t.receivingTx);\n      if (isSubscribed) {\n        setTransfers(homeTransfers);\n        setLoading(false);\n      }\n    }\n    update();\n    return () => {\n      isSubscribed = false;\n    };\n  }, [account, txHash, homeChainId, foreignChainId, getGraphEndpoint]);\n  return {\n    transfers: subgraphHealthy ? transfers : undefined,\n    loading\n  };\n};\n_s(useClaimableTransfers, \"hQA5D70MtYQx8ViUWZGqCrjiFcQ=\", false, function () {\n  return [useBridgeDirection, useWeb3Context, useBridgeContext, useGraphHealth];\n});","map":{"version":3,"names":["useBridgeContext","useWeb3Context","useBridgeDirection","useGraphHealth","combineRequestsWithExecutions","getExecutions","getRequests","useEffect","useState","useClaimableTransfers","_s","homeChainId","foreignChainId","getGraphEndpoint","account","txHash","transfers","setTransfers","loading","setLoading","homeHealthy","foreignHealthy","subgraphHealthy","undefined","isSubscribed","update","requests","executions","homeTransfers","sort","a","b","timestamp","filter","t","receivingTx"],"sources":["/home/hightop/bahamas_bridge/omnibridge-ui/packages/dapp/src/hooks/useClaimableTransfers.js"],"sourcesContent":["import { useBridgeContext } from 'contexts/BridgeContext';\nimport { useWeb3Context } from 'contexts/Web3Context';\nimport { useBridgeDirection } from 'hooks/useBridgeDirection';\nimport { useGraphHealth } from 'hooks/useGraphHealth';\nimport {\n  combineRequestsWithExecutions,\n  getExecutions,\n  getRequests,\n} from 'lib/history';\nimport { useEffect, useState } from 'react';\n\nexport const useClaimableTransfers = () => {\n  const { homeChainId, foreignChainId, getGraphEndpoint } =\n    useBridgeDirection();\n  const { account } = useWeb3Context();\n  const { txHash } = useBridgeContext();\n  const [transfers, setTransfers] = useState();\n  const [loading, setLoading] = useState(false);\n\n  const { homeHealthy, foreignHealthy } = useGraphHealth();\n  const subgraphHealthy = homeHealthy && foreignHealthy;\n\n  useEffect(() => {\n    if (!account) return () => undefined;\n    let isSubscribed = true;\n    async function update() {\n      setLoading(true);\n      setTransfers();\n      const { requests } = await getRequests(\n        account,\n        getGraphEndpoint(homeChainId),\n      );\n      const { executions } = await getExecutions(\n        getGraphEndpoint(foreignChainId),\n        requests,\n      );\n      const homeTransfers = combineRequestsWithExecutions(\n        requests,\n        executions,\n        homeChainId,\n        foreignChainId,\n      )\n        .sort((a, b) => b.timestamp - a.timestamp)\n        .filter(t => !t.receivingTx);\n      if (isSubscribed) {\n        setTransfers(homeTransfers);\n        setLoading(false);\n      }\n    }\n    update();\n    return () => {\n      isSubscribed = false;\n    };\n  }, [account, txHash, homeChainId, foreignChainId, getGraphEndpoint]);\n\n  return { transfers: subgraphHealthy ? transfers : undefined, loading };\n};\n"],"mappings":";AAAA,SAASA,gBAAgB,QAAQ,wBAAwB;AACzD,SAASC,cAAc,QAAQ,sBAAsB;AACrD,SAASC,kBAAkB,QAAQ,0BAA0B;AAC7D,SAASC,cAAc,QAAQ,sBAAsB;AACrD,SACEC,6BAA6B,EAC7BC,aAAa,EACbC,WAAW,QACN,aAAa;AACpB,SAASC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAE3C,OAAO,MAAMC,qBAAqB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzC,MAAM;IAAEC,WAAW;IAAEC,cAAc;IAAEC;EAAiB,CAAC,GACrDX,kBAAkB,CAAC,CAAC;EACtB,MAAM;IAAEY;EAAQ,CAAC,GAAGb,cAAc,CAAC,CAAC;EACpC,MAAM;IAAEc;EAAO,CAAC,GAAGf,gBAAgB,CAAC,CAAC;EACrC,MAAM,CAACgB,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,CAAC;EAC5C,MAAM,CAACU,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EAE7C,MAAM;IAAEY,WAAW;IAAEC;EAAe,CAAC,GAAGlB,cAAc,CAAC,CAAC;EACxD,MAAMmB,eAAe,GAAGF,WAAW,IAAIC,cAAc;EAErDd,SAAS,CAAC,MAAM;IACd,IAAI,CAACO,OAAO,EAAE,OAAO,MAAMS,SAAS;IACpC,IAAIC,YAAY,GAAG,IAAI;IACvB,eAAeC,MAAMA,CAAA,EAAG;MACtBN,UAAU,CAAC,IAAI,CAAC;MAChBF,YAAY,CAAC,CAAC;MACd,MAAM;QAAES;MAAS,CAAC,GAAG,MAAMpB,WAAW,CACpCQ,OAAO,EACPD,gBAAgB,CAACF,WAAW,CAC9B,CAAC;MACD,MAAM;QAAEgB;MAAW,CAAC,GAAG,MAAMtB,aAAa,CACxCQ,gBAAgB,CAACD,cAAc,CAAC,EAChCc,QACF,CAAC;MACD,MAAME,aAAa,GAAGxB,6BAA6B,CACjDsB,QAAQ,EACRC,UAAU,EACVhB,WAAW,EACXC,cACF,CAAC,CACEiB,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAACC,SAAS,GAAGF,CAAC,CAACE,SAAS,CAAC,CACzCC,MAAM,CAACC,CAAC,IAAI,CAACA,CAAC,CAACC,WAAW,CAAC;MAC9B,IAAIX,YAAY,EAAE;QAChBP,YAAY,CAACW,aAAa,CAAC;QAC3BT,UAAU,CAAC,KAAK,CAAC;MACnB;IACF;IACAM,MAAM,CAAC,CAAC;IACR,OAAO,MAAM;MACXD,YAAY,GAAG,KAAK;IACtB,CAAC;EACH,CAAC,EAAE,CAACV,OAAO,EAAEC,MAAM,EAAEJ,WAAW,EAAEC,cAAc,EAAEC,gBAAgB,CAAC,CAAC;EAEpE,OAAO;IAAEG,SAAS,EAAEM,eAAe,GAAGN,SAAS,GAAGO,SAAS;IAAEL;EAAQ,CAAC;AACxE,CAAC;AAACR,EAAA,CA7CWD,qBAAqB;EAAA,QAE9BP,kBAAkB,EACAD,cAAc,EACfD,gBAAgB,EAIKG,cAAc;AAAA"},"metadata":{},"sourceType":"module"}