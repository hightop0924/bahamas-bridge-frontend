{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { getGlobalObject, logger } from '@sentry/utils';\nimport { IS_DEBUG_BUILD } from '../flags';\nimport { startIdleTransaction } from '../hubextensions';\nimport { DEFAULT_IDLE_TIMEOUT } from '../idletransaction';\nimport { extractTraceparentData, secToMs } from '../utils';\nimport { registerBackgroundTabDetection } from './backgroundtab';\nimport { MetricsInstrumentation } from './metrics';\nimport { defaultRequestInstrumentationOptions, instrumentOutgoingRequests } from './request';\nimport { instrumentRoutingWithDefaults } from './router';\nexport var DEFAULT_MAX_TRANSACTION_DURATION_SECONDS = 600;\nvar DEFAULT_BROWSER_TRACING_OPTIONS = __assign({\n  idleTimeout: DEFAULT_IDLE_TIMEOUT,\n  markBackgroundTransactions: true,\n  maxTransactionDuration: DEFAULT_MAX_TRANSACTION_DURATION_SECONDS,\n  routingInstrumentation: instrumentRoutingWithDefaults,\n  startTransactionOnLocationChange: true,\n  startTransactionOnPageLoad: true\n}, defaultRequestInstrumentationOptions);\n/**\n * The Browser Tracing integration automatically instruments browser pageload/navigation\n * actions as transactions, and captures requests, metrics and errors as spans.\n *\n * The integration can be configured with a variety of options, and can be extended to use\n * any routing library. This integration uses {@see IdleTransaction} to create transactions.\n */\nvar BrowserTracing = /** @class */function () {\n  function BrowserTracing(_options) {\n    /**\n     * @inheritDoc\n     */\n    this.name = BrowserTracing.id;\n    /** Store configured idle timeout so that it can be added as a tag to transactions */\n    this._configuredIdleTimeout = undefined;\n    var tracingOrigins = defaultRequestInstrumentationOptions.tracingOrigins;\n    // NOTE: Logger doesn't work in constructors, as it's initialized after integrations instances\n    if (_options) {\n      this._configuredIdleTimeout = _options.idleTimeout;\n      if (_options.tracingOrigins && Array.isArray(_options.tracingOrigins) && _options.tracingOrigins.length !== 0) {\n        tracingOrigins = _options.tracingOrigins;\n      } else {\n        IS_DEBUG_BUILD && (this._emitOptionsWarning = true);\n      }\n    }\n    this.options = __assign(__assign(__assign({}, DEFAULT_BROWSER_TRACING_OPTIONS), _options), {\n      tracingOrigins: tracingOrigins\n    });\n    var _metricOptions = this.options._metricOptions;\n    this._metrics = new MetricsInstrumentation(_metricOptions && _metricOptions._reportAllChanges);\n  }\n  /**\n   * @inheritDoc\n   */\n  BrowserTracing.prototype.setupOnce = function (_, getCurrentHub) {\n    var _this = this;\n    this._getCurrentHub = getCurrentHub;\n    if (this._emitOptionsWarning) {\n      IS_DEBUG_BUILD && logger.warn('[Tracing] You need to define `tracingOrigins` in the options. Set an array of urls or patterns to trace.');\n      IS_DEBUG_BUILD && logger.warn(\"[Tracing] We added a reasonable default for you: \" + defaultRequestInstrumentationOptions.tracingOrigins);\n    }\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    var _a = this.options,\n      instrumentRouting = _a.routingInstrumentation,\n      startTransactionOnLocationChange = _a.startTransactionOnLocationChange,\n      startTransactionOnPageLoad = _a.startTransactionOnPageLoad,\n      markBackgroundTransactions = _a.markBackgroundTransactions,\n      traceFetch = _a.traceFetch,\n      traceXHR = _a.traceXHR,\n      tracingOrigins = _a.tracingOrigins,\n      shouldCreateSpanForRequest = _a.shouldCreateSpanForRequest;\n    instrumentRouting(function (context) {\n      return _this._createRouteTransaction(context);\n    }, startTransactionOnPageLoad, startTransactionOnLocationChange);\n    if (markBackgroundTransactions) {\n      registerBackgroundTabDetection();\n    }\n    instrumentOutgoingRequests({\n      traceFetch: traceFetch,\n      traceXHR: traceXHR,\n      tracingOrigins: tracingOrigins,\n      shouldCreateSpanForRequest: shouldCreateSpanForRequest\n    });\n  };\n  /** Create routing idle transaction. */\n  BrowserTracing.prototype._createRouteTransaction = function (context) {\n    var _this = this;\n    if (!this._getCurrentHub) {\n      IS_DEBUG_BUILD && logger.warn(\"[Tracing] Did not create \" + context.op + \" transaction because _getCurrentHub is invalid.\");\n      return undefined;\n    }\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    var _a = this.options,\n      beforeNavigate = _a.beforeNavigate,\n      idleTimeout = _a.idleTimeout,\n      maxTransactionDuration = _a.maxTransactionDuration;\n    var parentContextFromHeader = context.op === 'pageload' ? getHeaderContext() : undefined;\n    var expandedContext = __assign(__assign(__assign({}, context), parentContextFromHeader), {\n      trimEnd: true\n    });\n    var modifiedContext = typeof beforeNavigate === 'function' ? beforeNavigate(expandedContext) : expandedContext;\n    // For backwards compatibility reasons, beforeNavigate can return undefined to \"drop\" the transaction (prevent it\n    // from being sent to Sentry).\n    var finalContext = modifiedContext === undefined ? __assign(__assign({}, expandedContext), {\n      sampled: false\n    }) : modifiedContext;\n    if (finalContext.sampled === false) {\n      IS_DEBUG_BUILD && logger.log(\"[Tracing] Will not send \" + finalContext.op + \" transaction because of beforeNavigate.\");\n    }\n    IS_DEBUG_BUILD && logger.log(\"[Tracing] Starting \" + finalContext.op + \" transaction on scope\");\n    var hub = this._getCurrentHub();\n    var location = getGlobalObject().location;\n    var idleTransaction = startIdleTransaction(hub, finalContext, idleTimeout, true, {\n      location: location\n    });\n    idleTransaction.registerBeforeFinishCallback(function (transaction, endTimestamp) {\n      _this._metrics.addPerformanceEntries(transaction);\n      adjustTransactionDuration(secToMs(maxTransactionDuration), transaction, endTimestamp);\n    });\n    idleTransaction.setTag('idleTimeout', this._configuredIdleTimeout);\n    return idleTransaction;\n  };\n  /**\n   * @inheritDoc\n   */\n  BrowserTracing.id = 'BrowserTracing';\n  return BrowserTracing;\n}();\nexport { BrowserTracing };\n/**\n * Gets transaction context from a sentry-trace meta.\n *\n * @returns Transaction context data from the header or undefined if there's no header or the header is malformed\n */\nexport function getHeaderContext() {\n  var header = getMetaContent('sentry-trace');\n  if (header) {\n    return extractTraceparentData(header);\n  }\n  return undefined;\n}\n/** Returns the value of a meta tag */\nexport function getMetaContent(metaName) {\n  var el = getGlobalObject().document.querySelector(\"meta[name=\" + metaName + \"]\");\n  return el ? el.getAttribute('content') : null;\n}\n/** Adjusts transaction value based on max transaction duration */\nfunction adjustTransactionDuration(maxDuration, transaction, endTimestamp) {\n  var diff = endTimestamp - transaction.startTimestamp;\n  var isOutdatedTransaction = endTimestamp && (diff > maxDuration || diff < 0);\n  if (isOutdatedTransaction) {\n    transaction.setStatus('deadline_exceeded');\n    transaction.setTag('maxTransactionDurationExceeded', 'true');\n  }\n}","map":{"version":3,"sources":["../../../../src/browser/browsertracing.ts"],"names":[],"mappings":"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","sourcesContent":["import { Hub } from '@sentry/hub';\nimport { EventProcessor, Integration, Transaction, TransactionContext } from '@sentry/types';\nimport { getGlobalObject, logger } from '@sentry/utils';\n\nimport { IS_DEBUG_BUILD } from '../flags';\nimport { startIdleTransaction } from '../hubextensions';\nimport { DEFAULT_IDLE_TIMEOUT, IdleTransaction } from '../idletransaction';\nimport { extractTraceparentData, secToMs } from '../utils';\nimport { registerBackgroundTabDetection } from './backgroundtab';\nimport { MetricsInstrumentation } from './metrics';\nimport {\n  defaultRequestInstrumentationOptions,\n  instrumentOutgoingRequests,\n  RequestInstrumentationOptions,\n} from './request';\nimport { instrumentRoutingWithDefaults } from './router';\n\nexport const DEFAULT_MAX_TRANSACTION_DURATION_SECONDS = 600;\n\n/** Options for Browser Tracing integration */\nexport interface BrowserTracingOptions extends RequestInstrumentationOptions {\n  /**\n   * The time to wait in ms until the transaction will be finished. The transaction will use the end timestamp of\n   * the last finished span as the endtime for the transaction.\n   * Time is in ms.\n   *\n   * Default: 1000\n   */\n  idleTimeout: number;\n\n  /**\n   * Flag to enable/disable creation of `navigation` transaction on history changes.\n   *\n   * Default: true\n   */\n  startTransactionOnLocationChange: boolean;\n\n  /**\n   * Flag to enable/disable creation of `pageload` transaction on first pageload.\n   *\n   * Default: true\n   */\n  startTransactionOnPageLoad: boolean;\n\n  /**\n   * The maximum duration of a transaction before it will be marked as \"deadline_exceeded\".\n   * If you never want to mark a transaction set it to 0.\n   * Time is in seconds.\n   *\n   * Default: 600\n   */\n  maxTransactionDuration: number;\n\n  /**\n   * Flag Transactions where tabs moved to background with \"cancelled\". Browser background tab timing is\n   * not suited towards doing precise measurements of operations. By default, we recommend that this option\n   * be enabled as background transactions can mess up your statistics in nondeterministic ways.\n   *\n   * Default: true\n   */\n  markBackgroundTransactions: boolean;\n\n  /**\n   * _metricOptions allows the user to send options to change how metrics are collected.\n   *\n   * _metricOptions is currently experimental.\n   *\n   * Default: undefined\n   */\n  _metricOptions?: Partial<{ _reportAllChanges: boolean }>;\n\n  /**\n   * beforeNavigate is called before a pageload/navigation transaction is created and allows users to modify transaction\n   * context data, or drop the transaction entirely (by setting `sampled = false` in the context).\n   *\n   * Note: For legacy reasons, transactions can also be dropped by returning `undefined`.\n   *\n   * @param context: The context data which will be passed to `startTransaction` by default\n   *\n   * @returns A (potentially) modified context object, with `sampled = false` if the transaction should be dropped.\n   */\n  beforeNavigate?(context: TransactionContext): TransactionContext | undefined;\n\n  /**\n   * Instrumentation that creates routing change transactions. By default creates\n   * pageload and navigation transactions.\n   */\n  routingInstrumentation<T extends Transaction>(\n    customStartTransaction: (context: TransactionContext) => T | undefined,\n    startTransactionOnPageLoad?: boolean,\n    startTransactionOnLocationChange?: boolean,\n  ): void;\n}\n\nconst DEFAULT_BROWSER_TRACING_OPTIONS = {\n  idleTimeout: DEFAULT_IDLE_TIMEOUT,\n  markBackgroundTransactions: true,\n  maxTransactionDuration: DEFAULT_MAX_TRANSACTION_DURATION_SECONDS,\n  routingInstrumentation: instrumentRoutingWithDefaults,\n  startTransactionOnLocationChange: true,\n  startTransactionOnPageLoad: true,\n  ...defaultRequestInstrumentationOptions,\n};\n\n/**\n * The Browser Tracing integration automatically instruments browser pageload/navigation\n * actions as transactions, and captures requests, metrics and errors as spans.\n *\n * The integration can be configured with a variety of options, and can be extended to use\n * any routing library. This integration uses {@see IdleTransaction} to create transactions.\n */\nexport class BrowserTracing implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'BrowserTracing';\n\n  /** Browser Tracing integration options */\n  public options: BrowserTracingOptions;\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = BrowserTracing.id;\n\n  private _getCurrentHub?: () => Hub;\n\n  private readonly _metrics: MetricsInstrumentation;\n\n  private readonly _emitOptionsWarning?: boolean;\n\n  /** Store configured idle timeout so that it can be added as a tag to transactions */\n  private _configuredIdleTimeout: BrowserTracingOptions['idleTimeout'] | undefined = undefined;\n\n  public constructor(_options?: Partial<BrowserTracingOptions>) {\n    let tracingOrigins = defaultRequestInstrumentationOptions.tracingOrigins;\n    // NOTE: Logger doesn't work in constructors, as it's initialized after integrations instances\n    if (_options) {\n      this._configuredIdleTimeout = _options.idleTimeout;\n      if (_options.tracingOrigins && Array.isArray(_options.tracingOrigins) && _options.tracingOrigins.length !== 0) {\n        tracingOrigins = _options.tracingOrigins;\n      } else {\n        IS_DEBUG_BUILD && (this._emitOptionsWarning = true);\n      }\n    }\n\n    this.options = {\n      ...DEFAULT_BROWSER_TRACING_OPTIONS,\n      ..._options,\n      tracingOrigins,\n    };\n\n    const { _metricOptions } = this.options;\n    this._metrics = new MetricsInstrumentation(_metricOptions && _metricOptions._reportAllChanges);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(_: (callback: EventProcessor) => void, getCurrentHub: () => Hub): void {\n    this._getCurrentHub = getCurrentHub;\n\n    if (this._emitOptionsWarning) {\n      IS_DEBUG_BUILD &&\n        logger.warn(\n          '[Tracing] You need to define `tracingOrigins` in the options. Set an array of urls or patterns to trace.',\n        );\n      IS_DEBUG_BUILD &&\n        logger.warn(\n          `[Tracing] We added a reasonable default for you: ${defaultRequestInstrumentationOptions.tracingOrigins}`,\n        );\n    }\n\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    const {\n      routingInstrumentation: instrumentRouting,\n      startTransactionOnLocationChange,\n      startTransactionOnPageLoad,\n      markBackgroundTransactions,\n      traceFetch,\n      traceXHR,\n      tracingOrigins,\n      shouldCreateSpanForRequest,\n    } = this.options;\n\n    instrumentRouting(\n      (context: TransactionContext) => this._createRouteTransaction(context),\n      startTransactionOnPageLoad,\n      startTransactionOnLocationChange,\n    );\n\n    if (markBackgroundTransactions) {\n      registerBackgroundTabDetection();\n    }\n\n    instrumentOutgoingRequests({ traceFetch, traceXHR, tracingOrigins, shouldCreateSpanForRequest });\n  }\n\n  /** Create routing idle transaction. */\n  private _createRouteTransaction(context: TransactionContext): Transaction | undefined {\n    if (!this._getCurrentHub) {\n      IS_DEBUG_BUILD &&\n        logger.warn(`[Tracing] Did not create ${context.op} transaction because _getCurrentHub is invalid.`);\n      return undefined;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    const { beforeNavigate, idleTimeout, maxTransactionDuration } = this.options;\n\n    const parentContextFromHeader = context.op === 'pageload' ? getHeaderContext() : undefined;\n\n    const expandedContext = {\n      ...context,\n      ...parentContextFromHeader,\n      trimEnd: true,\n    };\n    const modifiedContext = typeof beforeNavigate === 'function' ? beforeNavigate(expandedContext) : expandedContext;\n\n    // For backwards compatibility reasons, beforeNavigate can return undefined to \"drop\" the transaction (prevent it\n    // from being sent to Sentry).\n    const finalContext = modifiedContext === undefined ? { ...expandedContext, sampled: false } : modifiedContext;\n\n    if (finalContext.sampled === false) {\n      IS_DEBUG_BUILD && logger.log(`[Tracing] Will not send ${finalContext.op} transaction because of beforeNavigate.`);\n    }\n\n    IS_DEBUG_BUILD && logger.log(`[Tracing] Starting ${finalContext.op} transaction on scope`);\n\n    const hub = this._getCurrentHub();\n    const { location } = getGlobalObject() as WindowOrWorkerGlobalScope & { location: Location };\n\n    const idleTransaction = startIdleTransaction(\n      hub,\n      finalContext,\n      idleTimeout,\n      true,\n      { location }, // for use in the tracesSampler\n    );\n    idleTransaction.registerBeforeFinishCallback((transaction, endTimestamp) => {\n      this._metrics.addPerformanceEntries(transaction);\n      adjustTransactionDuration(secToMs(maxTransactionDuration), transaction, endTimestamp);\n    });\n\n    idleTransaction.setTag('idleTimeout', this._configuredIdleTimeout);\n\n    return idleTransaction as Transaction;\n  }\n}\n\n/**\n * Gets transaction context from a sentry-trace meta.\n *\n * @returns Transaction context data from the header or undefined if there's no header or the header is malformed\n */\nexport function getHeaderContext(): Partial<TransactionContext> | undefined {\n  const header = getMetaContent('sentry-trace');\n  if (header) {\n    return extractTraceparentData(header);\n  }\n\n  return undefined;\n}\n\n/** Returns the value of a meta tag */\nexport function getMetaContent(metaName: string): string | null {\n  const el = getGlobalObject<Window>().document.querySelector(`meta[name=${metaName}]`);\n  return el ? el.getAttribute('content') : null;\n}\n\n/** Adjusts transaction value based on max transaction duration */\nfunction adjustTransactionDuration(maxDuration: number, transaction: IdleTransaction, endTimestamp: number): void {\n  const diff = endTimestamp - transaction.startTimestamp;\n  const isOutdatedTransaction = endTimestamp && (diff > maxDuration || diff < 0);\n  if (isOutdatedTransaction) {\n    transaction.setStatus('deadline_exceeded');\n    transaction.setTag('maxTransactionDurationExceeded', 'true');\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}