{"ast":null,"code":"/** PURE_IMPORTS_START _util_isArray,_observable_combineLatest,_observable_from PURE_IMPORTS_END */\nimport { isArray } from '../util/isArray';\nimport { CombineLatestOperator } from '../observable/combineLatest';\nimport { from } from '../observable/from';\nvar none = {};\nexport function combineLatest() {\n  var observables = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    observables[_i] = arguments[_i];\n  }\n  var project = null;\n  if (typeof observables[observables.length - 1] === 'function') {\n    project = observables.pop();\n  }\n  if (observables.length === 1 && isArray(observables[0])) {\n    observables = observables[0].slice();\n  }\n  return function (source) {\n    return source.lift.call(from([source].concat(observables)), new CombineLatestOperator(project));\n  };\n}","map":{"version":3,"sources":["../../../src/internal/operators/combineLatest.ts"],"names":[],"mappings":"AACA;AACA,SAAS,OAAA,QAAA,iBAA6B;AACtC,SAAS,qBAAY,QAAA,6BAAqB;AAI1C,SAAU,IAAK,QAAC,oBAAA;AAoChB,IAAA,IAAM,GAAA,CAAA,CAAA;AAA8B,OAAA,SAAA,aAE+C,CAAA,EAAA;MAF/C,WAAA,GAAA,EAAA;EAAA,KAAA,IAAA,EAAA,GAAA,CAAA,EAAA,EAAA,GAAA,SAAA,CAAA,MAE+C,EAAA,EAAA,EAAA,EAAA;;EACjF;EACA,IAAI,OAAO,GAAA,IAAA;MACT,OAAO,WAAiC,CAAA,WAAkB,CAAA,MAAA,GAAA,CAAA,CAAA,KAAA,UAAA,EAAA;IAC3D,OAAA,GAAA,WAAA,CAAA,GAAA,CAAA,CAAA;EAID;MACE,WAAW,CAAA,MAAS,KAAA,CAAA,IAAe,OAAM,CAAE,WAAC,CAAA,CAAA,CAAA,CAAA,EAAA;IAC7C,WAAA,GAAA,WAAA,CAAA,CAAA,CAAA,CAAA,KAAA,CAAA,CAAA;EAED;EACD,OAAA,UAAA,MAAA,EAAA;IAAA,OAAA,MAAA,CAAA,IAAA,CAAA,IAAA,CAAA,IAAA,CAAA,CAAA,MAAA,CAAA,CAAA,MAAA,CAAA,WAAA,CAAA,CAAA,EAAA,IAAA,qBAAA,CAAA,OAAA,CAAA,CAAA;EAAA,CAAA","sourcesContent":["/** PURE_IMPORTS_START _util_isArray,_observable_combineLatest,_observable_from PURE_IMPORTS_END */\nimport { isArray } from '../util/isArray';\nimport { CombineLatestOperator } from '../observable/combineLatest';\nimport { from } from '../observable/from';\nvar none = {};\nexport function combineLatest() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i] = arguments[_i];\n    }\n    var project = null;\n    if (typeof observables[observables.length - 1] === 'function') {\n        project = observables.pop();\n    }\n    if (observables.length === 1 && isArray(observables[0])) {\n        observables = observables[0].slice();\n    }\n    return function (source) { return source.lift.call(from([source].concat(observables)), new CombineLatestOperator(project)); };\n}\n//# sourceMappingURL=combineLatest.js.map\n"]},"metadata":{},"sourceType":"module"}