{"ast":null,"code":"/** PURE_IMPORTS_START _observable_SubscribeOnObservable PURE_IMPORTS_END */\nimport { SubscribeOnObservable } from '../observable/SubscribeOnObservable';\nexport function subscribeOn(scheduler, delay) {\n  if (delay === void 0) {\n    delay = 0;\n  }\n  return function subscribeOnOperatorFunction(source) {\n    return source.lift(new SubscribeOnOperator(scheduler, delay));\n  };\n}\nvar SubscribeOnOperator = /*@__PURE__*/function () {\n  function SubscribeOnOperator(scheduler, delay) {\n    this.scheduler = scheduler;\n    this.delay = delay;\n  }\n  SubscribeOnOperator.prototype.call = function (subscriber, source) {\n    return new SubscribeOnObservable(source, this.delay, this.scheduler).subscribe(subscriber);\n  };\n  return SubscribeOnOperator;\n}();","map":{"version":3,"sources":["../../../src/internal/operators/subscribeOn.ts"],"names":[],"mappings":"AAGA;AA6CA,SAAM,qBAAyB,QAAwB,qCAAmB;AAAjB,OAAA,SAAA,WAAA,CAAA,SAAiB,EAAA,KAAA,EAAA;EACxE,IAAA,KAAO,KAAA,KAAS,CAAA,EAAA;IACd,KAAA,GAAO,CAAA;EACT;EACD,OAAA,SAAA,2BAAA,CAAA,MAAA,EAAA;IAED,OAAA,MAAA,CAAA,IAAA,CAAA,IAAA,mBAAA,CAAA,SAAA,EAAA,KAAA,CAAA,CAAA;EACE,CAAA;AAAoB;IACA,mBAAA,GAAK,aAAQ,YAAA;EACjC,SAAC,mBAAA,CAAA,SAAA,EAAA,KAAA,EAAA;IACD,IAAA,CAAA,SAAA,GAAA,SAAA;IACE,IAAA,CAAA,KAAO,GAAI,KAAA;EAGb;EACF,mBAAA,CAAA,SAAC,CAAA,IAAA,GAAA,UAAA,UAAA,EAAA,MAAA,EAAA;IAAA,OAAA,IAAA,qBAAA,CAAA,MAAA,EAAA,IAAA,CAAA,KAAA,EAAA,IAAA,CAAA,SAAA,CAAA,CAAA,SAAA,CAAA,UAAA,CAAA","sourcesContent":["/** PURE_IMPORTS_START _observable_SubscribeOnObservable PURE_IMPORTS_END */\nimport { SubscribeOnObservable } from '../observable/SubscribeOnObservable';\nexport function subscribeOn(scheduler, delay) {\n    if (delay === void 0) {\n        delay = 0;\n    }\n    return function subscribeOnOperatorFunction(source) {\n        return source.lift(new SubscribeOnOperator(scheduler, delay));\n    };\n}\nvar SubscribeOnOperator = /*@__PURE__*/ (function () {\n    function SubscribeOnOperator(scheduler, delay) {\n        this.scheduler = scheduler;\n        this.delay = delay;\n    }\n    SubscribeOnOperator.prototype.call = function (subscriber, source) {\n        return new SubscribeOnObservable(source, this.delay, this.scheduler).subscribe(subscriber);\n    };\n    return SubscribeOnOperator;\n}());\n//# sourceMappingURL=subscribeOn.js.map\n"]},"metadata":{},"sourceType":"module"}