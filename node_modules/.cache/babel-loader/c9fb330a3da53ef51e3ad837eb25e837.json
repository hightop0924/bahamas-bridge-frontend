{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_map,_observable_from,_innerSubscribe PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { map } from './map';\nimport { from } from '../observable/from';\nimport { SimpleOuterSubscriber, SimpleInnerSubscriber, innerSubscribe } from '../innerSubscribe';\nexport function mergeMap(project, resultSelector, concurrent) {\n  if (concurrent === void 0) {\n    concurrent = Number.POSITIVE_INFINITY;\n  }\n  if (typeof resultSelector === 'function') {\n    return function (source) {\n      return source.pipe(mergeMap(function (a, i) {\n        return from(project(a, i)).pipe(map(function (b, ii) {\n          return resultSelector(a, b, i, ii);\n        }));\n      }, concurrent));\n    };\n  } else if (typeof resultSelector === 'number') {\n    concurrent = resultSelector;\n  }\n  return function (source) {\n    return source.lift(new MergeMapOperator(project, concurrent));\n  };\n}\nvar MergeMapOperator = /*@__PURE__*/function () {\n  function MergeMapOperator(project, concurrent) {\n    if (concurrent === void 0) {\n      concurrent = Number.POSITIVE_INFINITY;\n    }\n    this.project = project;\n    this.concurrent = concurrent;\n  }\n  MergeMapOperator.prototype.call = function (observer, source) {\n    return source.subscribe(new MergeMapSubscriber(observer, this.project, this.concurrent));\n  };\n  return MergeMapOperator;\n}();\nexport { MergeMapOperator };\nvar MergeMapSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(MergeMapSubscriber, _super);\n  function MergeMapSubscriber(destination, project, concurrent) {\n    if (concurrent === void 0) {\n      concurrent = Number.POSITIVE_INFINITY;\n    }\n    var _this = _super.call(this, destination) || this;\n    _this.project = project;\n    _this.concurrent = concurrent;\n    _this.hasCompleted = false;\n    _this.buffer = [];\n    _this.active = 0;\n    _this.index = 0;\n    return _this;\n  }\n  MergeMapSubscriber.prototype._next = function (value) {\n    if (this.active < this.concurrent) {\n      this._tryNext(value);\n    } else {\n      this.buffer.push(value);\n    }\n  };\n  MergeMapSubscriber.prototype._tryNext = function (value) {\n    var result;\n    var index = this.index++;\n    try {\n      result = this.project(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.active++;\n    this._innerSub(result);\n  };\n  MergeMapSubscriber.prototype._innerSub = function (ish) {\n    var innerSubscriber = new SimpleInnerSubscriber(this);\n    var destination = this.destination;\n    destination.add(innerSubscriber);\n    var innerSubscription = innerSubscribe(ish, innerSubscriber);\n    if (innerSubscription !== innerSubscriber) {\n      destination.add(innerSubscription);\n    }\n  };\n  MergeMapSubscriber.prototype._complete = function () {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n    this.unsubscribe();\n  };\n  MergeMapSubscriber.prototype.notifyNext = function (innerValue) {\n    this.destination.next(innerValue);\n  };\n  MergeMapSubscriber.prototype.notifyComplete = function () {\n    var buffer = this.buffer;\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  };\n  return MergeMapSubscriber;\n}(SimpleOuterSubscriber);\nexport { MergeMapSubscriber };\nexport var flatMap = mergeMap;","map":{"version":3,"sources":["../../../src/internal/operators/mergeMap.ts"],"names":[],"mappings":"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","sourcesContent":["/** PURE_IMPORTS_START tslib,_map,_observable_from,_innerSubscribe PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { map } from './map';\nimport { from } from '../observable/from';\nimport { SimpleOuterSubscriber, SimpleInnerSubscriber, innerSubscribe } from '../innerSubscribe';\nexport function mergeMap(project, resultSelector, concurrent) {\n    if (concurrent === void 0) {\n        concurrent = Number.POSITIVE_INFINITY;\n    }\n    if (typeof resultSelector === 'function') {\n        return function (source) { return source.pipe(mergeMap(function (a, i) { return from(project(a, i)).pipe(map(function (b, ii) { return resultSelector(a, b, i, ii); })); }, concurrent)); };\n    }\n    else if (typeof resultSelector === 'number') {\n        concurrent = resultSelector;\n    }\n    return function (source) { return source.lift(new MergeMapOperator(project, concurrent)); };\n}\nvar MergeMapOperator = /*@__PURE__*/ (function () {\n    function MergeMapOperator(project, concurrent) {\n        if (concurrent === void 0) {\n            concurrent = Number.POSITIVE_INFINITY;\n        }\n        this.project = project;\n        this.concurrent = concurrent;\n    }\n    MergeMapOperator.prototype.call = function (observer, source) {\n        return source.subscribe(new MergeMapSubscriber(observer, this.project, this.concurrent));\n    };\n    return MergeMapOperator;\n}());\nexport { MergeMapOperator };\nvar MergeMapSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(MergeMapSubscriber, _super);\n    function MergeMapSubscriber(destination, project, concurrent) {\n        if (concurrent === void 0) {\n            concurrent = Number.POSITIVE_INFINITY;\n        }\n        var _this = _super.call(this, destination) || this;\n        _this.project = project;\n        _this.concurrent = concurrent;\n        _this.hasCompleted = false;\n        _this.buffer = [];\n        _this.active = 0;\n        _this.index = 0;\n        return _this;\n    }\n    MergeMapSubscriber.prototype._next = function (value) {\n        if (this.active < this.concurrent) {\n            this._tryNext(value);\n        }\n        else {\n            this.buffer.push(value);\n        }\n    };\n    MergeMapSubscriber.prototype._tryNext = function (value) {\n        var result;\n        var index = this.index++;\n        try {\n            result = this.project(value, index);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.active++;\n        this._innerSub(result);\n    };\n    MergeMapSubscriber.prototype._innerSub = function (ish) {\n        var innerSubscriber = new SimpleInnerSubscriber(this);\n        var destination = this.destination;\n        destination.add(innerSubscriber);\n        var innerSubscription = innerSubscribe(ish, innerSubscriber);\n        if (innerSubscription !== innerSubscriber) {\n            destination.add(innerSubscription);\n        }\n    };\n    MergeMapSubscriber.prototype._complete = function () {\n        this.hasCompleted = true;\n        if (this.active === 0 && this.buffer.length === 0) {\n            this.destination.complete();\n        }\n        this.unsubscribe();\n    };\n    MergeMapSubscriber.prototype.notifyNext = function (innerValue) {\n        this.destination.next(innerValue);\n    };\n    MergeMapSubscriber.prototype.notifyComplete = function () {\n        var buffer = this.buffer;\n        this.active--;\n        if (buffer.length > 0) {\n            this._next(buffer.shift());\n        }\n        else if (this.active === 0 && this.hasCompleted) {\n            this.destination.complete();\n        }\n    };\n    return MergeMapSubscriber;\n}(SimpleOuterSubscriber));\nexport { MergeMapSubscriber };\nexport var flatMap = mergeMap;\n//# sourceMappingURL=mergeMap.js.map\n"]},"metadata":{},"sourceType":"module"}