{"ast":null,"code":"/** PURE_IMPORTS_START _Observable,_from,_empty PURE_IMPORTS_END */\nimport { Observable } from '../Observable';\nimport { from } from './from';\nimport { EMPTY } from './empty';\nexport function using(resourceFactory, observableFactory) {\n  return new Observable(function (subscriber) {\n    var resource;\n    try {\n      resource = resourceFactory();\n    } catch (err) {\n      subscriber.error(err);\n      return undefined;\n    }\n    var result;\n    try {\n      result = observableFactory(resource);\n    } catch (err) {\n      subscriber.error(err);\n      return undefined;\n    }\n    var source = result ? from(result) : EMPTY;\n    var subscription = source.subscribe(subscriber);\n    return function () {\n      subscription.unsubscribe();\n      if (resource) {\n        resource.unsubscribe();\n      }\n    };\n  });\n}","map":{"version":3,"sources":["../../../src/internal/observable/using.ts"],"names":[],"mappings":"AAAA;AAEA,SAAS,UAAM,QAAM,eAAS;AAC9B,SAAS,IAAA,QAAO,QAAM;AA8BtB,SAAM,KAAA,QAAmB,SAAA;AAEvB,OAAA,SAAW,KAAA,CAAA,eAAc,EAAA,iBAAU,EAAA;EACjC,OAAA,IAAI,UAAgC,CAAA,UAAA,UAAA,EAAA;IAEpC,IAAI,QAAA;QACF;MACD,QAAA,GAAA,eAAA,CAAA,CAAA;IAAC,CAAA,CACA,OAAA,GAAA,EAAA;MACA,UAAO,CAAA,KAAS,CAAC,GAAA,CAAA;MAClB,OAAA,SAAA;IAED;IACA,IAAI,MAAA;QACF;MACD,MAAA,GAAA,iBAAA,CAAA,QAAA,CAAA;IAAC,CAAA,CACA,OAAA,GAAA,EAAA;MACA,UAAO,CAAA,KAAS,CAAC,GAAA,CAAA;MAClB,OAAA,SAAA;IAED;IACA,IAAM,MAAA,GAAA,MAAe,GAAA,IAAO,CAAA,MAAA,CAAA,GAAU,KAAA;IACtC,IAAA,YAAO,GAAA,MAAA,CAAA,SAAA,CAAA,UAAA,CAAA;IACL,OAAA,YAAa;MACb,YAAY,CAAA,WAAE,CAAA,CAAA;UACZ,QAAQ,EAAC;QACV,QAAA,CAAA,WAAA,CAAA,CAAA;MACD;IACD,CAAA;EACJ,CAAA,CAAA","sourcesContent":["/** PURE_IMPORTS_START _Observable,_from,_empty PURE_IMPORTS_END */\nimport { Observable } from '../Observable';\nimport { from } from './from';\nimport { EMPTY } from './empty';\nexport function using(resourceFactory, observableFactory) {\n    return new Observable(function (subscriber) {\n        var resource;\n        try {\n            resource = resourceFactory();\n        }\n        catch (err) {\n            subscriber.error(err);\n            return undefined;\n        }\n        var result;\n        try {\n            result = observableFactory(resource);\n        }\n        catch (err) {\n            subscriber.error(err);\n            return undefined;\n        }\n        var source = result ? from(result) : EMPTY;\n        var subscription = source.subscribe(subscriber);\n        return function () {\n            subscription.unsubscribe();\n            if (resource) {\n                resource.unsubscribe();\n            }\n        };\n    });\n}\n//# sourceMappingURL=using.js.map\n"]},"metadata":{},"sourceType":"module"}