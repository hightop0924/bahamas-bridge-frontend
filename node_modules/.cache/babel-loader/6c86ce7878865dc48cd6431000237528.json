{"ast":null,"code":"var _jsxFileName = \"/home/hightop/bahamas_bridge/omnibridge-ui/packages/dapp/src/contexts/SettingsContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { useLocalState } from 'hooks/useLocalState';\nimport { ADDRESS_ZERO, DEFAULT_BRIDGE_DIRECTION, LOCAL_STORAGE_KEYS } from 'lib/constants';\nimport { fetchQueryParams, getDefaultToken, getNativeCurrency, getRPCKeys } from 'lib/helpers';\nimport { networks } from 'lib/networks';\nimport React, { useCallback, useContext, useEffect, useMemo, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  INFINITE_UNLOCK,\n  NEVER_SHOW_CLAIMS,\n  DISABLE_BALANCE_WHILE_TOKEN_FETCH,\n  BRIDGE_DIRECTION\n} = LOCAL_STORAGE_KEYS;\nconst SettingsContext = /*#__PURE__*/React.createContext({});\nexport const SettingsProvider = ({\n  children\n}) => {\n  _s();\n  const [queryToken, setQueryToken] = useState(null);\n  const [bridgeDirection, setBridgeDirection] = useLocalState(DEFAULT_BRIDGE_DIRECTION, BRIDGE_DIRECTION);\n  const history = useHistory();\n  useEffect(() => {\n    if (window.location.pathname === '/bridge') {\n      const params = fetchQueryParams(window.location.search);\n      if (params) {\n        const fromChainId = parseInt(params.from, 10);\n        const toChainId = parseInt(params.to, 10);\n        const tokenAddress = params === null || params === void 0 ? void 0 : params.token;\n        const networkEntry = Object.entries(networks).find(([_, {\n          homeChainId,\n          foreignChainId\n        }]) => homeChainId === fromChainId && foreignChainId === toChainId || homeChainId === toChainId && foreignChainId === fromChainId);\n        if (tokenAddress && networkEntry) {\n          setBridgeDirection(networkEntry[0], true);\n          setQueryToken(tokenAddress === ADDRESS_ZERO && networkEntry[1].enableForeignCurrencyBridge && networkEntry[1].foreignChainId === fromChainId ? getNativeCurrency(fromChainId) : {\n            chainId: fromChainId,\n            address: tokenAddress\n          });\n        } else if (networkEntry) {\n          setBridgeDirection(networkEntry[0], true);\n          setQueryToken(getDefaultToken(networkEntry[0], fromChainId));\n        }\n      }\n    }\n    history.replace({\n      search: ''\n    });\n  }, [setBridgeDirection, history]);\n  const {\n    homeRPCKey,\n    foreignRPCKey\n  } = getRPCKeys(bridgeDirection);\n  const [foreignRPC, setForeignRPC] = useLocalState('', foreignRPCKey);\n  const [homeRPC, setHomeRPC] = useLocalState('', homeRPCKey);\n  const [neverShowClaims, setNeverShowClaims] = useLocalState(false, NEVER_SHOW_CLAIMS, {\n    valueType: 'boolean'\n  });\n  const [infiniteUnlock, setInfiniteUnlock] = useLocalState(false, INFINITE_UNLOCK, {\n    valueType: 'boolean'\n  });\n  const [disableBalanceFetchToken, setDisableBalanceFetchToken] = useLocalState(false, DISABLE_BALANCE_WHILE_TOKEN_FETCH, {\n    valueType: 'boolean'\n  });\n  const [needsSaving, setNeedsSaving] = useState(false);\n  const save = useCallback(() => {\n    if (needsSaving) {\n      setBridgeDirection(bNet => bNet, true);\n      setForeignRPC(mRPC => mRPC, true);\n      setHomeRPC(xRPC => xRPC, true);\n      setNeverShowClaims(nClaims => nClaims, true);\n      setInfiniteUnlock(iUnlock => iUnlock, true);\n      setDisableBalanceFetchToken(dBalanceToken => dBalanceToken, true);\n      setNeedsSaving(false);\n    }\n  }, [setBridgeDirection, setInfiniteUnlock, setDisableBalanceFetchToken, setForeignRPC, setHomeRPC, setNeverShowClaims, needsSaving]);\n  useEffect(() => {\n    if (window.localStorage.getItem(homeRPCKey) !== homeRPC || window.localStorage.getItem(foreignRPCKey) !== foreignRPC || window.localStorage.getItem(NEVER_SHOW_CLAIMS) !== neverShowClaims.toString() || window.localStorage.getItem(INFINITE_UNLOCK) !== infiniteUnlock.toString() || window.localStorage.getItem(DISABLE_BALANCE_WHILE_TOKEN_FETCH) !== disableBalanceFetchToken.toString()) {\n      setNeedsSaving(true);\n    } else {\n      setNeedsSaving(false);\n    }\n  }, [foreignRPCKey, foreignRPC, homeRPCKey, homeRPC, neverShowClaims, infiniteUnlock, disableBalanceFetchToken]);\n  const settingsContext = useMemo(() => ({\n    bridgeDirection,\n    setBridgeDirection,\n    foreignRPC,\n    setForeignRPC,\n    homeRPC,\n    setHomeRPC,\n    infiniteUnlock,\n    setInfiniteUnlock,\n    neverShowClaims,\n    setNeverShowClaims,\n    disableBalanceFetchToken,\n    setDisableBalanceFetchToken,\n    needsSaving,\n    save,\n    queryToken,\n    setQueryToken\n  }), [bridgeDirection, setBridgeDirection, foreignRPC, setForeignRPC, homeRPC, setHomeRPC, infiniteUnlock, setInfiniteUnlock, neverShowClaims, setNeverShowClaims, disableBalanceFetchToken, setDisableBalanceFetchToken, needsSaving, save, queryToken, setQueryToken]);\n  return /*#__PURE__*/_jsxDEV(SettingsContext.Provider, {\n    value: settingsContext,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 191,\n    columnNumber: 5\n  }, this);\n};\n_s(SettingsProvider, \"qJApTq+XvyEVUsDS4LsCTYOayes=\", false, function () {\n  return [useLocalState, useHistory, useLocalState, useLocalState, useLocalState, useLocalState, useLocalState];\n});\n_c = SettingsProvider;\nexport const useSettings = () => {\n  _s2();\n  return useContext(SettingsContext);\n};\n_s2(useSettings, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"SettingsProvider\");","map":{"version":3,"names":["useLocalState","ADDRESS_ZERO","DEFAULT_BRIDGE_DIRECTION","LOCAL_STORAGE_KEYS","fetchQueryParams","getDefaultToken","getNativeCurrency","getRPCKeys","networks","React","useCallback","useContext","useEffect","useMemo","useState","useHistory","jsxDEV","_jsxDEV","INFINITE_UNLOCK","NEVER_SHOW_CLAIMS","DISABLE_BALANCE_WHILE_TOKEN_FETCH","BRIDGE_DIRECTION","SettingsContext","createContext","SettingsProvider","children","_s","queryToken","setQueryToken","bridgeDirection","setBridgeDirection","history","window","location","pathname","params","search","fromChainId","parseInt","from","toChainId","to","tokenAddress","token","networkEntry","Object","entries","find","_","homeChainId","foreignChainId","enableForeignCurrencyBridge","chainId","address","replace","homeRPCKey","foreignRPCKey","foreignRPC","setForeignRPC","homeRPC","setHomeRPC","neverShowClaims","setNeverShowClaims","valueType","infiniteUnlock","setInfiniteUnlock","disableBalanceFetchToken","setDisableBalanceFetchToken","needsSaving","setNeedsSaving","save","bNet","mRPC","xRPC","nClaims","iUnlock","dBalanceToken","localStorage","getItem","toString","settingsContext","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useSettings","_s2","$RefreshReg$"],"sources":["/home/hightop/bahamas_bridge/omnibridge-ui/packages/dapp/src/contexts/SettingsContext.jsx"],"sourcesContent":["import { useLocalState } from 'hooks/useLocalState';\nimport {\n  ADDRESS_ZERO,\n  DEFAULT_BRIDGE_DIRECTION,\n  LOCAL_STORAGE_KEYS,\n} from 'lib/constants';\nimport {\n  fetchQueryParams,\n  getDefaultToken,\n  getNativeCurrency,\n  getRPCKeys,\n} from 'lib/helpers';\nimport { networks } from 'lib/networks';\nimport React, {\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react';\nimport { useHistory } from 'react-router-dom';\n\nconst {\n  INFINITE_UNLOCK,\n  NEVER_SHOW_CLAIMS,\n  DISABLE_BALANCE_WHILE_TOKEN_FETCH,\n  BRIDGE_DIRECTION,\n} = LOCAL_STORAGE_KEYS;\n\nconst SettingsContext = React.createContext({});\n\nexport const SettingsProvider = ({ children }) => {\n  const [queryToken, setQueryToken] = useState(null);\n\n  const [bridgeDirection, setBridgeDirection] = useLocalState(\n    DEFAULT_BRIDGE_DIRECTION,\n    BRIDGE_DIRECTION,\n  );\n\n  const history = useHistory();\n\n  useEffect(() => {\n    if (window.location.pathname === '/bridge') {\n      const params = fetchQueryParams(window.location.search);\n\n      if (params) {\n        const fromChainId = parseInt(params.from, 10);\n        const toChainId = parseInt(params.to, 10);\n        const tokenAddress = params?.token;\n\n        const networkEntry = Object.entries(networks).find(\n          ([_, { homeChainId, foreignChainId }]) =>\n            (homeChainId === fromChainId && foreignChainId === toChainId) ||\n            (homeChainId === toChainId && foreignChainId === fromChainId),\n        );\n\n        if (tokenAddress && networkEntry) {\n          setBridgeDirection(networkEntry[0], true);\n          setQueryToken(\n            tokenAddress === ADDRESS_ZERO &&\n              networkEntry[1].enableForeignCurrencyBridge &&\n              networkEntry[1].foreignChainId === fromChainId\n              ? getNativeCurrency(fromChainId)\n              : { chainId: fromChainId, address: tokenAddress },\n          );\n        } else if (networkEntry) {\n          setBridgeDirection(networkEntry[0], true);\n          setQueryToken(getDefaultToken(networkEntry[0], fromChainId));\n        }\n      }\n    }\n    history.replace({\n      search: '',\n    });\n  }, [setBridgeDirection, history]);\n\n  const { homeRPCKey, foreignRPCKey } = getRPCKeys(bridgeDirection);\n\n  const [foreignRPC, setForeignRPC] = useLocalState('', foreignRPCKey);\n  const [homeRPC, setHomeRPC] = useLocalState('', homeRPCKey);\n\n  const [neverShowClaims, setNeverShowClaims] = useLocalState(\n    false,\n    NEVER_SHOW_CLAIMS,\n    { valueType: 'boolean' },\n  );\n\n  const [infiniteUnlock, setInfiniteUnlock] = useLocalState(\n    false,\n    INFINITE_UNLOCK,\n    {\n      valueType: 'boolean',\n    },\n  );\n\n  const [disableBalanceFetchToken, setDisableBalanceFetchToken] = useLocalState(\n    false,\n    DISABLE_BALANCE_WHILE_TOKEN_FETCH,\n    {\n      valueType: 'boolean',\n    },\n  );\n\n  const [needsSaving, setNeedsSaving] = useState(false);\n\n  const save = useCallback(() => {\n    if (needsSaving) {\n      setBridgeDirection(bNet => bNet, true);\n      setForeignRPC(mRPC => mRPC, true);\n      setHomeRPC(xRPC => xRPC, true);\n      setNeverShowClaims(nClaims => nClaims, true);\n      setInfiniteUnlock(iUnlock => iUnlock, true);\n      setDisableBalanceFetchToken(dBalanceToken => dBalanceToken, true);\n      setNeedsSaving(false);\n    }\n  }, [\n    setBridgeDirection,\n    setInfiniteUnlock,\n    setDisableBalanceFetchToken,\n    setForeignRPC,\n    setHomeRPC,\n    setNeverShowClaims,\n    needsSaving,\n  ]);\n\n  useEffect(() => {\n    if (\n      window.localStorage.getItem(homeRPCKey) !== homeRPC ||\n      window.localStorage.getItem(foreignRPCKey) !== foreignRPC ||\n      window.localStorage.getItem(NEVER_SHOW_CLAIMS) !==\n        neverShowClaims.toString() ||\n      window.localStorage.getItem(INFINITE_UNLOCK) !==\n        infiniteUnlock.toString() ||\n      window.localStorage.getItem(DISABLE_BALANCE_WHILE_TOKEN_FETCH) !==\n        disableBalanceFetchToken.toString()\n    ) {\n      setNeedsSaving(true);\n    } else {\n      setNeedsSaving(false);\n    }\n  }, [\n    foreignRPCKey,\n    foreignRPC,\n    homeRPCKey,\n    homeRPC,\n    neverShowClaims,\n    infiniteUnlock,\n    disableBalanceFetchToken,\n  ]);\n\n  const settingsContext = useMemo(\n    () => ({\n      bridgeDirection,\n      setBridgeDirection,\n      foreignRPC,\n      setForeignRPC,\n      homeRPC,\n      setHomeRPC,\n      infiniteUnlock,\n      setInfiniteUnlock,\n      neverShowClaims,\n      setNeverShowClaims,\n      disableBalanceFetchToken,\n      setDisableBalanceFetchToken,\n      needsSaving,\n      save,\n      queryToken,\n      setQueryToken,\n    }),\n    [\n      bridgeDirection,\n      setBridgeDirection,\n      foreignRPC,\n      setForeignRPC,\n      homeRPC,\n      setHomeRPC,\n      infiniteUnlock,\n      setInfiniteUnlock,\n      neverShowClaims,\n      setNeverShowClaims,\n      disableBalanceFetchToken,\n      setDisableBalanceFetchToken,\n      needsSaving,\n      save,\n      queryToken,\n      setQueryToken,\n    ],\n  );\n\n  return (\n    <SettingsContext.Provider value={settingsContext}>\n      {children}\n    </SettingsContext.Provider>\n  );\n};\n\nexport const useSettings = () => useContext(SettingsContext);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}