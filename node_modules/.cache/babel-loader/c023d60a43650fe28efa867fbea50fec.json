{"ast":null,"code":"class NetworkMonitor {\n  constructor() {\n    this._eventEmitters = [];\n    if (typeof window !== \"undefined\" && typeof window.addEventListener !== \"undefined\") {\n      window.addEventListener(\"online\", () => this.trigger(\"online\"));\n      window.addEventListener(\"offline\", () => this.trigger(\"offline\"));\n    }\n  }\n  on(event, callback) {\n    this._eventEmitters.push({\n      event,\n      callback\n    });\n  }\n  trigger(event) {\n    let eventEmitters = [];\n    if (event) {\n      eventEmitters = this._eventEmitters.filter(eventEmitter => eventEmitter.event === event);\n    }\n    eventEmitters.forEach(eventEmitter => {\n      eventEmitter.callback();\n    });\n  }\n}\nexport default NetworkMonitor;","map":{"version":3,"sources":["../../src/network.ts"],"names":[],"mappings":"AAIA,MAAM,cAAc,CAAA;EAGlB,WAAA,CAAA,EAAA;IACE,IAAI,CAAC,cAAc,GAAG,EAAE;IAExB,IAAI,OAAO,MAAM,KAAK,WAAW,IAAI,OAAQ,MAAc,CAAC,gBAAgB,KAAK,WAAW,EAAE;MAC5F,MAAM,CAAC,gBAAgB,CAAC,QAAQ,EAAE,MAAM,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;MAC/D,MAAM,CAAC,gBAAgB,CAAC,SAAS,EAAE,MAAM,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;IAClE;EACH;EAEO,EAAE,CAAC,KAAmB,EAAE,QAAoB,EAAA;IACjD,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC;MACvB,KAAK;MACL;KACD,CAAC;EACJ;EAEO,OAAO,CAAC,KAAmB,EAAA;IAChC,IAAI,aAAa,GAA2B,EAAE;IAE9C,IAAI,KAAK,EAAE;MACT,aAAa,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,CACvC,YAAkC,IAAK,YAAY,CAAC,KAAK,KAAK,KAAK,CACrE;IACF;IAED,aAAa,CAAC,OAAO,CAAE,YAAkC,IAAI;MAC3D,YAAY,CAAC,QAAQ,CAAA,CAAE;IACzB,CAAC,CAAC;EACJ;AACD;AAED,eAAe,cAAc","sourceRoot":"","sourcesContent":["class NetworkMonitor {\n    constructor() {\n        this._eventEmitters = [];\n        if (typeof window !== \"undefined\" && typeof window.addEventListener !== \"undefined\") {\n            window.addEventListener(\"online\", () => this.trigger(\"online\"));\n            window.addEventListener(\"offline\", () => this.trigger(\"offline\"));\n        }\n    }\n    on(event, callback) {\n        this._eventEmitters.push({\n            event,\n            callback,\n        });\n    }\n    trigger(event) {\n        let eventEmitters = [];\n        if (event) {\n            eventEmitters = this._eventEmitters.filter((eventEmitter) => eventEmitter.event === event);\n        }\n        eventEmitters.forEach((eventEmitter) => {\n            eventEmitter.callback();\n        });\n    }\n}\nexport default NetworkMonitor;\n//# sourceMappingURL=network.js.map"]},"metadata":{},"sourceType":"module"}