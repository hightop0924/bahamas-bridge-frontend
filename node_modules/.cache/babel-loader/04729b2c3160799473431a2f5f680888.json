{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { getCurrentHub, initAndBind, Integrations as CoreIntegrations } from '@sentry/core';\nimport { addInstrumentationHandler, getGlobalObject, logger, resolvedSyncPromise } from '@sentry/utils';\nimport { BrowserClient } from './client';\nimport { IS_DEBUG_BUILD } from './flags';\nimport { wrap as internalWrap } from './helpers';\nimport { Breadcrumbs, Dedupe, GlobalHandlers, LinkedErrors, TryCatch, UserAgent } from './integrations';\nexport var defaultIntegrations = [new CoreIntegrations.InboundFilters(), new CoreIntegrations.FunctionToString(), new TryCatch(), new Breadcrumbs(), new GlobalHandlers(), new LinkedErrors(), new Dedupe(), new UserAgent()];\n/**\n * The Sentry Browser SDK Client.\n *\n * To use this SDK, call the {@link init} function as early as possible when\n * loading the web page. To set context information or send manual events, use\n * the provided methods.\n *\n * @example\n *\n * ```\n *\n * import { init } from '@sentry/browser';\n *\n * init({\n *   dsn: '__DSN__',\n *   // ...\n * });\n * ```\n *\n * @example\n * ```\n *\n * import { configureScope } from '@sentry/browser';\n * configureScope((scope: Scope) => {\n *   scope.setExtra({ battery: 0.7 });\n *   scope.setTag({ user_mode: 'admin' });\n *   scope.setUser({ id: '4711' });\n * });\n * ```\n *\n * @example\n * ```\n *\n * import { addBreadcrumb } from '@sentry/browser';\n * addBreadcrumb({\n *   message: 'My Breadcrumb',\n *   // ...\n * });\n * ```\n *\n * @example\n *\n * ```\n *\n * import * as Sentry from '@sentry/browser';\n * Sentry.captureMessage('Hello, world!');\n * Sentry.captureException(new Error('Good bye'));\n * Sentry.captureEvent({\n *   message: 'Manual',\n *   stacktrace: [\n *     // ...\n *   ],\n * });\n * ```\n *\n * @see {@link BrowserOptions} for documentation on configuration options.\n */\nexport function init(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  if (options.defaultIntegrations === undefined) {\n    options.defaultIntegrations = defaultIntegrations;\n  }\n  if (options.release === undefined) {\n    var window_1 = getGlobalObject();\n    // This supports the variable that sentry-webpack-plugin injects\n    if (window_1.SENTRY_RELEASE && window_1.SENTRY_RELEASE.id) {\n      options.release = window_1.SENTRY_RELEASE.id;\n    }\n  }\n  if (options.autoSessionTracking === undefined) {\n    options.autoSessionTracking = true;\n  }\n  if (options.sendClientReports === undefined) {\n    options.sendClientReports = true;\n  }\n  initAndBind(BrowserClient, options);\n  if (options.autoSessionTracking) {\n    startSessionTracking();\n  }\n}\n/**\n * Present the user with a report dialog.\n *\n * @param options Everything is optional, we try to fetch all info need from the global scope.\n */\nexport function showReportDialog(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  var hub = getCurrentHub();\n  var scope = hub.getScope();\n  if (scope) {\n    options.user = __assign(__assign({}, scope.getUser()), options.user);\n  }\n  if (!options.eventId) {\n    options.eventId = hub.lastEventId();\n  }\n  var client = hub.getClient();\n  if (client) {\n    client.showReportDialog(options);\n  }\n}\n/**\n * This is the getter for lastEventId.\n *\n * @returns The last event id of a captured event.\n */\nexport function lastEventId() {\n  return getCurrentHub().lastEventId();\n}\n/**\n * This function is here to be API compatible with the loader.\n * @hidden\n */\nexport function forceLoad() {\n  // Noop\n}\n/**\n * This function is here to be API compatible with the loader.\n * @hidden\n */\nexport function onLoad(callback) {\n  callback();\n}\n/**\n * Call `flush()` on the current client, if there is one. See {@link Client.flush}.\n *\n * @param timeout Maximum time in ms the client should wait to flush its event queue. Omitting this parameter will cause\n * the client to wait until all events are sent before resolving the promise.\n * @returns A promise which resolves to `true` if the queue successfully drains before the timeout, or `false` if it\n * doesn't (or if there's no client defined).\n */\nexport function flush(timeout) {\n  var client = getCurrentHub().getClient();\n  if (client) {\n    return client.flush(timeout);\n  }\n  IS_DEBUG_BUILD && logger.warn('Cannot flush events. No client defined.');\n  return resolvedSyncPromise(false);\n}\n/**\n * Call `close()` on the current client, if there is one. See {@link Client.close}.\n *\n * @param timeout Maximum time in ms the client should wait to flush its event queue before shutting down. Omitting this\n * parameter will cause the client to wait until all events are sent before disabling itself.\n * @returns A promise which resolves to `true` if the queue successfully drains before the timeout, or `false` if it\n * doesn't (or if there's no client defined).\n */\nexport function close(timeout) {\n  var client = getCurrentHub().getClient();\n  if (client) {\n    return client.close(timeout);\n  }\n  IS_DEBUG_BUILD && logger.warn('Cannot flush events and disable SDK. No client defined.');\n  return resolvedSyncPromise(false);\n}\n/**\n * Wrap code within a try/catch block so the SDK is able to capture errors.\n *\n * @param fn A function to wrap.\n *\n * @returns The result of wrapped function call.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function wrap(fn) {\n  return internalWrap(fn)();\n}\nfunction startSessionOnHub(hub) {\n  hub.startSession({\n    ignoreDuration: true\n  });\n  hub.captureSession();\n}\n/**\n * Enable automatic Session Tracking for the initial page load.\n */\nfunction startSessionTracking() {\n  var window = getGlobalObject();\n  var document = window.document;\n  if (typeof document === 'undefined') {\n    IS_DEBUG_BUILD && logger.warn('Session tracking in non-browser environment with @sentry/browser is not supported.');\n    return;\n  }\n  var hub = getCurrentHub();\n  // The only way for this to be false is for there to be a version mismatch between @sentry/browser (>= 6.0.0) and\n  // @sentry/hub (< 5.27.0). In the simple case, there won't ever be such a mismatch, because the two packages are\n  // pinned at the same version in package.json, but there are edge cases where it's possible. See\n  // https://github.com/getsentry/sentry-javascript/issues/3207 and\n  // https://github.com/getsentry/sentry-javascript/issues/3234 and\n  // https://github.com/getsentry/sentry-javascript/issues/3278.\n  if (!hub.captureSession) {\n    return;\n  }\n  // The session duration for browser sessions does not track a meaningful\n  // concept that can be used as a metric.\n  // Automatically captured sessions are akin to page views, and thus we\n  // discard their duration.\n  startSessionOnHub(hub);\n  // We want to create a session for every navigation as well\n  addInstrumentationHandler('history', function (_a) {\n    var from = _a.from,\n      to = _a.to;\n    // Don't create an additional session for the initial route or if the location did not change\n    if (!(from === undefined || from === to)) {\n      startSessionOnHub(getCurrentHub());\n    }\n  });\n}","map":{"version":3,"sources":["../../../src/sdk.ts"],"names":[],"mappings":"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","sourcesContent":["import { getCurrentHub, initAndBind, Integrations as CoreIntegrations } from '@sentry/core';\nimport { Hub } from '@sentry/types';\nimport { addInstrumentationHandler, getGlobalObject, logger, resolvedSyncPromise } from '@sentry/utils';\n\nimport { BrowserOptions } from './backend';\nimport { BrowserClient } from './client';\nimport { IS_DEBUG_BUILD } from './flags';\nimport { ReportDialogOptions, wrap as internalWrap } from './helpers';\nimport { Breadcrumbs, Dedupe, GlobalHandlers, LinkedErrors, TryCatch, UserAgent } from './integrations';\n\nexport const defaultIntegrations = [\n  new CoreIntegrations.InboundFilters(),\n  new CoreIntegrations.FunctionToString(),\n  new TryCatch(),\n  new Breadcrumbs(),\n  new GlobalHandlers(),\n  new LinkedErrors(),\n  new Dedupe(),\n  new UserAgent(),\n];\n\n/**\n * The Sentry Browser SDK Client.\n *\n * To use this SDK, call the {@link init} function as early as possible when\n * loading the web page. To set context information or send manual events, use\n * the provided methods.\n *\n * @example\n *\n * ```\n *\n * import { init } from '@sentry/browser';\n *\n * init({\n *   dsn: '__DSN__',\n *   // ...\n * });\n * ```\n *\n * @example\n * ```\n *\n * import { configureScope } from '@sentry/browser';\n * configureScope((scope: Scope) => {\n *   scope.setExtra({ battery: 0.7 });\n *   scope.setTag({ user_mode: 'admin' });\n *   scope.setUser({ id: '4711' });\n * });\n * ```\n *\n * @example\n * ```\n *\n * import { addBreadcrumb } from '@sentry/browser';\n * addBreadcrumb({\n *   message: 'My Breadcrumb',\n *   // ...\n * });\n * ```\n *\n * @example\n *\n * ```\n *\n * import * as Sentry from '@sentry/browser';\n * Sentry.captureMessage('Hello, world!');\n * Sentry.captureException(new Error('Good bye'));\n * Sentry.captureEvent({\n *   message: 'Manual',\n *   stacktrace: [\n *     // ...\n *   ],\n * });\n * ```\n *\n * @see {@link BrowserOptions} for documentation on configuration options.\n */\nexport function init(options: BrowserOptions = {}): void {\n  if (options.defaultIntegrations === undefined) {\n    options.defaultIntegrations = defaultIntegrations;\n  }\n  if (options.release === undefined) {\n    const window = getGlobalObject<Window>();\n    // This supports the variable that sentry-webpack-plugin injects\n    if (window.SENTRY_RELEASE && window.SENTRY_RELEASE.id) {\n      options.release = window.SENTRY_RELEASE.id;\n    }\n  }\n  if (options.autoSessionTracking === undefined) {\n    options.autoSessionTracking = true;\n  }\n  if (options.sendClientReports === undefined) {\n    options.sendClientReports = true;\n  }\n\n  initAndBind(BrowserClient, options);\n\n  if (options.autoSessionTracking) {\n    startSessionTracking();\n  }\n}\n\n/**\n * Present the user with a report dialog.\n *\n * @param options Everything is optional, we try to fetch all info need from the global scope.\n */\nexport function showReportDialog(options: ReportDialogOptions = {}): void {\n  const hub = getCurrentHub();\n  const scope = hub.getScope();\n  if (scope) {\n    options.user = {\n      ...scope.getUser(),\n      ...options.user,\n    };\n  }\n\n  if (!options.eventId) {\n    options.eventId = hub.lastEventId();\n  }\n  const client = hub.getClient<BrowserClient>();\n  if (client) {\n    client.showReportDialog(options);\n  }\n}\n\n/**\n * This is the getter for lastEventId.\n *\n * @returns The last event id of a captured event.\n */\nexport function lastEventId(): string | undefined {\n  return getCurrentHub().lastEventId();\n}\n\n/**\n * This function is here to be API compatible with the loader.\n * @hidden\n */\nexport function forceLoad(): void {\n  // Noop\n}\n\n/**\n * This function is here to be API compatible with the loader.\n * @hidden\n */\nexport function onLoad(callback: () => void): void {\n  callback();\n}\n\n/**\n * Call `flush()` on the current client, if there is one. See {@link Client.flush}.\n *\n * @param timeout Maximum time in ms the client should wait to flush its event queue. Omitting this parameter will cause\n * the client to wait until all events are sent before resolving the promise.\n * @returns A promise which resolves to `true` if the queue successfully drains before the timeout, or `false` if it\n * doesn't (or if there's no client defined).\n */\nexport function flush(timeout?: number): PromiseLike<boolean> {\n  const client = getCurrentHub().getClient<BrowserClient>();\n  if (client) {\n    return client.flush(timeout);\n  }\n  IS_DEBUG_BUILD && logger.warn('Cannot flush events. No client defined.');\n  return resolvedSyncPromise(false);\n}\n\n/**\n * Call `close()` on the current client, if there is one. See {@link Client.close}.\n *\n * @param timeout Maximum time in ms the client should wait to flush its event queue before shutting down. Omitting this\n * parameter will cause the client to wait until all events are sent before disabling itself.\n * @returns A promise which resolves to `true` if the queue successfully drains before the timeout, or `false` if it\n * doesn't (or if there's no client defined).\n */\nexport function close(timeout?: number): PromiseLike<boolean> {\n  const client = getCurrentHub().getClient<BrowserClient>();\n  if (client) {\n    return client.close(timeout);\n  }\n  IS_DEBUG_BUILD && logger.warn('Cannot flush events and disable SDK. No client defined.');\n  return resolvedSyncPromise(false);\n}\n\n/**\n * Wrap code within a try/catch block so the SDK is able to capture errors.\n *\n * @param fn A function to wrap.\n *\n * @returns The result of wrapped function call.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function wrap(fn: (...args: any) => any): any {\n  return internalWrap(fn)();\n}\n\nfunction startSessionOnHub(hub: Hub): void {\n  hub.startSession({ ignoreDuration: true });\n  hub.captureSession();\n}\n\n/**\n * Enable automatic Session Tracking for the initial page load.\n */\nfunction startSessionTracking(): void {\n  const window = getGlobalObject<Window>();\n  const document = window.document;\n\n  if (typeof document === 'undefined') {\n    IS_DEBUG_BUILD && logger.warn('Session tracking in non-browser environment with @sentry/browser is not supported.');\n    return;\n  }\n\n  const hub = getCurrentHub();\n\n  // The only way for this to be false is for there to be a version mismatch between @sentry/browser (>= 6.0.0) and\n  // @sentry/hub (< 5.27.0). In the simple case, there won't ever be such a mismatch, because the two packages are\n  // pinned at the same version in package.json, but there are edge cases where it's possible. See\n  // https://github.com/getsentry/sentry-javascript/issues/3207 and\n  // https://github.com/getsentry/sentry-javascript/issues/3234 and\n  // https://github.com/getsentry/sentry-javascript/issues/3278.\n  if (!hub.captureSession) {\n    return;\n  }\n\n  // The session duration for browser sessions does not track a meaningful\n  // concept that can be used as a metric.\n  // Automatically captured sessions are akin to page views, and thus we\n  // discard their duration.\n  startSessionOnHub(hub);\n\n  // We want to create a session for every navigation as well\n  addInstrumentationHandler('history', ({ from, to }) => {\n    // Don't create an additional session for the initial route or if the location did not change\n    if (!(from === undefined || from === to)) {\n      startSessionOnHub(getCurrentHub());\n    }\n  });\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}