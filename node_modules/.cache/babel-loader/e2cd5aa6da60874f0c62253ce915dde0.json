{"ast":null,"code":"import { logger } from '@sentry/utils';\nimport { IS_DEBUG_BUILD } from '../flags';\n/** Deduplication filter */\nvar Dedupe = /** @class */function () {\n  function Dedupe() {\n    /**\n     * @inheritDoc\n     */\n    this.name = Dedupe.id;\n  }\n  /**\n   * @inheritDoc\n   */\n  Dedupe.prototype.setupOnce = function (addGlobalEventProcessor, getCurrentHub) {\n    addGlobalEventProcessor(function (currentEvent) {\n      var self = getCurrentHub().getIntegration(Dedupe);\n      if (self) {\n        // Juuust in case something goes wrong\n        try {\n          if (_shouldDropEvent(currentEvent, self._previousEvent)) {\n            IS_DEBUG_BUILD && logger.warn('Event dropped due to being a duplicate of previously captured event.');\n            return null;\n          }\n        } catch (_oO) {\n          return self._previousEvent = currentEvent;\n        }\n        return self._previousEvent = currentEvent;\n      }\n      return currentEvent;\n    });\n  };\n  /**\n   * @inheritDoc\n   */\n  Dedupe.id = 'Dedupe';\n  return Dedupe;\n}();\nexport { Dedupe };\n/** JSDoc */\nfunction _shouldDropEvent(currentEvent, previousEvent) {\n  if (!previousEvent) {\n    return false;\n  }\n  if (_isSameMessageEvent(currentEvent, previousEvent)) {\n    return true;\n  }\n  if (_isSameExceptionEvent(currentEvent, previousEvent)) {\n    return true;\n  }\n  return false;\n}\n/** JSDoc */\nfunction _isSameMessageEvent(currentEvent, previousEvent) {\n  var currentMessage = currentEvent.message;\n  var previousMessage = previousEvent.message;\n  // If neither event has a message property, they were both exceptions, so bail out\n  if (!currentMessage && !previousMessage) {\n    return false;\n  }\n  // If only one event has a stacktrace, but not the other one, they are not the same\n  if (currentMessage && !previousMessage || !currentMessage && previousMessage) {\n    return false;\n  }\n  if (currentMessage !== previousMessage) {\n    return false;\n  }\n  if (!_isSameFingerprint(currentEvent, previousEvent)) {\n    return false;\n  }\n  if (!_isSameStacktrace(currentEvent, previousEvent)) {\n    return false;\n  }\n  return true;\n}\n/** JSDoc */\nfunction _isSameExceptionEvent(currentEvent, previousEvent) {\n  var previousException = _getExceptionFromEvent(previousEvent);\n  var currentException = _getExceptionFromEvent(currentEvent);\n  if (!previousException || !currentException) {\n    return false;\n  }\n  if (previousException.type !== currentException.type || previousException.value !== currentException.value) {\n    return false;\n  }\n  if (!_isSameFingerprint(currentEvent, previousEvent)) {\n    return false;\n  }\n  if (!_isSameStacktrace(currentEvent, previousEvent)) {\n    return false;\n  }\n  return true;\n}\n/** JSDoc */\nfunction _isSameStacktrace(currentEvent, previousEvent) {\n  var currentFrames = _getFramesFromEvent(currentEvent);\n  var previousFrames = _getFramesFromEvent(previousEvent);\n  // If neither event has a stacktrace, they are assumed to be the same\n  if (!currentFrames && !previousFrames) {\n    return true;\n  }\n  // If only one event has a stacktrace, but not the other one, they are not the same\n  if (currentFrames && !previousFrames || !currentFrames && previousFrames) {\n    return false;\n  }\n  currentFrames = currentFrames;\n  previousFrames = previousFrames;\n  // If number of frames differ, they are not the same\n  if (previousFrames.length !== currentFrames.length) {\n    return false;\n  }\n  // Otherwise, compare the two\n  for (var i = 0; i < previousFrames.length; i++) {\n    var frameA = previousFrames[i];\n    var frameB = currentFrames[i];\n    if (frameA.filename !== frameB.filename || frameA.lineno !== frameB.lineno || frameA.colno !== frameB.colno || frameA.function !== frameB.function) {\n      return false;\n    }\n  }\n  return true;\n}\n/** JSDoc */\nfunction _isSameFingerprint(currentEvent, previousEvent) {\n  var currentFingerprint = currentEvent.fingerprint;\n  var previousFingerprint = previousEvent.fingerprint;\n  // If neither event has a fingerprint, they are assumed to be the same\n  if (!currentFingerprint && !previousFingerprint) {\n    return true;\n  }\n  // If only one event has a fingerprint, but not the other one, they are not the same\n  if (currentFingerprint && !previousFingerprint || !currentFingerprint && previousFingerprint) {\n    return false;\n  }\n  currentFingerprint = currentFingerprint;\n  previousFingerprint = previousFingerprint;\n  // Otherwise, compare the two\n  try {\n    return !!(currentFingerprint.join('') === previousFingerprint.join(''));\n  } catch (_oO) {\n    return false;\n  }\n}\n/** JSDoc */\nfunction _getExceptionFromEvent(event) {\n  return event.exception && event.exception.values && event.exception.values[0];\n}\n/** JSDoc */\nfunction _getFramesFromEvent(event) {\n  var exception = event.exception;\n  if (exception) {\n    try {\n      // @ts-ignore Object could be undefined\n      return exception.values[0].stacktrace.frames;\n    } catch (_oO) {\n      return undefined;\n    }\n  } else if (event.stacktrace) {\n    return event.stacktrace.frames;\n  }\n  return undefined;\n}","map":{"version":3,"sources":["../../../../src/integrations/dedupe.ts"],"names":[],"mappings":"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","sourcesContent":["import { Event, EventProcessor, Exception, Hub, Integration, StackFrame } from '@sentry/types';\nimport { logger } from '@sentry/utils';\n\nimport { IS_DEBUG_BUILD } from '../flags';\n\n/** Deduplication filter */\nexport class Dedupe implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'Dedupe';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = Dedupe.id;\n\n  /**\n   * @inheritDoc\n   */\n  private _previousEvent?: Event;\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(addGlobalEventProcessor: (callback: EventProcessor) => void, getCurrentHub: () => Hub): void {\n    addGlobalEventProcessor((currentEvent: Event) => {\n      const self = getCurrentHub().getIntegration(Dedupe);\n      if (self) {\n        // Juuust in case something goes wrong\n        try {\n          if (_shouldDropEvent(currentEvent, self._previousEvent)) {\n            IS_DEBUG_BUILD && logger.warn('Event dropped due to being a duplicate of previously captured event.');\n            return null;\n          }\n        } catch (_oO) {\n          return (self._previousEvent = currentEvent);\n        }\n\n        return (self._previousEvent = currentEvent);\n      }\n      return currentEvent;\n    });\n  }\n}\n\n/** JSDoc */\nfunction _shouldDropEvent(currentEvent: Event, previousEvent?: Event): boolean {\n  if (!previousEvent) {\n    return false;\n  }\n\n  if (_isSameMessageEvent(currentEvent, previousEvent)) {\n    return true;\n  }\n\n  if (_isSameExceptionEvent(currentEvent, previousEvent)) {\n    return true;\n  }\n\n  return false;\n}\n\n/** JSDoc */\nfunction _isSameMessageEvent(currentEvent: Event, previousEvent: Event): boolean {\n  const currentMessage = currentEvent.message;\n  const previousMessage = previousEvent.message;\n\n  // If neither event has a message property, they were both exceptions, so bail out\n  if (!currentMessage && !previousMessage) {\n    return false;\n  }\n\n  // If only one event has a stacktrace, but not the other one, they are not the same\n  if ((currentMessage && !previousMessage) || (!currentMessage && previousMessage)) {\n    return false;\n  }\n\n  if (currentMessage !== previousMessage) {\n    return false;\n  }\n\n  if (!_isSameFingerprint(currentEvent, previousEvent)) {\n    return false;\n  }\n\n  if (!_isSameStacktrace(currentEvent, previousEvent)) {\n    return false;\n  }\n\n  return true;\n}\n\n/** JSDoc */\nfunction _isSameExceptionEvent(currentEvent: Event, previousEvent: Event): boolean {\n  const previousException = _getExceptionFromEvent(previousEvent);\n  const currentException = _getExceptionFromEvent(currentEvent);\n\n  if (!previousException || !currentException) {\n    return false;\n  }\n\n  if (previousException.type !== currentException.type || previousException.value !== currentException.value) {\n    return false;\n  }\n\n  if (!_isSameFingerprint(currentEvent, previousEvent)) {\n    return false;\n  }\n\n  if (!_isSameStacktrace(currentEvent, previousEvent)) {\n    return false;\n  }\n\n  return true;\n}\n\n/** JSDoc */\nfunction _isSameStacktrace(currentEvent: Event, previousEvent: Event): boolean {\n  let currentFrames = _getFramesFromEvent(currentEvent);\n  let previousFrames = _getFramesFromEvent(previousEvent);\n\n  // If neither event has a stacktrace, they are assumed to be the same\n  if (!currentFrames && !previousFrames) {\n    return true;\n  }\n\n  // If only one event has a stacktrace, but not the other one, they are not the same\n  if ((currentFrames && !previousFrames) || (!currentFrames && previousFrames)) {\n    return false;\n  }\n\n  currentFrames = currentFrames as StackFrame[];\n  previousFrames = previousFrames as StackFrame[];\n\n  // If number of frames differ, they are not the same\n  if (previousFrames.length !== currentFrames.length) {\n    return false;\n  }\n\n  // Otherwise, compare the two\n  for (let i = 0; i < previousFrames.length; i++) {\n    const frameA = previousFrames[i];\n    const frameB = currentFrames[i];\n\n    if (\n      frameA.filename !== frameB.filename ||\n      frameA.lineno !== frameB.lineno ||\n      frameA.colno !== frameB.colno ||\n      frameA.function !== frameB.function\n    ) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/** JSDoc */\nfunction _isSameFingerprint(currentEvent: Event, previousEvent: Event): boolean {\n  let currentFingerprint = currentEvent.fingerprint;\n  let previousFingerprint = previousEvent.fingerprint;\n\n  // If neither event has a fingerprint, they are assumed to be the same\n  if (!currentFingerprint && !previousFingerprint) {\n    return true;\n  }\n\n  // If only one event has a fingerprint, but not the other one, they are not the same\n  if ((currentFingerprint && !previousFingerprint) || (!currentFingerprint && previousFingerprint)) {\n    return false;\n  }\n\n  currentFingerprint = currentFingerprint as string[];\n  previousFingerprint = previousFingerprint as string[];\n\n  // Otherwise, compare the two\n  try {\n    return !!(currentFingerprint.join('') === previousFingerprint.join(''));\n  } catch (_oO) {\n    return false;\n  }\n}\n\n/** JSDoc */\nfunction _getExceptionFromEvent(event: Event): Exception | undefined {\n  return event.exception && event.exception.values && event.exception.values[0];\n}\n\n/** JSDoc */\nfunction _getFramesFromEvent(event: Event): StackFrame[] | undefined {\n  const exception = event.exception;\n\n  if (exception) {\n    try {\n      // @ts-ignore Object could be undefined\n      return exception.values[0].stacktrace.frames;\n    } catch (_oO) {\n      return undefined;\n    }\n  } else if (event.stacktrace) {\n    return event.stacktrace.frames;\n  }\n  return undefined;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}