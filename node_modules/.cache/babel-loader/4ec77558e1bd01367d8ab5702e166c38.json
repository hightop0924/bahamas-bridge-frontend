{"ast":null,"code":"import { __assign, __read } from \"tslib\";\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\nimport { getCurrentHub } from '@sentry/core';\nimport { Severity } from '@sentry/types';\nimport { addExceptionMechanism, addInstrumentationHandler, getLocationHref, isErrorEvent, isPrimitive, isString, logger } from '@sentry/utils';\nimport { eventFromUnknownInput } from '../eventbuilder';\nimport { IS_DEBUG_BUILD } from '../flags';\nimport { shouldIgnoreOnError } from '../helpers';\n/** Global handlers */\nvar GlobalHandlers = /** @class */function () {\n  /** JSDoc */\n  function GlobalHandlers(options) {\n    /**\n     * @inheritDoc\n     */\n    this.name = GlobalHandlers.id;\n    /**\n     * Stores references functions to installing handlers. Will set to undefined\n     * after they have been run so that they are not used twice.\n     */\n    this._installFunc = {\n      onerror: _installGlobalOnErrorHandler,\n      onunhandledrejection: _installGlobalOnUnhandledRejectionHandler\n    };\n    this._options = __assign({\n      onerror: true,\n      onunhandledrejection: true\n    }, options);\n  }\n  /**\n   * @inheritDoc\n   */\n  GlobalHandlers.prototype.setupOnce = function () {\n    Error.stackTraceLimit = 50;\n    var options = this._options;\n    // We can disable guard-for-in as we construct the options object above + do checks against\n    // `this._installFunc` for the property.\n    // eslint-disable-next-line guard-for-in\n    for (var key in options) {\n      var installFunc = this._installFunc[key];\n      if (installFunc && options[key]) {\n        globalHandlerLog(key);\n        installFunc();\n        this._installFunc[key] = undefined;\n      }\n    }\n  };\n  /**\n   * @inheritDoc\n   */\n  GlobalHandlers.id = 'GlobalHandlers';\n  return GlobalHandlers;\n}();\nexport { GlobalHandlers };\n/** JSDoc */\nfunction _installGlobalOnErrorHandler() {\n  addInstrumentationHandler('error',\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  function (data) {\n    var _a = __read(getHubAndAttachStacktrace(), 2),\n      hub = _a[0],\n      attachStacktrace = _a[1];\n    if (!hub.getIntegration(GlobalHandlers)) {\n      return;\n    }\n    var msg = data.msg,\n      url = data.url,\n      line = data.line,\n      column = data.column,\n      error = data.error;\n    if (shouldIgnoreOnError() || error && error.__sentry_own_request__) {\n      return;\n    }\n    var event = error === undefined && isString(msg) ? _eventFromIncompleteOnError(msg, url, line, column) : _enhanceEventWithInitialFrame(eventFromUnknownInput(error || msg, undefined, attachStacktrace, false), url, line, column);\n    event.level = Severity.Error;\n    addMechanismAndCapture(hub, error, event, 'onerror');\n  });\n}\n/** JSDoc */\nfunction _installGlobalOnUnhandledRejectionHandler() {\n  addInstrumentationHandler('unhandledrejection',\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  function (e) {\n    var _a = __read(getHubAndAttachStacktrace(), 2),\n      hub = _a[0],\n      attachStacktrace = _a[1];\n    if (!hub.getIntegration(GlobalHandlers)) {\n      return;\n    }\n    var error = e;\n    // dig the object of the rejection out of known event types\n    try {\n      // PromiseRejectionEvents store the object of the rejection under 'reason'\n      // see https://developer.mozilla.org/en-US/docs/Web/API/PromiseRejectionEvent\n      if ('reason' in e) {\n        error = e.reason;\n      }\n      // something, somewhere, (likely a browser extension) effectively casts PromiseRejectionEvents\n      // to CustomEvents, moving the `promise` and `reason` attributes of the PRE into\n      // the CustomEvent's `detail` attribute, since they're not part of CustomEvent's spec\n      // see https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent and\n      // https://github.com/getsentry/sentry-javascript/issues/2380\n      else if ('detail' in e && 'reason' in e.detail) {\n        error = e.detail.reason;\n      }\n    } catch (_oO) {\n      // no-empty\n    }\n    if (shouldIgnoreOnError() || error && error.__sentry_own_request__) {\n      return true;\n    }\n    var event = isPrimitive(error) ? _eventFromRejectionWithPrimitive(error) : eventFromUnknownInput(error, undefined, attachStacktrace, true);\n    event.level = Severity.Error;\n    addMechanismAndCapture(hub, error, event, 'onunhandledrejection');\n    return;\n  });\n}\n/**\n * Create an event from a promise rejection where the `reason` is a primitive.\n *\n * @param reason: The `reason` property of the promise rejection\n * @returns An Event object with an appropriate `exception` value\n */\nfunction _eventFromRejectionWithPrimitive(reason) {\n  return {\n    exception: {\n      values: [{\n        type: 'UnhandledRejection',\n        // String() is needed because the Primitive type includes symbols (which can't be automatically stringified)\n        value: \"Non-Error promise rejection captured with value: \" + String(reason)\n      }]\n    }\n  };\n}\n/**\n * This function creates a stack from an old, error-less onerror handler.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _eventFromIncompleteOnError(msg, url, line, column) {\n  var ERROR_TYPES_RE = /^(?:[Uu]ncaught (?:exception: )?)?(?:((?:Eval|Internal|Range|Reference|Syntax|Type|URI|)Error): )?(.*)$/i;\n  // If 'message' is ErrorEvent, get real message from inside\n  var message = isErrorEvent(msg) ? msg.message : msg;\n  var name = 'Error';\n  var groups = message.match(ERROR_TYPES_RE);\n  if (groups) {\n    name = groups[1];\n    message = groups[2];\n  }\n  var event = {\n    exception: {\n      values: [{\n        type: name,\n        value: message\n      }]\n    }\n  };\n  return _enhanceEventWithInitialFrame(event, url, line, column);\n}\n/** JSDoc */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _enhanceEventWithInitialFrame(event, url, line, column) {\n  // event.exception\n  var e = event.exception = event.exception || {};\n  // event.exception.values\n  var ev = e.values = e.values || [];\n  // event.exception.values[0]\n  var ev0 = ev[0] = ev[0] || {};\n  // event.exception.values[0].stacktrace\n  var ev0s = ev0.stacktrace = ev0.stacktrace || {};\n  // event.exception.values[0].stacktrace.frames\n  var ev0sf = ev0s.frames = ev0s.frames || [];\n  var colno = isNaN(parseInt(column, 10)) ? undefined : column;\n  var lineno = isNaN(parseInt(line, 10)) ? undefined : line;\n  var filename = isString(url) && url.length > 0 ? url : getLocationHref();\n  // event.exception.values[0].stacktrace.frames\n  if (ev0sf.length === 0) {\n    ev0sf.push({\n      colno: colno,\n      filename: filename,\n      function: '?',\n      in_app: true,\n      lineno: lineno\n    });\n  }\n  return event;\n}\nfunction globalHandlerLog(type) {\n  IS_DEBUG_BUILD && logger.log(\"Global Handler attached: \" + type);\n}\nfunction addMechanismAndCapture(hub, error, event, type) {\n  addExceptionMechanism(event, {\n    handled: false,\n    type: type\n  });\n  hub.captureEvent(event, {\n    originalException: error\n  });\n}\nfunction getHubAndAttachStacktrace() {\n  var hub = getCurrentHub();\n  var client = hub.getClient();\n  var attachStacktrace = client && client.getOptions().attachStacktrace;\n  return [hub, attachStacktrace];\n}","map":{"version":3,"sources":["../../../../src/integrations/globalhandlers.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/no-unsafe-member-access */\nimport { getCurrentHub } from '@sentry/core';\nimport { Event, EventHint, Hub, Integration, Primitive, Severity } from '@sentry/types';\nimport {\n  addExceptionMechanism,\n  addInstrumentationHandler,\n  getLocationHref,\n  isErrorEvent,\n  isPrimitive,\n  isString,\n  logger,\n} from '@sentry/utils';\n\nimport { eventFromUnknownInput } from '../eventbuilder';\nimport { IS_DEBUG_BUILD } from '../flags';\nimport { shouldIgnoreOnError } from '../helpers';\n\ntype GlobalHandlersIntegrationsOptionKeys = 'onerror' | 'onunhandledrejection';\n\n/** JSDoc */\ntype GlobalHandlersIntegrations = Record<GlobalHandlersIntegrationsOptionKeys, boolean>;\n\n/** Global handlers */\nexport class GlobalHandlers implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'GlobalHandlers';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = GlobalHandlers.id;\n\n  /** JSDoc */\n  private readonly _options: GlobalHandlersIntegrations;\n\n  /**\n   * Stores references functions to installing handlers. Will set to undefined\n   * after they have been run so that they are not used twice.\n   */\n  private _installFunc: Record<GlobalHandlersIntegrationsOptionKeys, (() => void) | undefined> = {\n    onerror: _installGlobalOnErrorHandler,\n    onunhandledrejection: _installGlobalOnUnhandledRejectionHandler,\n  };\n\n  /** JSDoc */\n  public constructor(options?: GlobalHandlersIntegrations) {\n    this._options = {\n      onerror: true,\n      onunhandledrejection: true,\n      ...options,\n    };\n  }\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    Error.stackTraceLimit = 50;\n    const options = this._options;\n\n    // We can disable guard-for-in as we construct the options object above + do checks against\n    // `this._installFunc` for the property.\n    // eslint-disable-next-line guard-for-in\n    for (const key in options) {\n      const installFunc = this._installFunc[key as GlobalHandlersIntegrationsOptionKeys];\n      if (installFunc && options[key as GlobalHandlersIntegrationsOptionKeys]) {\n        globalHandlerLog(key);\n        installFunc();\n        this._installFunc[key as GlobalHandlersIntegrationsOptionKeys] = undefined;\n      }\n    }\n  }\n}\n\n/** JSDoc */\nfunction _installGlobalOnErrorHandler(): void {\n  addInstrumentationHandler(\n    'error',\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (data: { msg: any; url: any; line: any; column: any; error: any }) => {\n      const [hub, attachStacktrace] = getHubAndAttachStacktrace();\n      if (!hub.getIntegration(GlobalHandlers)) {\n        return;\n      }\n      const { msg, url, line, column, error } = data;\n      if (shouldIgnoreOnError() || (error && error.__sentry_own_request__)) {\n        return;\n      }\n\n      const event =\n        error === undefined && isString(msg)\n          ? _eventFromIncompleteOnError(msg, url, line, column)\n          : _enhanceEventWithInitialFrame(\n              eventFromUnknownInput(error || msg, undefined, attachStacktrace, false),\n              url,\n              line,\n              column,\n            );\n\n      event.level = Severity.Error;\n\n      addMechanismAndCapture(hub, error, event, 'onerror');\n    },\n  );\n}\n\n/** JSDoc */\nfunction _installGlobalOnUnhandledRejectionHandler(): void {\n  addInstrumentationHandler(\n    'unhandledrejection',\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (e: any) => {\n      const [hub, attachStacktrace] = getHubAndAttachStacktrace();\n      if (!hub.getIntegration(GlobalHandlers)) {\n        return;\n      }\n      let error = e;\n\n      // dig the object of the rejection out of known event types\n      try {\n        // PromiseRejectionEvents store the object of the rejection under 'reason'\n        // see https://developer.mozilla.org/en-US/docs/Web/API/PromiseRejectionEvent\n        if ('reason' in e) {\n          error = e.reason;\n        }\n        // something, somewhere, (likely a browser extension) effectively casts PromiseRejectionEvents\n        // to CustomEvents, moving the `promise` and `reason` attributes of the PRE into\n        // the CustomEvent's `detail` attribute, since they're not part of CustomEvent's spec\n        // see https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent and\n        // https://github.com/getsentry/sentry-javascript/issues/2380\n        else if ('detail' in e && 'reason' in e.detail) {\n          error = e.detail.reason;\n        }\n      } catch (_oO) {\n        // no-empty\n      }\n\n      if (shouldIgnoreOnError() || (error && error.__sentry_own_request__)) {\n        return true;\n      }\n\n      const event = isPrimitive(error)\n        ? _eventFromRejectionWithPrimitive(error)\n        : eventFromUnknownInput(error, undefined, attachStacktrace, true);\n\n      event.level = Severity.Error;\n\n      addMechanismAndCapture(hub, error, event, 'onunhandledrejection');\n      return;\n    },\n  );\n}\n\n/**\n * Create an event from a promise rejection where the `reason` is a primitive.\n *\n * @param reason: The `reason` property of the promise rejection\n * @returns An Event object with an appropriate `exception` value\n */\nfunction _eventFromRejectionWithPrimitive(reason: Primitive): Event {\n  return {\n    exception: {\n      values: [\n        {\n          type: 'UnhandledRejection',\n          // String() is needed because the Primitive type includes symbols (which can't be automatically stringified)\n          value: `Non-Error promise rejection captured with value: ${String(reason)}`,\n        },\n      ],\n    },\n  };\n}\n\n/**\n * This function creates a stack from an old, error-less onerror handler.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _eventFromIncompleteOnError(msg: any, url: any, line: any, column: any): Event {\n  const ERROR_TYPES_RE =\n    /^(?:[Uu]ncaught (?:exception: )?)?(?:((?:Eval|Internal|Range|Reference|Syntax|Type|URI|)Error): )?(.*)$/i;\n\n  // If 'message' is ErrorEvent, get real message from inside\n  let message = isErrorEvent(msg) ? msg.message : msg;\n  let name = 'Error';\n\n  const groups = message.match(ERROR_TYPES_RE);\n  if (groups) {\n    name = groups[1];\n    message = groups[2];\n  }\n\n  const event = {\n    exception: {\n      values: [\n        {\n          type: name,\n          value: message,\n        },\n      ],\n    },\n  };\n\n  return _enhanceEventWithInitialFrame(event, url, line, column);\n}\n\n/** JSDoc */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _enhanceEventWithInitialFrame(event: Event, url: any, line: any, column: any): Event {\n  // event.exception\n  const e = (event.exception = event.exception || {});\n  // event.exception.values\n  const ev = (e.values = e.values || []);\n  // event.exception.values[0]\n  const ev0 = (ev[0] = ev[0] || {});\n  // event.exception.values[0].stacktrace\n  const ev0s = (ev0.stacktrace = ev0.stacktrace || {});\n  // event.exception.values[0].stacktrace.frames\n  const ev0sf = (ev0s.frames = ev0s.frames || []);\n\n  const colno = isNaN(parseInt(column, 10)) ? undefined : column;\n  const lineno = isNaN(parseInt(line, 10)) ? undefined : line;\n  const filename = isString(url) && url.length > 0 ? url : getLocationHref();\n\n  // event.exception.values[0].stacktrace.frames\n  if (ev0sf.length === 0) {\n    ev0sf.push({\n      colno,\n      filename,\n      function: '?',\n      in_app: true,\n      lineno,\n    });\n  }\n\n  return event;\n}\n\nfunction globalHandlerLog(type: string): void {\n  IS_DEBUG_BUILD && logger.log(`Global Handler attached: ${type}`);\n}\n\nfunction addMechanismAndCapture(hub: Hub, error: EventHint['originalException'], event: Event, type: string): void {\n  addExceptionMechanism(event, {\n    handled: false,\n    type,\n  });\n  hub.captureEvent(event, {\n    originalException: error,\n  });\n}\n\nfunction getHubAndAttachStacktrace(): [Hub, boolean | undefined] {\n  const hub = getCurrentHub();\n  const client = hub.getClient();\n  const attachStacktrace = client && client.getOptions().attachStacktrace;\n  return [hub, attachStacktrace];\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}