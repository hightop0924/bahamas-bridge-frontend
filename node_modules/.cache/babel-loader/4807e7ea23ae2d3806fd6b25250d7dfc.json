{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nexport function retry(count) {\n  if (count === void 0) {\n    count = -1;\n  }\n  return function (source) {\n    return source.lift(new RetryOperator(count, source));\n  };\n}\nvar RetryOperator = /*@__PURE__*/function () {\n  function RetryOperator(count, source) {\n    this.count = count;\n    this.source = source;\n  }\n  RetryOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new RetrySubscriber(subscriber, this.count, this.source));\n  };\n  return RetryOperator;\n}();\nvar RetrySubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(RetrySubscriber, _super);\n  function RetrySubscriber(destination, count, source) {\n    var _this = _super.call(this, destination) || this;\n    _this.count = count;\n    _this.source = source;\n    return _this;\n  }\n  RetrySubscriber.prototype.error = function (err) {\n    if (!this.isStopped) {\n      var _a = this,\n        source = _a.source,\n        count = _a.count;\n      if (count === 0) {\n        return _super.prototype.error.call(this, err);\n      } else if (count > -1) {\n        this.count = count - 1;\n      }\n      source.subscribe(this._unsubscribeAndRecycle());\n    }\n  };\n  return RetrySubscriber;\n}(Subscriber);","map":{"version":3,"sources":["../../../src/internal/operators/retry.ts"],"names":[],"mappings":";AACA,OAAO,KAAE,OAAU,MAAE,OAAM;AAmD3B,SAAM,UAAU,QAA2B,eAAA;AAAlB,OAAA,SAAA,KAAA,CAAA,KAAA,EAAA;EACvB,IAAA,KAAO,KAAA,KAAC,CAAA,EAAA;IACT,KAAA,GAAA,CAAA,CAAA;EAED;EACE,OAAA,UAAA,MAAoB,EAAA;IAAA,OACA,MAAqB,CAAA,IAAA,CAAA,IAAA,aAAA,CAAA,KAAA,EAAA,MAAA,CAAA,CAAA;EAAA,CAAA;AADrB;IACA,aAAA,GAAA,aAAqB,YAAA;EACzC,SAAC,aAAA,CAAA,KAAA,EAAA,MAAA,EAAA;IAED,IAAA,CAAA,KAAA,GAAA,KAAA;IACE,IAAA,CAAA,MAAO,GAAO,MAAA;EAChB;EACF,aAAA,CAAA,SAAC,CAAA,IAAA,GAAA,UAAA,UAAA,EAAA,MAAA,EAAA;IAAA,OAAA,MAAA,CAAA,SAAA,CAAA,IAAA,eAAA,CAAA,UAAA,EAAA,IAAA,CAAA,KAAA,EAAA,IAAA,CAAA,MAAA,CAAA,CAAA;EAOD,CAAA;EAAiC,OAAA,aAAA;GAC/B;IAAA,eAAA,GAGE,aAAA,UAAM,MAAY,EAAA;EAFA,OAAA,CAAA,SAAK,CAAL,eAAa,EAAA,MAAA,CAAA;EACb,SAAA,eAAA,CAAM,WAAe,EAAA,KAAA,EAAA,MAAA,EAAA;;IAExC,KAAA,CAAA,KAAA,GAAA,KAAA;IACD,KAAA,CAAA,MAAA,GAAA,MAAA;IACE,OAAK,KAAK;EACF;EACN,eAAI,CAAA,SAAa,CAAA,KAAA,GAAA,UAAA,GAAA,EAAA;SACf,IAAA,CAAA,SAAO,EAAA;MACR,IAAA,EAAA,GAAA,IAAA;QAAA,MAAA,GAAA,EAAA,CAAA,MAAA;QAAA,KAAA,GAAA,EAAA,CAAA,KAAA;UAAM,KAAI,KAAK,CAAA,EAAG;QACjB,OAAK,MAAQ,CAAA,SAAU,CAAA,KAAA,CAAA,IAAA,CAAA,IAAA,EAAA,GAAA,CAAA;OACxB,MACD,IAAO,KAAA,GAAU,CAAA,CAAA,EAAI;QACtB,IAAA,CAAA,KAAA,GAAA,KAAA,GAAA,CAAA;MACF;MACH,MAAA,CAAA,SAAC,CAAA,IAAA,CAAA,sBAAA,CAAA,CAAA,CAAA;IAjBgC","sourcesContent":["/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nexport function retry(count) {\n    if (count === void 0) {\n        count = -1;\n    }\n    return function (source) { return source.lift(new RetryOperator(count, source)); };\n}\nvar RetryOperator = /*@__PURE__*/ (function () {\n    function RetryOperator(count, source) {\n        this.count = count;\n        this.source = source;\n    }\n    RetryOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new RetrySubscriber(subscriber, this.count, this.source));\n    };\n    return RetryOperator;\n}());\nvar RetrySubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(RetrySubscriber, _super);\n    function RetrySubscriber(destination, count, source) {\n        var _this = _super.call(this, destination) || this;\n        _this.count = count;\n        _this.source = source;\n        return _this;\n    }\n    RetrySubscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            var _a = this, source = _a.source, count = _a.count;\n            if (count === 0) {\n                return _super.prototype.error.call(this, err);\n            }\n            else if (count > -1) {\n                this.count = count - 1;\n            }\n            source.subscribe(this._unsubscribeAndRecycle());\n        }\n    };\n    return RetrySubscriber;\n}(Subscriber));\n//# sourceMappingURL=retry.js.map\n"]},"metadata":{},"sourceType":"module"}