{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subscriber,_util_ArgumentOutOfRangeError,_observable_empty PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { empty } from '../observable/empty';\nexport function takeLast(count) {\n  return function takeLastOperatorFunction(source) {\n    if (count === 0) {\n      return empty();\n    } else {\n      return source.lift(new TakeLastOperator(count));\n    }\n  };\n}\nvar TakeLastOperator = /*@__PURE__*/function () {\n  function TakeLastOperator(total) {\n    this.total = total;\n    if (this.total < 0) {\n      throw new ArgumentOutOfRangeError();\n    }\n  }\n  TakeLastOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new TakeLastSubscriber(subscriber, this.total));\n  };\n  return TakeLastOperator;\n}();\nvar TakeLastSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(TakeLastSubscriber, _super);\n  function TakeLastSubscriber(destination, total) {\n    var _this = _super.call(this, destination) || this;\n    _this.total = total;\n    _this.ring = new Array();\n    _this.count = 0;\n    return _this;\n  }\n  TakeLastSubscriber.prototype._next = function (value) {\n    var ring = this.ring;\n    var total = this.total;\n    var count = this.count++;\n    if (ring.length < total) {\n      ring.push(value);\n    } else {\n      var index = count % total;\n      ring[index] = value;\n    }\n  };\n  TakeLastSubscriber.prototype._complete = function () {\n    var destination = this.destination;\n    var count = this.count;\n    if (count > 0) {\n      var total = this.count >= this.total ? this.total : this.count;\n      var ring = this.ring;\n      for (var i = 0; i < total; i++) {\n        var idx = count++ % total;\n        destination.next(ring[idx]);\n      }\n    }\n    destination.complete();\n  };\n  return TakeLastSubscriber;\n}(Subscriber);","map":{"version":3,"sources":["../../../src/internal/operators/takeLast.ts"],"names":[],"mappings":";AACA,OAAO,KAAE,OAAU,MAAE,OAAM;AAC3B,SAAS,UAAA,QAAA,eAA+B;AACxC,SAAS,uBAAa,QAAA,iCAAsB;AA8C5C,SAAM,KAAA,QAAU,qBAAyB;AACvC,OAAA,SAAO,QAAS,CAAA,KAAA,EAAA;EACd,OAAA,SAAS,wBAAQ,CAAA,MAAA,EAAA;QACf,KAAA,KAAO,CAAA,EAAK;MACb,OAAA,KAAA,CAAA,CAAA;KAAM,MACL;MACD,OAAA,MAAA,CAAA,IAAA,CAAA,IAAA,gBAAA,CAAA,KAAA,CAAA,CAAA;IACD;EACH,CAAA;AAED;IACE,gBAAA,GAAA,aAAiC,YAAA;EAAb,SAAA,gBAAa,CAAA,KAAA,EAAA;IAC/B,IAAI,CAAA,KAAK,GAAA,KAAS;QAChB,IAAA,CAAA,KAAU,GAAA,CAAA,EAAA;MACX,MAAA,IAAA,uBAAA,CAAA,CAAA;IACF;EAED;EACE,gBAAO,CAAM,SAAC,CAAS,IAAC,GAAI,UAAA,UAAmB,EAAA,MAAU,EAAE;IAC5D,OAAA,MAAA,CAAA,SAAA,CAAA,IAAA,kBAAA,CAAA,UAAA,EAAA,IAAA,CAAA,KAAA,CAAA,CAAA;EACH,CAAA;EAAC,OAAA,gBAAA;AAOD,CAAA,CAAA,CAAA;IAAoC,kBAAA,GAAA,aAAA,UAAa,MAAA,EAAA;EAI/C,OAAA,CAAA,SAAA,CAAA,kBAAY,EAAA,MAAoC,CAAA;EAAhD,SAAA,kBACE,CAAA,WAAM,EAAA,KAAY,EAAA;IAD4B,IAAA,KAAA,GAAA,MAAA,CAAK,IAAQ,CAAA,IAAA,EAAA,WAAA,CAAA,IAAA,IAAA;IAHrD,KAAA,CAAA,KAAI,GAAa,KAAI;IACrB,KAAA,CAAA,IAAA,GAAK,IAAa,KAAA,CAAA,CAAA;;IAIzB,OAAA,KAAA;EAED;EACE,kBAAa,CAAI,SAAM,CAAA,KAAA,GAAA,UAAA,KAAA,EAAA;IACvB,IAAM,IAAA,GAAK,IAAG,CAAI,IAAC;IACnB,IAAM,KAAK,GAAG,IAAI,CAAC,KAAK;IAExB,IAAI,KAAK,GAAA,IAAM,CAAA,KAAG,EAAK;QACrB,IAAI,CAAC,MAAK,GAAA,KAAO,EAAA;MAClB,IAAA,CAAA,IAAA,CAAA,KAAA,CAAA;KAAM,MACL;MACA,IAAI,KAAC,GAAM,KAAG,GAAM,KAAA;MACrB,IAAA,CAAA,KAAA,CAAA,GAAA,KAAA;IACF;EAES,CAAV;EACE,kBAAM,CAAW,SAAQ,CAAA,SAAW,GAAC,YAAA;IACrC,IAAI,WAAQ,GAAK,IAAK,CAAC,WAAA;IAEvB,IAAI,KAAK,GAAG,IAAG,CAAA,KAAA;QACb,KAAM,GAAA,CAAK,EAAA;MACX,IAAM,KAAI,GAAI,IAAK,CAAA,KAAK,IAAA,IAAA,CAAA,KAAA,GAAA,IAAA,CAAA,KAAA,GAAA,IAAA,CAAA,KAAA;MAExB,IAAA,IAAK,GAAK,IAAI,CAAE,IAAI;MAClB,KAAA,IAAM,CAAA,GAAG,CAAG,EAAC,CAAA,GAAK,KAAG,EAAG,CAAA,EAAA,EAAM;QAC9B,IAAA,GAAA,GAAW,KAAK,EAAC,GAAK,KAAK;QAC5B,WAAA,CAAA,IAAA,CAAA,IAAA,CAAA,GAAA,CAAA,CAAA;MACF;IAED;IACD,WAAA,CAAA,QAAA,CAAA,CAAA;EACH,CAAA;EArCoC,OAAA,kBAqCnC","sourcesContent":["/** PURE_IMPORTS_START tslib,_Subscriber,_util_ArgumentOutOfRangeError,_observable_empty PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { empty } from '../observable/empty';\nexport function takeLast(count) {\n    return function takeLastOperatorFunction(source) {\n        if (count === 0) {\n            return empty();\n        }\n        else {\n            return source.lift(new TakeLastOperator(count));\n        }\n    };\n}\nvar TakeLastOperator = /*@__PURE__*/ (function () {\n    function TakeLastOperator(total) {\n        this.total = total;\n        if (this.total < 0) {\n            throw new ArgumentOutOfRangeError;\n        }\n    }\n    TakeLastOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new TakeLastSubscriber(subscriber, this.total));\n    };\n    return TakeLastOperator;\n}());\nvar TakeLastSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(TakeLastSubscriber, _super);\n    function TakeLastSubscriber(destination, total) {\n        var _this = _super.call(this, destination) || this;\n        _this.total = total;\n        _this.ring = new Array();\n        _this.count = 0;\n        return _this;\n    }\n    TakeLastSubscriber.prototype._next = function (value) {\n        var ring = this.ring;\n        var total = this.total;\n        var count = this.count++;\n        if (ring.length < total) {\n            ring.push(value);\n        }\n        else {\n            var index = count % total;\n            ring[index] = value;\n        }\n    };\n    TakeLastSubscriber.prototype._complete = function () {\n        var destination = this.destination;\n        var count = this.count;\n        if (count > 0) {\n            var total = this.count >= this.total ? this.total : this.count;\n            var ring = this.ring;\n            for (var i = 0; i < total; i++) {\n                var idx = (count++) % total;\n                destination.next(ring[idx]);\n            }\n        }\n        destination.complete();\n    };\n    return TakeLastSubscriber;\n}(Subscriber));\n//# sourceMappingURL=takeLast.js.map\n"]},"metadata":{},"sourceType":"module"}