{"ast":null,"code":"/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { bindReporter } from './lib/bindReporter';\nimport { getVisibilityWatcher } from './lib/getVisibilityWatcher';\nimport { initMetric } from './lib/initMetric';\nimport { observe } from './lib/observe';\nimport { onHidden } from './lib/onHidden';\nexport var getFID = function (onReport, reportAllChanges) {\n  var visibilityWatcher = getVisibilityWatcher();\n  var metric = initMetric('FID');\n  var report;\n  var entryHandler = function (entry) {\n    // Only report if the page wasn't hidden prior to the first input.\n    if (report && entry.startTime < visibilityWatcher.firstHiddenTime) {\n      metric.value = entry.processingStart - entry.startTime;\n      metric.entries.push(entry);\n      report(true);\n    }\n  };\n  var po = observe('first-input', entryHandler);\n  if (po) {\n    report = bindReporter(onReport, metric, reportAllChanges);\n    onHidden(function () {\n      po.takeRecords().map(entryHandler);\n      po.disconnect();\n    }, true);\n  }\n};","map":{"version":3,"sources":["../../../../../src/browser/web-vitals/getFID.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;AAcG;AAEH,SAAS,YAAY,QAAQ,oBAAoB;AACjD,SAAS,oBAAoB,QAAQ,4BAA4B;AACjE,SAAS,UAAU,QAAQ,kBAAkB;AAC7C,SAAS,OAAO,QAAiC,eAAe;AAChE,SAAS,QAAQ,QAAQ,gBAAgB;AAGzC,OAAO,IAAM,MAAM,GAAG,SAAA,CAAC,QAAuB,EAAE,gBAA0B,EAAA;EACxE,IAAM,iBAAiB,GAAG,oBAAoB,CAAA,CAAE;EAChD,IAAM,MAAM,GAAG,UAAU,CAAC,KAAK,CAAC;EAChC,IAAI,MAAuC;EAE3C,IAAM,YAAY,GAAG,SAAA,CAAC,KAA6B,EAAA;IACjD;IACA,IAAI,MAAM,IAAI,KAAK,CAAC,SAAS,GAAG,iBAAiB,CAAC,eAAe,EAAE;MACjE,MAAM,CAAC,KAAK,GAAG,KAAK,CAAC,eAAe,GAAG,KAAK,CAAC,SAAS;MACtD,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC;MAC1B,MAAM,CAAC,IAAI,CAAC;IACb;EACH,CAAC;EAED,IAAM,EAAE,GAAG,OAAO,CAAC,aAAa,EAAE,YAAuC,CAAC;EAC1E,IAAI,EAAE,EAAE;IACN,MAAM,GAAG,YAAY,CAAC,QAAQ,EAAE,MAAM,EAAE,gBAAgB,CAAC;IACzD,QAAQ,CAAC,YAAA;MACP,EAAE,CAAC,WAAW,CAAA,CAAE,CAAC,GAAG,CAAC,YAAuC,CAAC;MAC7D,EAAE,CAAC,UAAU,CAAA,CAAE;IACjB,CAAC,EAAE,IAAI,CAAC;EACT;AACH,CAAC","sourcesContent":["/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { bindReporter } from './lib/bindReporter';\nimport { getVisibilityWatcher } from './lib/getVisibilityWatcher';\nimport { initMetric } from './lib/initMetric';\nimport { observe, PerformanceEntryHandler } from './lib/observe';\nimport { onHidden } from './lib/onHidden';\nimport { PerformanceEventTiming, ReportHandler } from './types';\n\nexport const getFID = (onReport: ReportHandler, reportAllChanges?: boolean): void => {\n  const visibilityWatcher = getVisibilityWatcher();\n  const metric = initMetric('FID');\n  let report: ReturnType<typeof bindReporter>;\n\n  const entryHandler = (entry: PerformanceEventTiming): void => {\n    // Only report if the page wasn't hidden prior to the first input.\n    if (report && entry.startTime < visibilityWatcher.firstHiddenTime) {\n      metric.value = entry.processingStart - entry.startTime;\n      metric.entries.push(entry);\n      report(true);\n    }\n  };\n\n  const po = observe('first-input', entryHandler as PerformanceEntryHandler);\n  if (po) {\n    report = bindReporter(onReport, metric, reportAllChanges);\n    onHidden(() => {\n      po.takeRecords().map(entryHandler as PerformanceEntryHandler);\n      po.disconnect();\n    }, true);\n  }\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}