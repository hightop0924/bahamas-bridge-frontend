{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Eth = void 0;\nconst constants_1 = require(\"../eth/constants\");\nconst methods_1 = require(\"../communication/methods\");\nconst inputFormatters = {\n  defaultBlockParam: (arg = 'latest') => arg,\n  returnFullTxObjectParam: (arg = false) => arg,\n  blockNumberToHex: arg => Number.isInteger(arg) ? `0x${arg.toString(16)}` : arg\n};\nclass Eth {\n  constructor(communicator) {\n    this.communicator = communicator;\n    this.call = this.buildRequest({\n      call: constants_1.RPC_CALLS.eth_call,\n      formatters: [null, inputFormatters.defaultBlockParam]\n    });\n    this.getBalance = this.buildRequest({\n      call: constants_1.RPC_CALLS.eth_getBalance,\n      formatters: [null, inputFormatters.defaultBlockParam]\n    });\n    this.getCode = this.buildRequest({\n      call: constants_1.RPC_CALLS.eth_getCode,\n      formatters: [null, inputFormatters.defaultBlockParam]\n    });\n    this.getStorageAt = this.buildRequest({\n      call: constants_1.RPC_CALLS.eth_getStorageAt,\n      formatters: [null, inputFormatters.blockNumberToHex, inputFormatters.defaultBlockParam]\n    });\n    this.getPastLogs = this.buildRequest({\n      call: constants_1.RPC_CALLS.eth_getLogs\n    });\n    this.getBlockByHash = this.buildRequest({\n      call: constants_1.RPC_CALLS.eth_getBlockByHash,\n      formatters: [null, inputFormatters.returnFullTxObjectParam]\n    });\n    this.getBlockByNumber = this.buildRequest({\n      call: constants_1.RPC_CALLS.eth_getBlockByNumber,\n      formatters: [inputFormatters.blockNumberToHex, inputFormatters.returnFullTxObjectParam]\n    });\n    this.getTransactionByHash = this.buildRequest({\n      call: constants_1.RPC_CALLS.eth_getTransactionByHash\n    });\n    this.getTransactionReceipt = this.buildRequest({\n      call: constants_1.RPC_CALLS.eth_getTransactionReceipt\n    });\n    this.getTransactionCount = this.buildRequest({\n      call: constants_1.RPC_CALLS.eth_getTransactionCount,\n      formatters: [null, inputFormatters.defaultBlockParam]\n    });\n    this.getGasPrice = this.buildRequest({\n      call: constants_1.RPC_CALLS.eth_gasPrice\n    });\n    this.getEstimateGas = transaction => this.buildRequest({\n      call: constants_1.RPC_CALLS.eth_estimateGas\n    })([transaction]);\n  }\n  buildRequest(args) {\n    const {\n      call,\n      formatters\n    } = args;\n    return async params => {\n      if (formatters && Array.isArray(params)) {\n        formatters.forEach((formatter, i) => {\n          if (formatter) {\n            params[i] = formatter(params[i]);\n          }\n        });\n      }\n      const payload = {\n        call,\n        params: params || []\n      };\n      const response = await this.communicator.send(methods_1.Methods.rpcCall, payload);\n      return response.data;\n    };\n  }\n}\nexports.Eth = Eth;","map":{"version":3,"sources":["../../../src/eth/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Eth = void 0;\nconst constants_1 = require(\"../eth/constants\");\nconst methods_1 = require(\"../communication/methods\");\nconst inputFormatters = {\n    defaultBlockParam: (arg = 'latest') => arg,\n    returnFullTxObjectParam: (arg = false) => arg,\n    blockNumberToHex: (arg) => Number.isInteger(arg) ? `0x${arg.toString(16)}` : arg,\n};\nclass Eth {\n    constructor(communicator) {\n        this.communicator = communicator;\n        this.call = this.buildRequest({\n            call: constants_1.RPC_CALLS.eth_call,\n            formatters: [null, inputFormatters.defaultBlockParam],\n        });\n        this.getBalance = this.buildRequest({\n            call: constants_1.RPC_CALLS.eth_getBalance,\n            formatters: [null, inputFormatters.defaultBlockParam],\n        });\n        this.getCode = this.buildRequest({\n            call: constants_1.RPC_CALLS.eth_getCode,\n            formatters: [null, inputFormatters.defaultBlockParam],\n        });\n        this.getStorageAt = this.buildRequest({\n            call: constants_1.RPC_CALLS.eth_getStorageAt,\n            formatters: [null, inputFormatters.blockNumberToHex, inputFormatters.defaultBlockParam],\n        });\n        this.getPastLogs = this.buildRequest({\n            call: constants_1.RPC_CALLS.eth_getLogs,\n        });\n        this.getBlockByHash = this.buildRequest({\n            call: constants_1.RPC_CALLS.eth_getBlockByHash,\n            formatters: [null, inputFormatters.returnFullTxObjectParam],\n        });\n        this.getBlockByNumber = this.buildRequest({\n            call: constants_1.RPC_CALLS.eth_getBlockByNumber,\n            formatters: [inputFormatters.blockNumberToHex, inputFormatters.returnFullTxObjectParam],\n        });\n        this.getTransactionByHash = this.buildRequest({\n            call: constants_1.RPC_CALLS.eth_getTransactionByHash,\n        });\n        this.getTransactionReceipt = this.buildRequest({\n            call: constants_1.RPC_CALLS.eth_getTransactionReceipt,\n        });\n        this.getTransactionCount = this.buildRequest({\n            call: constants_1.RPC_CALLS.eth_getTransactionCount,\n            formatters: [null, inputFormatters.defaultBlockParam],\n        });\n        this.getGasPrice = this.buildRequest({\n            call: constants_1.RPC_CALLS.eth_gasPrice,\n        });\n        this.getEstimateGas = (transaction) => this.buildRequest({\n            call: constants_1.RPC_CALLS.eth_estimateGas,\n        })([transaction]);\n    }\n    buildRequest(args) {\n        const { call, formatters } = args;\n        return async (params) => {\n            if (formatters && Array.isArray(params)) {\n                formatters.forEach((formatter, i) => {\n                    if (formatter) {\n                        params[i] = formatter(params[i]);\n                    }\n                });\n            }\n            const payload = {\n                call,\n                params: params || [],\n            };\n            const response = await this.communicator.send(methods_1.Methods.rpcCall, payload);\n            return response.data;\n        };\n    }\n}\nexports.Eth = Eth;\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}