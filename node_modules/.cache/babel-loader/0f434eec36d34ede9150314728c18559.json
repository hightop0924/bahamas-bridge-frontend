{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { dropUndefinedKeys, timestampWithMs, uuid4 } from '@sentry/utils';\n/**\n * Keeps track of finished spans for a given transaction\n * @internal\n * @hideconstructor\n * @hidden\n */\nvar SpanRecorder = /** @class */function () {\n  function SpanRecorder(maxlen) {\n    if (maxlen === void 0) {\n      maxlen = 1000;\n    }\n    this.spans = [];\n    this._maxlen = maxlen;\n  }\n  /**\n   * This is just so that we don't run out of memory while recording a lot\n   * of spans. At some point we just stop and flush out the start of the\n   * trace tree (i.e.the first n spans with the smallest\n   * start_timestamp).\n   */\n  SpanRecorder.prototype.add = function (span) {\n    if (this.spans.length > this._maxlen) {\n      span.spanRecorder = undefined;\n    } else {\n      this.spans.push(span);\n    }\n  };\n  return SpanRecorder;\n}();\nexport { SpanRecorder };\n/**\n * Span contains all data about a span\n */\nvar Span = /** @class */function () {\n  /**\n   * You should never call the constructor manually, always use `Sentry.startTransaction()`\n   * or call `startChild()` on an existing span.\n   * @internal\n   * @hideconstructor\n   * @hidden\n   */\n  function Span(spanContext) {\n    /**\n     * @inheritDoc\n     */\n    this.traceId = uuid4();\n    /**\n     * @inheritDoc\n     */\n    this.spanId = uuid4().substring(16);\n    /**\n     * Timestamp in seconds when the span was created.\n     */\n    this.startTimestamp = timestampWithMs();\n    /**\n     * @inheritDoc\n     */\n    this.tags = {};\n    /**\n     * @inheritDoc\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    this.data = {};\n    if (!spanContext) {\n      return this;\n    }\n    if (spanContext.traceId) {\n      this.traceId = spanContext.traceId;\n    }\n    if (spanContext.spanId) {\n      this.spanId = spanContext.spanId;\n    }\n    if (spanContext.parentSpanId) {\n      this.parentSpanId = spanContext.parentSpanId;\n    }\n    // We want to include booleans as well here\n    if ('sampled' in spanContext) {\n      this.sampled = spanContext.sampled;\n    }\n    if (spanContext.op) {\n      this.op = spanContext.op;\n    }\n    if (spanContext.description) {\n      this.description = spanContext.description;\n    }\n    if (spanContext.data) {\n      this.data = spanContext.data;\n    }\n    if (spanContext.tags) {\n      this.tags = spanContext.tags;\n    }\n    if (spanContext.status) {\n      this.status = spanContext.status;\n    }\n    if (spanContext.startTimestamp) {\n      this.startTimestamp = spanContext.startTimestamp;\n    }\n    if (spanContext.endTimestamp) {\n      this.endTimestamp = spanContext.endTimestamp;\n    }\n  }\n  /**\n   * @inheritDoc\n   * @deprecated\n   */\n  Span.prototype.child = function (spanContext) {\n    return this.startChild(spanContext);\n  };\n  /**\n   * @inheritDoc\n   */\n  Span.prototype.startChild = function (spanContext) {\n    var childSpan = new Span(__assign(__assign({}, spanContext), {\n      parentSpanId: this.spanId,\n      sampled: this.sampled,\n      traceId: this.traceId\n    }));\n    childSpan.spanRecorder = this.spanRecorder;\n    if (childSpan.spanRecorder) {\n      childSpan.spanRecorder.add(childSpan);\n    }\n    childSpan.transaction = this.transaction;\n    return childSpan;\n  };\n  /**\n   * @inheritDoc\n   */\n  Span.prototype.setTag = function (key, value) {\n    var _a;\n    this.tags = __assign(__assign({}, this.tags), (_a = {}, _a[key] = value, _a));\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n  Span.prototype.setData = function (key, value) {\n    var _a;\n    this.data = __assign(__assign({}, this.data), (_a = {}, _a[key] = value, _a));\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n  Span.prototype.setStatus = function (value) {\n    this.status = value;\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n  Span.prototype.setHttpStatus = function (httpStatus) {\n    this.setTag('http.status_code', String(httpStatus));\n    var spanStatus = spanStatusfromHttpCode(httpStatus);\n    if (spanStatus !== 'unknown_error') {\n      this.setStatus(spanStatus);\n    }\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n  Span.prototype.isSuccess = function () {\n    return this.status === 'ok';\n  };\n  /**\n   * @inheritDoc\n   */\n  Span.prototype.finish = function (endTimestamp) {\n    this.endTimestamp = typeof endTimestamp === 'number' ? endTimestamp : timestampWithMs();\n  };\n  /**\n   * @inheritDoc\n   */\n  Span.prototype.toTraceparent = function () {\n    var sampledString = '';\n    if (this.sampled !== undefined) {\n      sampledString = this.sampled ? '-1' : '-0';\n    }\n    return this.traceId + \"-\" + this.spanId + sampledString;\n  };\n  /**\n   * @inheritDoc\n   */\n  Span.prototype.toContext = function () {\n    return dropUndefinedKeys({\n      data: this.data,\n      description: this.description,\n      endTimestamp: this.endTimestamp,\n      op: this.op,\n      parentSpanId: this.parentSpanId,\n      sampled: this.sampled,\n      spanId: this.spanId,\n      startTimestamp: this.startTimestamp,\n      status: this.status,\n      tags: this.tags,\n      traceId: this.traceId\n    });\n  };\n  /**\n   * @inheritDoc\n   */\n  Span.prototype.updateWithContext = function (spanContext) {\n    var _a, _b, _c, _d, _e;\n    this.data = (_a = spanContext.data, _a !== null && _a !== void 0 ? _a : {});\n    this.description = spanContext.description;\n    this.endTimestamp = spanContext.endTimestamp;\n    this.op = spanContext.op;\n    this.parentSpanId = spanContext.parentSpanId;\n    this.sampled = spanContext.sampled;\n    this.spanId = (_b = spanContext.spanId, _b !== null && _b !== void 0 ? _b : this.spanId);\n    this.startTimestamp = (_c = spanContext.startTimestamp, _c !== null && _c !== void 0 ? _c : this.startTimestamp);\n    this.status = spanContext.status;\n    this.tags = (_d = spanContext.tags, _d !== null && _d !== void 0 ? _d : {});\n    this.traceId = (_e = spanContext.traceId, _e !== null && _e !== void 0 ? _e : this.traceId);\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n  Span.prototype.getTraceContext = function () {\n    return dropUndefinedKeys({\n      data: Object.keys(this.data).length > 0 ? this.data : undefined,\n      description: this.description,\n      op: this.op,\n      parent_span_id: this.parentSpanId,\n      span_id: this.spanId,\n      status: this.status,\n      tags: Object.keys(this.tags).length > 0 ? this.tags : undefined,\n      trace_id: this.traceId\n    });\n  };\n  /**\n   * @inheritDoc\n   */\n  Span.prototype.toJSON = function () {\n    return dropUndefinedKeys({\n      data: Object.keys(this.data).length > 0 ? this.data : undefined,\n      description: this.description,\n      op: this.op,\n      parent_span_id: this.parentSpanId,\n      span_id: this.spanId,\n      start_timestamp: this.startTimestamp,\n      status: this.status,\n      tags: Object.keys(this.tags).length > 0 ? this.tags : undefined,\n      timestamp: this.endTimestamp,\n      trace_id: this.traceId\n    });\n  };\n  return Span;\n}();\nexport { Span };\n/**\n * Converts a HTTP status code into a {@link SpanStatusType}.\n *\n * @param httpStatus The HTTP response status code.\n * @returns The span status or unknown_error.\n */\nexport function spanStatusfromHttpCode(httpStatus) {\n  if (httpStatus < 400 && httpStatus >= 100) {\n    return 'ok';\n  }\n  if (httpStatus >= 400 && httpStatus < 500) {\n    switch (httpStatus) {\n      case 401:\n        return 'unauthenticated';\n      case 403:\n        return 'permission_denied';\n      case 404:\n        return 'not_found';\n      case 409:\n        return 'already_exists';\n      case 413:\n        return 'failed_precondition';\n      case 429:\n        return 'resource_exhausted';\n      default:\n        return 'invalid_argument';\n    }\n  }\n  if (httpStatus >= 500 && httpStatus < 600) {\n    switch (httpStatus) {\n      case 501:\n        return 'unimplemented';\n      case 503:\n        return 'unavailable';\n      case 504:\n        return 'deadline_exceeded';\n      default:\n        return 'internal_error';\n    }\n  }\n  return 'unknown_error';\n}","map":{"version":3,"sources":["../../../src/span.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable max-lines */\nimport { Primitive, Span as SpanInterface, SpanContext, Transaction } from '@sentry/types';\nimport { dropUndefinedKeys, timestampWithMs, uuid4 } from '@sentry/utils';\n\n/**\n * Keeps track of finished spans for a given transaction\n * @internal\n * @hideconstructor\n * @hidden\n */\nexport class SpanRecorder {\n  public spans: Span[] = [];\n\n  private readonly _maxlen: number;\n\n  public constructor(maxlen: number = 1000) {\n    this._maxlen = maxlen;\n  }\n\n  /**\n   * This is just so that we don't run out of memory while recording a lot\n   * of spans. At some point we just stop and flush out the start of the\n   * trace tree (i.e.the first n spans with the smallest\n   * start_timestamp).\n   */\n  public add(span: Span): void {\n    if (this.spans.length > this._maxlen) {\n      span.spanRecorder = undefined;\n    } else {\n      this.spans.push(span);\n    }\n  }\n}\n\n/**\n * Span contains all data about a span\n */\nexport class Span implements SpanInterface {\n  /**\n   * @inheritDoc\n   */\n  public traceId: string = uuid4();\n\n  /**\n   * @inheritDoc\n   */\n  public spanId: string = uuid4().substring(16);\n\n  /**\n   * @inheritDoc\n   */\n  public parentSpanId?: string;\n\n  /**\n   * Internal keeper of the status\n   */\n  public status?: SpanStatusType | string;\n\n  /**\n   * @inheritDoc\n   */\n  public sampled?: boolean;\n\n  /**\n   * Timestamp in seconds when the span was created.\n   */\n  public startTimestamp: number = timestampWithMs();\n\n  /**\n   * Timestamp in seconds when the span ended.\n   */\n  public endTimestamp?: number;\n\n  /**\n   * @inheritDoc\n   */\n  public op?: string;\n\n  /**\n   * @inheritDoc\n   */\n  public description?: string;\n\n  /**\n   * @inheritDoc\n   */\n  public tags: { [key: string]: Primitive } = {};\n\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  public data: { [key: string]: any } = {};\n\n  /**\n   * List of spans that were finalized\n   */\n  public spanRecorder?: SpanRecorder;\n\n  /**\n   * @inheritDoc\n   */\n  public transaction?: Transaction;\n\n  /**\n   * You should never call the constructor manually, always use `Sentry.startTransaction()`\n   * or call `startChild()` on an existing span.\n   * @internal\n   * @hideconstructor\n   * @hidden\n   */\n  public constructor(spanContext?: SpanContext) {\n    if (!spanContext) {\n      return this;\n    }\n    if (spanContext.traceId) {\n      this.traceId = spanContext.traceId;\n    }\n    if (spanContext.spanId) {\n      this.spanId = spanContext.spanId;\n    }\n    if (spanContext.parentSpanId) {\n      this.parentSpanId = spanContext.parentSpanId;\n    }\n    // We want to include booleans as well here\n    if ('sampled' in spanContext) {\n      this.sampled = spanContext.sampled;\n    }\n    if (spanContext.op) {\n      this.op = spanContext.op;\n    }\n    if (spanContext.description) {\n      this.description = spanContext.description;\n    }\n    if (spanContext.data) {\n      this.data = spanContext.data;\n    }\n    if (spanContext.tags) {\n      this.tags = spanContext.tags;\n    }\n    if (spanContext.status) {\n      this.status = spanContext.status;\n    }\n    if (spanContext.startTimestamp) {\n      this.startTimestamp = spanContext.startTimestamp;\n    }\n    if (spanContext.endTimestamp) {\n      this.endTimestamp = spanContext.endTimestamp;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   * @deprecated\n   */\n  public child(\n    spanContext?: Pick<SpanContext, Exclude<keyof SpanContext, 'spanId' | 'sampled' | 'traceId' | 'parentSpanId'>>,\n  ): Span {\n    return this.startChild(spanContext);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public startChild(\n    spanContext?: Pick<SpanContext, Exclude<keyof SpanContext, 'spanId' | 'sampled' | 'traceId' | 'parentSpanId'>>,\n  ): Span {\n    const childSpan = new Span({\n      ...spanContext,\n      parentSpanId: this.spanId,\n      sampled: this.sampled,\n      traceId: this.traceId,\n    });\n\n    childSpan.spanRecorder = this.spanRecorder;\n    if (childSpan.spanRecorder) {\n      childSpan.spanRecorder.add(childSpan);\n    }\n\n    childSpan.transaction = this.transaction;\n\n    return childSpan;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTag(key: string, value: Primitive): this {\n    this.tags = { ...this.tags, [key]: value };\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n  public setData(key: string, value: any): this {\n    this.data = { ...this.data, [key]: value };\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setStatus(value: SpanStatusType): this {\n    this.status = value;\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setHttpStatus(httpStatus: number): this {\n    this.setTag('http.status_code', String(httpStatus));\n    const spanStatus = spanStatusfromHttpCode(httpStatus);\n    if (spanStatus !== 'unknown_error') {\n      this.setStatus(spanStatus);\n    }\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public isSuccess(): boolean {\n    return this.status === 'ok';\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public finish(endTimestamp?: number): void {\n    this.endTimestamp = typeof endTimestamp === 'number' ? endTimestamp : timestampWithMs();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public toTraceparent(): string {\n    let sampledString = '';\n    if (this.sampled !== undefined) {\n      sampledString = this.sampled ? '-1' : '-0';\n    }\n    return `${this.traceId}-${this.spanId}${sampledString}`;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public toContext(): SpanContext {\n    return dropUndefinedKeys({\n      data: this.data,\n      description: this.description,\n      endTimestamp: this.endTimestamp,\n      op: this.op,\n      parentSpanId: this.parentSpanId,\n      sampled: this.sampled,\n      spanId: this.spanId,\n      startTimestamp: this.startTimestamp,\n      status: this.status,\n      tags: this.tags,\n      traceId: this.traceId,\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public updateWithContext(spanContext: SpanContext): this {\n    this.data = spanContext.data ?? {};\n    this.description = spanContext.description;\n    this.endTimestamp = spanContext.endTimestamp;\n    this.op = spanContext.op;\n    this.parentSpanId = spanContext.parentSpanId;\n    this.sampled = spanContext.sampled;\n    this.spanId = spanContext.spanId ?? this.spanId;\n    this.startTimestamp = spanContext.startTimestamp ?? this.startTimestamp;\n    this.status = spanContext.status;\n    this.tags = spanContext.tags ?? {};\n    this.traceId = spanContext.traceId ?? this.traceId;\n\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getTraceContext(): {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    data?: { [key: string]: any };\n    description?: string;\n    op?: string;\n    parent_span_id?: string;\n    span_id: string;\n    status?: string;\n    tags?: { [key: string]: Primitive };\n    trace_id: string;\n  } {\n    return dropUndefinedKeys({\n      data: Object.keys(this.data).length > 0 ? this.data : undefined,\n      description: this.description,\n      op: this.op,\n      parent_span_id: this.parentSpanId,\n      span_id: this.spanId,\n      status: this.status,\n      tags: Object.keys(this.tags).length > 0 ? this.tags : undefined,\n      trace_id: this.traceId,\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public toJSON(): {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    data?: { [key: string]: any };\n    description?: string;\n    op?: string;\n    parent_span_id?: string;\n    span_id: string;\n    start_timestamp: number;\n    status?: string;\n    tags?: { [key: string]: Primitive };\n    timestamp?: number;\n    trace_id: string;\n  } {\n    return dropUndefinedKeys({\n      data: Object.keys(this.data).length > 0 ? this.data : undefined,\n      description: this.description,\n      op: this.op,\n      parent_span_id: this.parentSpanId,\n      span_id: this.spanId,\n      start_timestamp: this.startTimestamp,\n      status: this.status,\n      tags: Object.keys(this.tags).length > 0 ? this.tags : undefined,\n      timestamp: this.endTimestamp,\n      trace_id: this.traceId,\n    });\n  }\n}\n\nexport type SpanStatusType =\n  /** The operation completed successfully. */\n  | 'ok'\n  /** Deadline expired before operation could complete. */\n  | 'deadline_exceeded'\n  /** 401 Unauthorized (actually does mean unauthenticated according to RFC 7235) */\n  | 'unauthenticated'\n  /** 403 Forbidden */\n  | 'permission_denied'\n  /** 404 Not Found. Some requested entity (file or directory) was not found. */\n  | 'not_found'\n  /** 429 Too Many Requests */\n  | 'resource_exhausted'\n  /** Client specified an invalid argument. 4xx. */\n  | 'invalid_argument'\n  /** 501 Not Implemented */\n  | 'unimplemented'\n  /** 503 Service Unavailable */\n  | 'unavailable'\n  /** Other/generic 5xx. */\n  | 'internal_error'\n  /** Unknown. Any non-standard HTTP status code. */\n  | 'unknown_error'\n  /** The operation was cancelled (typically by the user). */\n  | 'cancelled'\n  /** Already exists (409) */\n  | 'already_exists'\n  /** Operation was rejected because the system is not in a state required for the operation's */\n  | 'failed_precondition'\n  /** The operation was aborted, typically due to a concurrency issue. */\n  | 'aborted'\n  /** Operation was attempted past the valid range. */\n  | 'out_of_range'\n  /** Unrecoverable data loss or corruption */\n  | 'data_loss';\n\n/**\n * Converts a HTTP status code into a {@link SpanStatusType}.\n *\n * @param httpStatus The HTTP response status code.\n * @returns The span status or unknown_error.\n */\nexport function spanStatusfromHttpCode(httpStatus: number): SpanStatusType {\n  if (httpStatus < 400 && httpStatus >= 100) {\n    return 'ok';\n  }\n\n  if (httpStatus >= 400 && httpStatus < 500) {\n    switch (httpStatus) {\n      case 401:\n        return 'unauthenticated';\n      case 403:\n        return 'permission_denied';\n      case 404:\n        return 'not_found';\n      case 409:\n        return 'already_exists';\n      case 413:\n        return 'failed_precondition';\n      case 429:\n        return 'resource_exhausted';\n      default:\n        return 'invalid_argument';\n    }\n  }\n\n  if (httpStatus >= 500 && httpStatus < 600) {\n    switch (httpStatus) {\n      case 501:\n        return 'unimplemented';\n      case 503:\n        return 'unavailable';\n      case 504:\n        return 'deadline_exceeded';\n      default:\n        return 'internal_error';\n    }\n  }\n\n  return 'unknown_error';\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}