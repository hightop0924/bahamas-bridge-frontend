{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { SentryError, supportsReferrerPolicy, SyncPromise } from '@sentry/utils';\nimport { BaseTransport } from './base';\nimport { getNativeFetchImplementation } from './utils';\n/** `fetch` based transport */\nvar FetchTransport = /** @class */function (_super) {\n  __extends(FetchTransport, _super);\n  function FetchTransport(options, fetchImpl) {\n    if (fetchImpl === void 0) {\n      fetchImpl = getNativeFetchImplementation();\n    }\n    var _this = _super.call(this, options) || this;\n    _this._fetch = fetchImpl;\n    return _this;\n  }\n  /**\n   * @param sentryRequest Prepared SentryRequest to be delivered\n   * @param originalPayload Original payload used to create SentryRequest\n   */\n  FetchTransport.prototype._sendRequest = function (sentryRequest, originalPayload) {\n    var _this = this;\n    // eslint-disable-next-line deprecation/deprecation\n    if (this._isRateLimited(sentryRequest.type)) {\n      this.recordLostEvent('ratelimit_backoff', sentryRequest.type);\n      return Promise.reject({\n        event: originalPayload,\n        type: sentryRequest.type,\n        // eslint-disable-next-line deprecation/deprecation\n        reason: \"Transport for \" + sentryRequest.type + \" requests locked till \" + this._disabledUntil(sentryRequest.type) + \" due to too many requests.\",\n        status: 429\n      });\n    }\n    var options = {\n      body: sentryRequest.body,\n      method: 'POST',\n      // Despite all stars in the sky saying that Edge supports old draft syntax, aka 'never', 'always', 'origin' and 'default'\n      // (see https://caniuse.com/#feat=referrer-policy),\n      // it doesn't. And it throws an exception instead of ignoring this parameter...\n      // REF: https://github.com/getsentry/raven-js/issues/1233\n      referrerPolicy: supportsReferrerPolicy() ? 'origin' : ''\n    };\n    if (this.options.fetchParameters !== undefined) {\n      Object.assign(options, this.options.fetchParameters);\n    }\n    if (this.options.headers !== undefined) {\n      options.headers = this.options.headers;\n    }\n    return this._buffer.add(function () {\n      return new SyncPromise(function (resolve, reject) {\n        void _this._fetch(sentryRequest.url, options).then(function (response) {\n          var headers = {\n            'x-sentry-rate-limits': response.headers.get('X-Sentry-Rate-Limits'),\n            'retry-after': response.headers.get('Retry-After')\n          };\n          _this._handleResponse({\n            requestType: sentryRequest.type,\n            response: response,\n            headers: headers,\n            resolve: resolve,\n            reject: reject\n          });\n        }).catch(reject);\n      });\n    }).then(undefined, function (reason) {\n      // It's either buffer rejection or any other xhr/fetch error, which are treated as NetworkError.\n      if (reason instanceof SentryError) {\n        _this.recordLostEvent('queue_overflow', sentryRequest.type);\n      } else {\n        _this.recordLostEvent('network_error', sentryRequest.type);\n      }\n      throw reason;\n    });\n  };\n  return FetchTransport;\n}(BaseTransport);\nexport { FetchTransport };","map":{"version":3,"sources":["../../../../src/transports/fetch.ts"],"names":[],"mappings":"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","sourcesContent":["import { Event, Response, SentryRequest, Session, TransportOptions } from '@sentry/types';\nimport { SentryError, supportsReferrerPolicy, SyncPromise } from '@sentry/utils';\n\nimport { BaseTransport } from './base';\nimport { FetchImpl, getNativeFetchImplementation } from './utils';\n\n/** `fetch` based transport */\nexport class FetchTransport extends BaseTransport {\n  /**\n   * Fetch API reference which always points to native browser implementation.\n   */\n  private _fetch: typeof fetch;\n\n  public constructor(options: TransportOptions, fetchImpl: FetchImpl = getNativeFetchImplementation()) {\n    super(options);\n    this._fetch = fetchImpl;\n  }\n\n  /**\n   * @param sentryRequest Prepared SentryRequest to be delivered\n   * @param originalPayload Original payload used to create SentryRequest\n   */\n  protected _sendRequest(sentryRequest: SentryRequest, originalPayload: Event | Session): PromiseLike<Response> {\n    // eslint-disable-next-line deprecation/deprecation\n    if (this._isRateLimited(sentryRequest.type)) {\n      this.recordLostEvent('ratelimit_backoff', sentryRequest.type);\n\n      return Promise.reject({\n        event: originalPayload,\n        type: sentryRequest.type,\n        // eslint-disable-next-line deprecation/deprecation\n        reason: `Transport for ${sentryRequest.type} requests locked till ${this._disabledUntil(\n          sentryRequest.type,\n        )} due to too many requests.`,\n        status: 429,\n      });\n    }\n\n    const options: RequestInit = {\n      body: sentryRequest.body,\n      method: 'POST',\n      // Despite all stars in the sky saying that Edge supports old draft syntax, aka 'never', 'always', 'origin' and 'default'\n      // (see https://caniuse.com/#feat=referrer-policy),\n      // it doesn't. And it throws an exception instead of ignoring this parameter...\n      // REF: https://github.com/getsentry/raven-js/issues/1233\n      referrerPolicy: (supportsReferrerPolicy() ? 'origin' : '') as ReferrerPolicy,\n    };\n    if (this.options.fetchParameters !== undefined) {\n      Object.assign(options, this.options.fetchParameters);\n    }\n    if (this.options.headers !== undefined) {\n      options.headers = this.options.headers;\n    }\n\n    return this._buffer\n      .add(\n        () =>\n          new SyncPromise<Response>((resolve, reject) => {\n            void this._fetch(sentryRequest.url, options)\n              .then(response => {\n                const headers = {\n                  'x-sentry-rate-limits': response.headers.get('X-Sentry-Rate-Limits'),\n                  'retry-after': response.headers.get('Retry-After'),\n                };\n                this._handleResponse({\n                  requestType: sentryRequest.type,\n                  response,\n                  headers,\n                  resolve,\n                  reject,\n                });\n              })\n              .catch(reject);\n          }),\n      )\n      .then(undefined, reason => {\n        // It's either buffer rejection or any other xhr/fetch error, which are treated as NetworkError.\n        if (reason instanceof SentryError) {\n          this.recordLostEvent('queue_overflow', sentryRequest.type);\n        } else {\n          this.recordLostEvent('network_error', sentryRequest.type);\n        }\n        throw reason;\n      });\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}