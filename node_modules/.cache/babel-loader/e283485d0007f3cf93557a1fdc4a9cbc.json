{"ast":null,"code":"var _jsxFileName = \"/home/hightop/bahamas_bridge/omnibridge-ui/packages/dapp/src/contexts/BridgeContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { useToast } from '@chakra-ui/react';\nimport { useSettings } from 'contexts/SettingsContext';\nimport { useWeb3Context } from 'contexts/Web3Context';\nimport { BigNumber } from 'ethers';\nimport { useBridgeDirection } from 'hooks/useBridgeDirection';\nimport { useMediatorInfo } from 'hooks/useMediatorInfo';\nimport { fetchToAmount, fetchToToken, relayTokens } from 'lib/bridge';\nimport { ADDRESS_ZERO } from 'lib/constants';\nimport { getDefaultToken, getHelperContract, getMediatorAddress, getNativeCurrency, getNetworkLabel, logError, parseValue } from 'lib/helpers';\nimport { fetchTokenDetails } from 'lib/token';\nimport React, { useCallback, useContext, useEffect, useMemo, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const BridgeContext = /*#__PURE__*/React.createContext({});\nexport const useBridgeContext = () => {\n  _s();\n  return useContext(BridgeContext);\n};\n_s(useBridgeContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const BridgeProvider = ({\n  children\n}) => {\n  _s2();\n  const {\n    queryToken,\n    setQueryToken\n  } = useSettings();\n  const {\n    isGnosisSafe,\n    ethersProvider,\n    account,\n    providerChainId,\n    loading: isConnecting\n  } = useWeb3Context();\n  const {\n    bridgeDirection,\n    getBridgeChainId,\n    homeChainId,\n    foreignChainId\n  } = useBridgeDirection();\n  const [receiver, setReceiver] = useState('');\n  const [amountInput, setAmountInput] = useState('');\n  const [{\n    fromToken,\n    toToken\n  }, setTokens] = useState({\n    fromToken: null,\n    toToken: null\n  });\n  const [{\n    fromAmount,\n    toAmount\n  }, setAmounts] = useState({\n    fromAmount: BigNumber.from(0),\n    toAmount: BigNumber.from(0)\n  });\n  const [toAmountLoading, setToAmountLoading] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [shouldReceiveNativeCur, setShouldReceiveNativeCur] = useState(false);\n  const [fromBalance, setFromBalance] = useState(BigNumber.from(0));\n  const [toBalance, setToBalance] = useState(BigNumber.from(0));\n  const [txHash, setTxHash] = useState();\n  const toast = useToast();\n  const {\n    feeManagerAddress,\n    isRewardAddress,\n    homeToForeignFeeType,\n    foreignToHomeFeeType,\n    currentDay\n  } = useMediatorInfo();\n  const isHome = providerChainId === homeChainId;\n  const feeType = isHome ? homeToForeignFeeType : foreignToHomeFeeType;\n  const getToAmount = useCallback(async amount => isRewardAddress ? amount : fetchToAmount(bridgeDirection, feeType, fromToken, toToken, amount, feeManagerAddress), [bridgeDirection, fromToken, toToken, isRewardAddress, feeManagerAddress, feeType]);\n  const cleanAmounts = useCallback(() => {\n    setAmountInput('');\n    setAmounts({\n      fromAmount: BigNumber.from(0),\n      toAmount: BigNumber.from(0)\n    });\n  }, []);\n  const setAmount = useCallback(async inputAmount => {\n    if (!fromToken || !toToken) return;\n    setToAmountLoading(true);\n    const amount = parseValue(inputAmount, fromToken.decimals);\n    const gotToAmount = await getToAmount(amount);\n    setAmounts({\n      fromAmount: amount,\n      toAmount: gotToAmount\n    });\n    setToAmountLoading(false);\n  }, [fromToken, toToken, getToAmount]);\n  const setToToken = useCallback(newToToken => {\n    setTokens(prevTokens => ({\n      fromToken: prevTokens.fromToken,\n      toToken: {\n        ...newToToken\n      }\n    }));\n  }, [setTokens]);\n  useEffect(() => {\n    if (fromToken && toToken && fromToken.chainId && toToken.chainId && [homeChainId, foreignChainId].includes(fromToken.chainId) && [homeChainId, foreignChainId].includes(toToken.chainId) && (fromToken.address !== ADDRESS_ZERO || fromToken.mode === 'NATIVE')) {\n      const label = getNetworkLabel(fromToken.chainId).toUpperCase();\n      const storageKey = `${bridgeDirection.toUpperCase()}-${label}-FROM-TOKEN`;\n      localStorage.setItem(storageKey, JSON.stringify(fromToken));\n    }\n  }, [fromToken, toToken, bridgeDirection, homeChainId, foreignChainId]);\n  const setToken = useCallback(async (tokenWithoutMode, isQueryToken = false) => {\n    if (!tokenWithoutMode) return false;\n    try {\n      const [token, gotToToken] = await Promise.all([(tokenWithoutMode === null || tokenWithoutMode === void 0 ? void 0 : tokenWithoutMode.address) === ADDRESS_ZERO ? {\n        ...getNativeCurrency(tokenWithoutMode.chainId),\n        mediator: getMediatorAddress(bridgeDirection, tokenWithoutMode),\n        helperContractAddress: getHelperContract(tokenWithoutMode.chainId)\n      } : fetchTokenDetails(bridgeDirection, tokenWithoutMode), fetchToToken(bridgeDirection, tokenWithoutMode, getBridgeChainId(tokenWithoutMode.chainId))]);\n      setTokens({\n        fromToken: token,\n        toToken: {\n          ...token,\n          ...gotToToken\n        }\n      });\n      return true;\n    } catch (tokenDetailsError) {\n      toast({\n        title: 'Error',\n        description: !isQueryToken ? 'Cannot fetch token details. Wait for a few minutes and reload the application' : 'Token not found.',\n        status: 'error',\n        duration: isQueryToken ? 2000 : null,\n        isClosable: !isQueryToken\n      });\n      logError({\n        tokenDetailsError\n      });\n      return false;\n    }\n  }, [bridgeDirection, getBridgeChainId, toast]);\n  const transfer = useCallback(async () => {\n    if (isGnosisSafe && !receiver) {\n      throw new Error('Must set receiver for Gnosis Safe');\n    }\n    try {\n      setLoading(true);\n      setTxHash();\n      const tx = await relayTokens(ethersProvider, fromToken, receiver || account, fromAmount, {\n        shouldReceiveNativeCur: shouldReceiveNativeCur && (toToken === null || toToken === void 0 ? void 0 : toToken.address) === ADDRESS_ZERO && (toToken === null || toToken === void 0 ? void 0 : toToken.mode) === 'NATIVE',\n        foreignChainId\n      });\n      setTxHash(tx.hash);\n    } catch (transferError) {\n      setLoading(false);\n      logError({\n        transferError,\n        fromToken,\n        receiver: receiver || account,\n        fromAmount: fromAmount.toString(),\n        account\n      });\n      throw transferError;\n    }\n  }, [isGnosisSafe, fromToken, toToken, account, receiver, ethersProvider, fromAmount, shouldReceiveNativeCur, foreignChainId]);\n  const switchTokens = useCallback(() => {\n    setTokens(({\n      fromToken: from,\n      toToken: to\n    }) => ({\n      fromToken: to,\n      toToken: from\n    }));\n    cleanAmounts();\n  }, [cleanAmounts]);\n  useEffect(() => {\n    if (fromToken && toToken && fromToken.chainId && toToken.chainId && [homeChainId, foreignChainId].includes(fromToken.chainId) && [homeChainId, foreignChainId].includes(toToken.chainId) && providerChainId === toToken.chainId) {\n      switchTokens();\n    }\n  }, [homeChainId, foreignChainId, providerChainId, fromToken, toToken, switchTokens]);\n  const setDefaultToken = useCallback(async (chainId, force = false) => {\n    const token = getDefaultToken(bridgeDirection, chainId);\n    if (force || !fromToken || (token === null || token === void 0 ? void 0 : token.chainId) !== (fromToken === null || fromToken === void 0 ? void 0 : fromToken.chainId) && (token === null || token === void 0 ? void 0 : token.address) !== (fromToken === null || fromToken === void 0 ? void 0 : fromToken.address)) {\n      await setToken(token);\n    }\n  }, [setToken, bridgeDirection, fromToken]);\n  useEffect(() => {\n    (async () => {\n      setLoading(true);\n      let tokenSet = false;\n      if (queryToken) {\n        tokenSet = await setToken(queryToken, true);\n        setQueryToken(null);\n      }\n      const tokensValid = fromToken && toToken && [homeChainId, foreignChainId].includes(fromToken === null || fromToken === void 0 ? void 0 : fromToken.chainId) && [homeChainId, foreignChainId].includes(toToken === null || toToken === void 0 ? void 0 : toToken.chainId);\n      const chainId = [homeChainId, foreignChainId].includes(providerChainId) ? providerChainId : foreignChainId;\n      if (!isConnecting && !tokenSet && !tokensValid) {\n        await setDefaultToken(chainId, !tokensValid);\n      }\n      cleanAmounts();\n      setLoading(false);\n    })();\n  }, [queryToken, setQueryToken, setDefaultToken, setToken, fromToken, toToken, homeChainId, foreignChainId, providerChainId, isConnecting, cleanAmounts]);\n  useEffect(() => {\n    if ((toToken === null || toToken === void 0 ? void 0 : toToken.chainId) === foreignChainId && (toToken === null || toToken === void 0 ? void 0 : toToken.address) === ADDRESS_ZERO && (toToken === null || toToken === void 0 ? void 0 : toToken.mode) === 'NATIVE') {\n      setShouldReceiveNativeCur(true);\n    } else {\n      setShouldReceiveNativeCur(false);\n    }\n  }, [fromToken, toToken, foreignChainId]);\n  const bridgeContext = useMemo(() => ({\n    // amounts & balances\n    amountInput,\n    setAmountInput,\n    fromAmount,\n    toAmount,\n    toAmountLoading,\n    setAmount,\n    fromBalance,\n    setFromBalance,\n    toBalance,\n    setToBalance,\n    // tokens\n    fromToken,\n    toToken,\n    setToToken,\n    setToken,\n    switchTokens,\n    // bridge\n    transfer,\n    loading,\n    setLoading,\n    txHash,\n    setTxHash,\n    // misc\n    receiver,\n    setReceiver,\n    shouldReceiveNativeCur,\n    setShouldReceiveNativeCur,\n    currentDay\n  }), [\n  // amounts & balances\n  amountInput, setAmountInput, fromAmount, toAmount, toAmountLoading, setAmount, fromBalance, setFromBalance, toBalance, setToBalance,\n  // tokens\n  fromToken, toToken, setToToken, setToken, switchTokens,\n  // bridge\n  transfer, loading, setLoading, txHash, setTxHash,\n  // misc\n  receiver, setReceiver, shouldReceiveNativeCur, setShouldReceiveNativeCur, currentDay]);\n  return /*#__PURE__*/_jsxDEV(BridgeContext.Provider, {\n    value: bridgeContext,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 384,\n    columnNumber: 5\n  }, this);\n};\n_s2(BridgeProvider, \"bJzLSzgKr9UUpzIP4dXhH/4N2+o=\", false, function () {\n  return [useSettings, useWeb3Context, useBridgeDirection, useToast, useMediatorInfo];\n});\n_c = BridgeProvider;\nvar _c;\n$RefreshReg$(_c, \"BridgeProvider\");","map":{"version":3,"names":["useToast","useSettings","useWeb3Context","BigNumber","useBridgeDirection","useMediatorInfo","fetchToAmount","fetchToToken","relayTokens","ADDRESS_ZERO","getDefaultToken","getHelperContract","getMediatorAddress","getNativeCurrency","getNetworkLabel","logError","parseValue","fetchTokenDetails","React","useCallback","useContext","useEffect","useMemo","useState","jsxDEV","_jsxDEV","BridgeContext","createContext","useBridgeContext","_s","BridgeProvider","children","_s2","queryToken","setQueryToken","isGnosisSafe","ethersProvider","account","providerChainId","loading","isConnecting","bridgeDirection","getBridgeChainId","homeChainId","foreignChainId","receiver","setReceiver","amountInput","setAmountInput","fromToken","toToken","setTokens","fromAmount","toAmount","setAmounts","from","toAmountLoading","setToAmountLoading","setLoading","shouldReceiveNativeCur","setShouldReceiveNativeCur","fromBalance","setFromBalance","toBalance","setToBalance","txHash","setTxHash","toast","feeManagerAddress","isRewardAddress","homeToForeignFeeType","foreignToHomeFeeType","currentDay","isHome","feeType","getToAmount","amount","cleanAmounts","setAmount","inputAmount","decimals","gotToAmount","setToToken","newToToken","prevTokens","chainId","includes","address","mode","label","toUpperCase","storageKey","localStorage","setItem","JSON","stringify","setToken","tokenWithoutMode","isQueryToken","token","gotToToken","Promise","all","mediator","helperContractAddress","tokenDetailsError","title","description","status","duration","isClosable","transfer","Error","tx","hash","transferError","toString","switchTokens","to","setDefaultToken","force","tokenSet","tokensValid","bridgeContext","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/hightop/bahamas_bridge/omnibridge-ui/packages/dapp/src/contexts/BridgeContext.jsx"],"sourcesContent":["import { useToast } from '@chakra-ui/react';\nimport { useSettings } from 'contexts/SettingsContext';\nimport { useWeb3Context } from 'contexts/Web3Context';\nimport { BigNumber } from 'ethers';\nimport { useBridgeDirection } from 'hooks/useBridgeDirection';\nimport { useMediatorInfo } from 'hooks/useMediatorInfo';\nimport { fetchToAmount, fetchToToken, relayTokens } from 'lib/bridge';\nimport { ADDRESS_ZERO } from 'lib/constants';\nimport {\n  getDefaultToken,\n  getHelperContract,\n  getMediatorAddress,\n  getNativeCurrency,\n  getNetworkLabel,\n  logError,\n  parseValue,\n} from 'lib/helpers';\nimport { fetchTokenDetails } from 'lib/token';\nimport React, {\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react';\n\nexport const BridgeContext = React.createContext({});\n\nexport const useBridgeContext = () => useContext(BridgeContext);\n\nexport const BridgeProvider = ({ children }) => {\n  const { queryToken, setQueryToken } = useSettings();\n  const {\n    isGnosisSafe,\n    ethersProvider,\n    account,\n    providerChainId,\n    loading: isConnecting,\n  } = useWeb3Context();\n  const { bridgeDirection, getBridgeChainId, homeChainId, foreignChainId } =\n    useBridgeDirection();\n\n  const [receiver, setReceiver] = useState('');\n  const [amountInput, setAmountInput] = useState('');\n  const [{ fromToken, toToken }, setTokens] = useState({\n    fromToken: null,\n    toToken: null,\n  });\n  const [{ fromAmount, toAmount }, setAmounts] = useState({\n    fromAmount: BigNumber.from(0),\n    toAmount: BigNumber.from(0),\n  });\n  const [toAmountLoading, setToAmountLoading] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [shouldReceiveNativeCur, setShouldReceiveNativeCur] = useState(false);\n  const [fromBalance, setFromBalance] = useState(BigNumber.from(0));\n  const [toBalance, setToBalance] = useState(BigNumber.from(0));\n  const [txHash, setTxHash] = useState();\n\n  const toast = useToast();\n  const {\n    feeManagerAddress,\n    isRewardAddress,\n    homeToForeignFeeType,\n    foreignToHomeFeeType,\n    currentDay,\n  } = useMediatorInfo();\n\n  const isHome = providerChainId === homeChainId;\n  const feeType = isHome ? homeToForeignFeeType : foreignToHomeFeeType;\n\n  const getToAmount = useCallback(\n    async amount =>\n      isRewardAddress\n        ? amount\n        : fetchToAmount(\n            bridgeDirection,\n            feeType,\n            fromToken,\n            toToken,\n            amount,\n            feeManagerAddress,\n          ),\n    [\n      bridgeDirection,\n      fromToken,\n      toToken,\n      isRewardAddress,\n      feeManagerAddress,\n      feeType,\n    ],\n  );\n\n  const cleanAmounts = useCallback(() => {\n    setAmountInput('');\n    setAmounts({\n      fromAmount: BigNumber.from(0),\n      toAmount: BigNumber.from(0),\n    });\n  }, []);\n\n  const setAmount = useCallback(\n    async inputAmount => {\n      if (!fromToken || !toToken) return;\n      setToAmountLoading(true);\n      const amount = parseValue(inputAmount, fromToken.decimals);\n      const gotToAmount = await getToAmount(amount);\n      setAmounts({ fromAmount: amount, toAmount: gotToAmount });\n      setToAmountLoading(false);\n    },\n    [fromToken, toToken, getToAmount],\n  );\n\n  const setToToken = useCallback(\n    newToToken => {\n      setTokens(prevTokens => ({\n        fromToken: prevTokens.fromToken,\n        toToken: { ...newToToken },\n      }));\n    },\n    [setTokens],\n  );\n\n  useEffect(() => {\n    if (\n      fromToken &&\n      toToken &&\n      fromToken.chainId &&\n      toToken.chainId &&\n      [homeChainId, foreignChainId].includes(fromToken.chainId) &&\n      [homeChainId, foreignChainId].includes(toToken.chainId) &&\n      (fromToken.address !== ADDRESS_ZERO || fromToken.mode === 'NATIVE')\n    ) {\n      const label = getNetworkLabel(fromToken.chainId).toUpperCase();\n      const storageKey = `${bridgeDirection.toUpperCase()}-${label}-FROM-TOKEN`;\n      localStorage.setItem(storageKey, JSON.stringify(fromToken));\n    }\n  }, [fromToken, toToken, bridgeDirection, homeChainId, foreignChainId]);\n\n  const setToken = useCallback(\n    async (tokenWithoutMode, isQueryToken = false) => {\n      if (!tokenWithoutMode) return false;\n      try {\n        const [token, gotToToken] = await Promise.all([\n          tokenWithoutMode?.address === ADDRESS_ZERO\n            ? {\n                ...getNativeCurrency(tokenWithoutMode.chainId),\n                mediator: getMediatorAddress(bridgeDirection, tokenWithoutMode),\n                helperContractAddress: getHelperContract(\n                  tokenWithoutMode.chainId,\n                ),\n              }\n            : fetchTokenDetails(bridgeDirection, tokenWithoutMode),\n          fetchToToken(\n            bridgeDirection,\n            tokenWithoutMode,\n            getBridgeChainId(tokenWithoutMode.chainId),\n          ),\n        ]);\n        setTokens({ fromToken: token, toToken: { ...token, ...gotToToken } });\n        return true;\n      } catch (tokenDetailsError) {\n        toast({\n          title: 'Error',\n          description: !isQueryToken\n            ? 'Cannot fetch token details. Wait for a few minutes and reload the application'\n            : 'Token not found.',\n          status: 'error',\n          duration: isQueryToken ? 2000 : null,\n          isClosable: !isQueryToken,\n        });\n        logError({ tokenDetailsError });\n        return false;\n      }\n    },\n    [bridgeDirection, getBridgeChainId, toast],\n  );\n\n  const transfer = useCallback(async () => {\n    if (isGnosisSafe && !receiver) {\n      throw new Error('Must set receiver for Gnosis Safe');\n    }\n    try {\n      setLoading(true);\n      setTxHash();\n      const tx = await relayTokens(\n        ethersProvider,\n        fromToken,\n        receiver || account,\n        fromAmount,\n        {\n          shouldReceiveNativeCur:\n            shouldReceiveNativeCur &&\n            toToken?.address === ADDRESS_ZERO &&\n            toToken?.mode === 'NATIVE',\n          foreignChainId,\n        },\n      );\n      setTxHash(tx.hash);\n    } catch (transferError) {\n      setLoading(false);\n      logError({\n        transferError,\n        fromToken,\n        receiver: receiver || account,\n        fromAmount: fromAmount.toString(),\n        account,\n      });\n      throw transferError;\n    }\n  }, [\n    isGnosisSafe,\n    fromToken,\n    toToken,\n    account,\n    receiver,\n    ethersProvider,\n    fromAmount,\n    shouldReceiveNativeCur,\n    foreignChainId,\n  ]);\n\n  const switchTokens = useCallback(() => {\n    setTokens(({ fromToken: from, toToken: to }) => ({\n      fromToken: to,\n      toToken: from,\n    }));\n    cleanAmounts();\n  }, [cleanAmounts]);\n\n  useEffect(() => {\n    if (\n      fromToken &&\n      toToken &&\n      fromToken.chainId &&\n      toToken.chainId &&\n      [homeChainId, foreignChainId].includes(fromToken.chainId) &&\n      [homeChainId, foreignChainId].includes(toToken.chainId) &&\n      providerChainId === toToken.chainId\n    ) {\n      switchTokens();\n    }\n  }, [\n    homeChainId,\n    foreignChainId,\n    providerChainId,\n    fromToken,\n    toToken,\n    switchTokens,\n  ]);\n\n  const setDefaultToken = useCallback(\n    async (chainId, force = false) => {\n      const token = getDefaultToken(bridgeDirection, chainId);\n      if (\n        force ||\n        !fromToken ||\n        (token?.chainId !== fromToken?.chainId &&\n          token?.address !== fromToken?.address)\n      ) {\n        await setToken(token);\n      }\n    },\n    [setToken, bridgeDirection, fromToken],\n  );\n\n  useEffect(() => {\n    (async () => {\n      setLoading(true);\n      let tokenSet = false;\n      if (queryToken) {\n        tokenSet = await setToken(queryToken, true);\n        setQueryToken(null);\n      }\n\n      const tokensValid =\n        fromToken &&\n        toToken &&\n        [homeChainId, foreignChainId].includes(fromToken?.chainId) &&\n        [homeChainId, foreignChainId].includes(toToken?.chainId);\n\n      const chainId = [homeChainId, foreignChainId].includes(providerChainId)\n        ? providerChainId\n        : foreignChainId;\n\n      if (!isConnecting && !tokenSet && !tokensValid) {\n        await setDefaultToken(chainId, !tokensValid);\n      }\n      cleanAmounts();\n      setLoading(false);\n    })();\n  }, [\n    queryToken,\n    setQueryToken,\n    setDefaultToken,\n    setToken,\n    fromToken,\n    toToken,\n    homeChainId,\n    foreignChainId,\n    providerChainId,\n    isConnecting,\n    cleanAmounts,\n  ]);\n\n  useEffect(() => {\n    if (\n      toToken?.chainId === foreignChainId &&\n      toToken?.address === ADDRESS_ZERO &&\n      toToken?.mode === 'NATIVE'\n    ) {\n      setShouldReceiveNativeCur(true);\n    } else {\n      setShouldReceiveNativeCur(false);\n    }\n  }, [fromToken, toToken, foreignChainId]);\n\n  const bridgeContext = useMemo(\n    () => ({\n      // amounts & balances\n      amountInput,\n      setAmountInput,\n      fromAmount,\n      toAmount,\n      toAmountLoading,\n      setAmount,\n      fromBalance,\n      setFromBalance,\n      toBalance,\n      setToBalance,\n      // tokens\n      fromToken,\n      toToken,\n      setToToken,\n      setToken,\n      switchTokens,\n      // bridge\n      transfer,\n      loading,\n      setLoading,\n      txHash,\n      setTxHash,\n      // misc\n      receiver,\n      setReceiver,\n      shouldReceiveNativeCur,\n      setShouldReceiveNativeCur,\n      currentDay,\n    }),\n    [\n      // amounts & balances\n      amountInput,\n      setAmountInput,\n      fromAmount,\n      toAmount,\n      toAmountLoading,\n      setAmount,\n      fromBalance,\n      setFromBalance,\n      toBalance,\n      setToBalance,\n      // tokens\n      fromToken,\n      toToken,\n      setToToken,\n      setToken,\n      switchTokens,\n      // bridge\n      transfer,\n      loading,\n      setLoading,\n      txHash,\n      setTxHash,\n      // misc\n      receiver,\n      setReceiver,\n      shouldReceiveNativeCur,\n      setShouldReceiveNativeCur,\n      currentDay,\n    ],\n  );\n\n  return (\n    <BridgeContext.Provider value={bridgeContext}>\n      {children}\n    </BridgeContext.Provider>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}