{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { SentryError, SyncPromise } from '@sentry/utils';\nimport { BaseTransport } from './base';\n/** `XHR` based transport */\nvar XHRTransport = /** @class */function (_super) {\n  __extends(XHRTransport, _super);\n  function XHRTransport() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * @param sentryRequest Prepared SentryRequest to be delivered\n   * @param originalPayload Original payload used to create SentryRequest\n   */\n  XHRTransport.prototype._sendRequest = function (sentryRequest, originalPayload) {\n    var _this = this;\n    // eslint-disable-next-line deprecation/deprecation\n    if (this._isRateLimited(sentryRequest.type)) {\n      this.recordLostEvent('ratelimit_backoff', sentryRequest.type);\n      return Promise.reject({\n        event: originalPayload,\n        type: sentryRequest.type,\n        // eslint-disable-next-line deprecation/deprecation\n        reason: \"Transport for \" + sentryRequest.type + \" requests locked till \" + this._disabledUntil(sentryRequest.type) + \" due to too many requests.\",\n        status: 429\n      });\n    }\n    return this._buffer.add(function () {\n      return new SyncPromise(function (resolve, reject) {\n        var request = new XMLHttpRequest();\n        request.onreadystatechange = function () {\n          if (request.readyState === 4) {\n            var headers = {\n              'x-sentry-rate-limits': request.getResponseHeader('X-Sentry-Rate-Limits'),\n              'retry-after': request.getResponseHeader('Retry-After')\n            };\n            _this._handleResponse({\n              requestType: sentryRequest.type,\n              response: request,\n              headers: headers,\n              resolve: resolve,\n              reject: reject\n            });\n          }\n        };\n        request.open('POST', sentryRequest.url);\n        for (var header in _this.options.headers) {\n          if (Object.prototype.hasOwnProperty.call(_this.options.headers, header)) {\n            request.setRequestHeader(header, _this.options.headers[header]);\n          }\n        }\n        request.send(sentryRequest.body);\n      });\n    }).then(undefined, function (reason) {\n      // It's either buffer rejection or any other xhr/fetch error, which are treated as NetworkError.\n      if (reason instanceof SentryError) {\n        _this.recordLostEvent('queue_overflow', sentryRequest.type);\n      } else {\n        _this.recordLostEvent('network_error', sentryRequest.type);\n      }\n      throw reason;\n    });\n  };\n  return XHRTransport;\n}(BaseTransport);\nexport { XHRTransport };","map":{"version":3,"sources":["../../../../src/transports/xhr.ts"],"names":[],"mappings":";AACA,SAAS,WAAW,EAAE,WAAW,QAAQ,eAAe;AAExD,SAAS,aAAa,QAAQ,QAAQ;AAEtC;AACA,IAAA,YAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAAkC,SAAA,CAAA,YAAA,EAAA,MAAA,CAAA;EAAlC,SAAA,YAAA,CAAA,EAAA;;EAwDA;EAvDE;;;AAGG;EACO,YAAA,CAAA,SAAA,CAAA,YAAY,GAAtB,UAAuB,aAA4B,EAAE,eAAgC,EAAA;IAArF,IAAA,KAAA,GAAA,IAAA;IACE;IACA,IAAI,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,IAAI,CAAC,EAAE;MAC3C,IAAI,CAAC,eAAe,CAAC,mBAAmB,EAAE,aAAa,CAAC,IAAI,CAAC;MAE7D,OAAO,OAAO,CAAC,MAAM,CAAC;QACpB,KAAK,EAAE,eAAe;QACtB,IAAI,EAAE,aAAa,CAAC,IAAI;QACxB;QACA,MAAM,EAAE,gBAAA,GAAiB,aAAa,CAAC,IAAI,GAAA,wBAAA,GAAyB,IAAI,CAAC,cAAc,CACrF,aAAa,CAAC,IAAI,CACnB,GAAA,4BAA4B;QAC7B,MAAM,EAAE;OACT,CAAC;IACH;IAED,OAAO,IAAI,CAAC,OAAO,CAChB,GAAG,CACF,YAAA;MACE,OAAA,IAAI,WAAW,CAAW,UAAC,OAAO,EAAE,MAAM,EAAA;QACxC,IAAM,OAAO,GAAG,IAAI,cAAc,CAAA,CAAE;QAEpC,OAAO,CAAC,kBAAkB,GAAG,YAAA;UAC3B,IAAI,OAAO,CAAC,UAAU,KAAK,CAAC,EAAE;YAC5B,IAAM,OAAO,GAAG;cACd,sBAAsB,EAAE,OAAO,CAAC,iBAAiB,CAAC,sBAAsB,CAAC;cACzE,aAAa,EAAE,OAAO,CAAC,iBAAiB,CAAC,aAAa;aACvD;YACD,KAAI,CAAC,eAAe,CAAC;cAAE,WAAW,EAAE,aAAa,CAAC,IAAI;cAAE,QAAQ,EAAE,OAAO;cAAE,OAAO,EAAA,OAAA;cAAE,OAAO,EAAA,OAAA;cAAE,MAAM,EAAA;YAAA,CAAE,CAAC;UACvG;QACH,CAAC;QAED,OAAO,CAAC,IAAI,CAAC,MAAM,EAAE,aAAa,CAAC,GAAG,CAAC;QACvC,KAAK,IAAM,MAAM,IAAI,KAAI,CAAC,OAAO,CAAC,OAAO,EAAE;UACzC,IAAI,MAAM,CAAC,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,KAAI,CAAC,OAAO,CAAC,OAAO,EAAE,MAAM,CAAC,EAAE;YACtE,OAAO,CAAC,gBAAgB,CAAC,MAAM,EAAE,KAAI,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;UAC/D;QACF;QACD,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC;MAClC,CAAC,CAAC;IApBF,CAoBE,CACL,CACA,IAAI,CAAC,SAAS,EAAE,UAAA,MAAM,EAAA;MACrB;MACA,IAAI,MAAM,YAAY,WAAW,EAAE;QACjC,KAAI,CAAC,eAAe,CAAC,gBAAgB,EAAE,aAAa,CAAC,IAAI,CAAC;OAC3D,MAAM;QACL,KAAI,CAAC,eAAe,CAAC,eAAe,EAAE,aAAa,CAAC,IAAI,CAAC;MAC1D;MACD,MAAM,MAAM;IACd,CAAC,CAAC;EACN,CAAC;EACH,OAAA,YAAC;AAAD,CAAC,CAxDiC,aAAa,CAAA","sourcesContent":["import { Event, Response, SentryRequest, Session } from '@sentry/types';\nimport { SentryError, SyncPromise } from '@sentry/utils';\n\nimport { BaseTransport } from './base';\n\n/** `XHR` based transport */\nexport class XHRTransport extends BaseTransport {\n  /**\n   * @param sentryRequest Prepared SentryRequest to be delivered\n   * @param originalPayload Original payload used to create SentryRequest\n   */\n  protected _sendRequest(sentryRequest: SentryRequest, originalPayload: Event | Session): PromiseLike<Response> {\n    // eslint-disable-next-line deprecation/deprecation\n    if (this._isRateLimited(sentryRequest.type)) {\n      this.recordLostEvent('ratelimit_backoff', sentryRequest.type);\n\n      return Promise.reject({\n        event: originalPayload,\n        type: sentryRequest.type,\n        // eslint-disable-next-line deprecation/deprecation\n        reason: `Transport for ${sentryRequest.type} requests locked till ${this._disabledUntil(\n          sentryRequest.type,\n        )} due to too many requests.`,\n        status: 429,\n      });\n    }\n\n    return this._buffer\n      .add(\n        () =>\n          new SyncPromise<Response>((resolve, reject) => {\n            const request = new XMLHttpRequest();\n\n            request.onreadystatechange = (): void => {\n              if (request.readyState === 4) {\n                const headers = {\n                  'x-sentry-rate-limits': request.getResponseHeader('X-Sentry-Rate-Limits'),\n                  'retry-after': request.getResponseHeader('Retry-After'),\n                };\n                this._handleResponse({ requestType: sentryRequest.type, response: request, headers, resolve, reject });\n              }\n            };\n\n            request.open('POST', sentryRequest.url);\n            for (const header in this.options.headers) {\n              if (Object.prototype.hasOwnProperty.call(this.options.headers, header)) {\n                request.setRequestHeader(header, this.options.headers[header]);\n              }\n            }\n            request.send(sentryRequest.body);\n          }),\n      )\n      .then(undefined, reason => {\n        // It's either buffer rejection or any other xhr/fetch error, which are treated as NetworkError.\n        if (reason instanceof SentryError) {\n          this.recordLostEvent('queue_overflow', sentryRequest.type);\n        } else {\n          this.recordLostEvent('network_error', sentryRequest.type);\n        }\n        throw reason;\n      });\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}