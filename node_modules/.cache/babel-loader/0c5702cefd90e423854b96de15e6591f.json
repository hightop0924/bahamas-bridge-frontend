{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_innerSubscribe PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { SimpleOuterSubscriber, SimpleInnerSubscriber, innerSubscribe } from '../innerSubscribe';\nexport function mergeScan(accumulator, seed, concurrent) {\n  if (concurrent === void 0) {\n    concurrent = Number.POSITIVE_INFINITY;\n  }\n  return function (source) {\n    return source.lift(new MergeScanOperator(accumulator, seed, concurrent));\n  };\n}\nvar MergeScanOperator = /*@__PURE__*/function () {\n  function MergeScanOperator(accumulator, seed, concurrent) {\n    this.accumulator = accumulator;\n    this.seed = seed;\n    this.concurrent = concurrent;\n  }\n  MergeScanOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new MergeScanSubscriber(subscriber, this.accumulator, this.seed, this.concurrent));\n  };\n  return MergeScanOperator;\n}();\nexport { MergeScanOperator };\nvar MergeScanSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(MergeScanSubscriber, _super);\n  function MergeScanSubscriber(destination, accumulator, acc, concurrent) {\n    var _this = _super.call(this, destination) || this;\n    _this.accumulator = accumulator;\n    _this.acc = acc;\n    _this.concurrent = concurrent;\n    _this.hasValue = false;\n    _this.hasCompleted = false;\n    _this.buffer = [];\n    _this.active = 0;\n    _this.index = 0;\n    return _this;\n  }\n  MergeScanSubscriber.prototype._next = function (value) {\n    if (this.active < this.concurrent) {\n      var index = this.index++;\n      var destination = this.destination;\n      var ish = void 0;\n      try {\n        var accumulator = this.accumulator;\n        ish = accumulator(this.acc, value, index);\n      } catch (e) {\n        return destination.error(e);\n      }\n      this.active++;\n      this._innerSub(ish);\n    } else {\n      this.buffer.push(value);\n    }\n  };\n  MergeScanSubscriber.prototype._innerSub = function (ish) {\n    var innerSubscriber = new SimpleInnerSubscriber(this);\n    var destination = this.destination;\n    destination.add(innerSubscriber);\n    var innerSubscription = innerSubscribe(ish, innerSubscriber);\n    if (innerSubscription !== innerSubscriber) {\n      destination.add(innerSubscription);\n    }\n  };\n  MergeScanSubscriber.prototype._complete = function () {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      if (this.hasValue === false) {\n        this.destination.next(this.acc);\n      }\n      this.destination.complete();\n    }\n    this.unsubscribe();\n  };\n  MergeScanSubscriber.prototype.notifyNext = function (innerValue) {\n    var destination = this.destination;\n    this.acc = innerValue;\n    this.hasValue = true;\n    destination.next(innerValue);\n  };\n  MergeScanSubscriber.prototype.notifyComplete = function () {\n    var buffer = this.buffer;\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      if (this.hasValue === false) {\n        this.destination.next(this.acc);\n      }\n      this.destination.complete();\n    }\n  };\n  return MergeScanSubscriber;\n}(SimpleOuterSubscriber);\nexport { MergeScanSubscriber };","map":{"version":3,"sources":["../../../src/internal/operators/mergeScan.ts"],"names":[],"mappings":"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","sourcesContent":["/** PURE_IMPORTS_START tslib,_innerSubscribe PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { SimpleOuterSubscriber, SimpleInnerSubscriber, innerSubscribe } from '../innerSubscribe';\nexport function mergeScan(accumulator, seed, concurrent) {\n    if (concurrent === void 0) {\n        concurrent = Number.POSITIVE_INFINITY;\n    }\n    return function (source) { return source.lift(new MergeScanOperator(accumulator, seed, concurrent)); };\n}\nvar MergeScanOperator = /*@__PURE__*/ (function () {\n    function MergeScanOperator(accumulator, seed, concurrent) {\n        this.accumulator = accumulator;\n        this.seed = seed;\n        this.concurrent = concurrent;\n    }\n    MergeScanOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new MergeScanSubscriber(subscriber, this.accumulator, this.seed, this.concurrent));\n    };\n    return MergeScanOperator;\n}());\nexport { MergeScanOperator };\nvar MergeScanSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(MergeScanSubscriber, _super);\n    function MergeScanSubscriber(destination, accumulator, acc, concurrent) {\n        var _this = _super.call(this, destination) || this;\n        _this.accumulator = accumulator;\n        _this.acc = acc;\n        _this.concurrent = concurrent;\n        _this.hasValue = false;\n        _this.hasCompleted = false;\n        _this.buffer = [];\n        _this.active = 0;\n        _this.index = 0;\n        return _this;\n    }\n    MergeScanSubscriber.prototype._next = function (value) {\n        if (this.active < this.concurrent) {\n            var index = this.index++;\n            var destination = this.destination;\n            var ish = void 0;\n            try {\n                var accumulator = this.accumulator;\n                ish = accumulator(this.acc, value, index);\n            }\n            catch (e) {\n                return destination.error(e);\n            }\n            this.active++;\n            this._innerSub(ish);\n        }\n        else {\n            this.buffer.push(value);\n        }\n    };\n    MergeScanSubscriber.prototype._innerSub = function (ish) {\n        var innerSubscriber = new SimpleInnerSubscriber(this);\n        var destination = this.destination;\n        destination.add(innerSubscriber);\n        var innerSubscription = innerSubscribe(ish, innerSubscriber);\n        if (innerSubscription !== innerSubscriber) {\n            destination.add(innerSubscription);\n        }\n    };\n    MergeScanSubscriber.prototype._complete = function () {\n        this.hasCompleted = true;\n        if (this.active === 0 && this.buffer.length === 0) {\n            if (this.hasValue === false) {\n                this.destination.next(this.acc);\n            }\n            this.destination.complete();\n        }\n        this.unsubscribe();\n    };\n    MergeScanSubscriber.prototype.notifyNext = function (innerValue) {\n        var destination = this.destination;\n        this.acc = innerValue;\n        this.hasValue = true;\n        destination.next(innerValue);\n    };\n    MergeScanSubscriber.prototype.notifyComplete = function () {\n        var buffer = this.buffer;\n        this.active--;\n        if (buffer.length > 0) {\n            this._next(buffer.shift());\n        }\n        else if (this.active === 0 && this.hasCompleted) {\n            if (this.hasValue === false) {\n                this.destination.next(this.acc);\n            }\n            this.destination.complete();\n        }\n    };\n    return MergeScanSubscriber;\n}(SimpleOuterSubscriber));\nexport { MergeScanSubscriber };\n//# sourceMappingURL=mergeScan.js.map\n"]},"metadata":{},"sourceType":"module"}