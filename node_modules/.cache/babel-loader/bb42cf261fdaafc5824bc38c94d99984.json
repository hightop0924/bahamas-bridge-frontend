{"ast":null,"code":"import { getCurrentHub } from '@sentry/hub';\nimport { logger } from '@sentry/utils';\nimport { IS_DEBUG_BUILD } from './flags';\n/**\n * Internal function to create a new SDK client instance. The client is\n * installed and then bound to the current scope.\n *\n * @param clientClass The client class to instantiate.\n * @param options Options to pass to the client.\n */\nexport function initAndBind(clientClass, options) {\n  if (options.debug === true) {\n    if (IS_DEBUG_BUILD) {\n      logger.enable();\n    } else {\n      // use `console.warn` rather than `logger.warn` since by non-debug bundles have all `logger.x` statements stripped\n      // eslint-disable-next-line no-console\n      console.warn('[Sentry] Cannot initialize SDK with `debug` option using a non-debug bundle.');\n    }\n  }\n  var hub = getCurrentHub();\n  var scope = hub.getScope();\n  if (scope) {\n    scope.update(options.initialScope);\n  }\n  var client = new clientClass(options);\n  hub.bindClient(client);\n}","map":{"version":3,"sources":["../../src/sdk.ts"],"names":[],"mappings":"AAAA,SAAS,aAAa,QAAQ,aAAa;AAE3C,SAAS,MAAM,QAAQ,eAAe;AAEtC,SAAS,cAAc,QAAQ,SAAS;AAKxC;;;;;;AAMG;AACH,OAAM,SAAU,WAAW,CAAsC,WAA8B,EAAE,OAAU,EAAA;EACzG,IAAI,OAAO,CAAC,KAAK,KAAK,IAAI,EAAE;IAC1B,IAAI,cAAc,EAAE;MAClB,MAAM,CAAC,MAAM,CAAA,CAAE;KAChB,MAAM;MACL;MACA;MACA,OAAO,CAAC,IAAI,CAAC,8EAA8E,CAAC;IAC7F;EACF;EACD,IAAM,GAAG,GAAG,aAAa,CAAA,CAAE;EAC3B,IAAM,KAAK,GAAG,GAAG,CAAC,QAAQ,CAAA,CAAE;EAC5B,IAAI,KAAK,EAAE;IACT,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC;EACnC;EACD,IAAM,MAAM,GAAG,IAAI,WAAW,CAAC,OAAO,CAAC;EACvC,GAAG,CAAC,UAAU,CAAC,MAAM,CAAC;AACxB","sourcesContent":["import { getCurrentHub } from '@sentry/hub';\nimport { Client, Options } from '@sentry/types';\nimport { logger } from '@sentry/utils';\n\nimport { IS_DEBUG_BUILD } from './flags';\n\n/** A class object that can instantiate Client objects. */\nexport type ClientClass<F extends Client, O extends Options> = new (options: O) => F;\n\n/**\n * Internal function to create a new SDK client instance. The client is\n * installed and then bound to the current scope.\n *\n * @param clientClass The client class to instantiate.\n * @param options Options to pass to the client.\n */\nexport function initAndBind<F extends Client, O extends Options>(clientClass: ClientClass<F, O>, options: O): void {\n  if (options.debug === true) {\n    if (IS_DEBUG_BUILD) {\n      logger.enable();\n    } else {\n      // use `console.warn` rather than `logger.warn` since by non-debug bundles have all `logger.x` statements stripped\n      // eslint-disable-next-line no-console\n      console.warn('[Sentry] Cannot initialize SDK with `debug` option using a non-debug bundle.');\n    }\n  }\n  const hub = getCurrentHub();\n  const scope = hub.getScope();\n  if (scope) {\n    scope.update(options.initialScope);\n  }\n  const client = new clientClass(options);\n  hub.bindClient(client);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}