{"ast":null,"code":"\"use strict\";\n\n// Copyright (c) 2018-2020 WalletLink.org <https://www.walletlink.org/>\n// Copyright (c) 2018-2020 Coinbase, Inc. <https://www.coinbase.com/>\n// Licensed under the Apache License, version 2.0\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decrypt = exports.encrypt = void 0;\nconst rxjs_1 = require(\"rxjs\");\nconst util_1 = require(\"../util\");\n/**\n *\n * @param plainText string to be encrypted\n * @param secret hex representation of 32-byte secret\n * returns hex string representation of bytes in the order: initialization vector (iv),\n * auth tag, encrypted plaintext. IV is 12 bytes. Auth tag is 16 bytes. Remaining bytes are the\n * encrypted plainText.\n */\nasync function encrypt(plainText, secret) {\n  if (secret.length !== 64) throw Error(`secret must be 256 bits`);\n  const ivBytes = crypto.getRandomValues(new Uint8Array(12));\n  const secretKey = await crypto.subtle.importKey(\"raw\", (0, util_1.hexStringToUint8Array)(secret), {\n    \"name\": \"aes-gcm\"\n  }, false, [\"encrypt\", \"decrypt\"]);\n  const enc = new TextEncoder();\n  // Will return encrypted plainText with auth tag (ie MAC or checksum) appended at the end\n  const encryptedResult = await window.crypto.subtle.encrypt({\n    name: \"AES-GCM\",\n    iv: ivBytes\n  }, secretKey, enc.encode(plainText));\n  const tagLength = 16;\n  const authTag = encryptedResult.slice(encryptedResult.byteLength - tagLength);\n  const encryptedPlaintext = encryptedResult.slice(0, encryptedResult.byteLength - tagLength);\n  const authTagBytes = new Uint8Array(authTag);\n  const encryptedPlaintextBytes = new Uint8Array(encryptedPlaintext);\n  const concatted = new Uint8Array([...ivBytes, ...authTagBytes, ...encryptedPlaintextBytes]);\n  return (0, util_1.uint8ArrayToHex)(concatted);\n}\nexports.encrypt = encrypt;\n/**\n *\n * @param cipherText hex string representation of bytes in the order: initialization vector (iv),\n * auth tag, encrypted plaintext. IV is 12 bytes. Auth tag is 16 bytes.\n * @param secret hex string representation of 32-byte secret\n */\nfunction decrypt(cipherText, secret) {\n  if (secret.length !== 64) throw Error(`secret must be 256 bits`);\n  return new rxjs_1.Observable(subscriber => {\n    void async function () {\n      const secretKey = await crypto.subtle.importKey(\"raw\", (0, util_1.hexStringToUint8Array)(secret), {\n        \"name\": \"aes-gcm\"\n      }, false, [\"encrypt\", \"decrypt\"]);\n      const encrypted = (0, util_1.hexStringToUint8Array)(cipherText);\n      const ivBytes = encrypted.slice(0, 12);\n      const authTagBytes = encrypted.slice(12, 28);\n      const encryptedPlaintextBytes = encrypted.slice(28);\n      const concattedBytes = new Uint8Array([...encryptedPlaintextBytes, ...authTagBytes]);\n      const algo = {\n        name: \"AES-GCM\",\n        iv: new Uint8Array(ivBytes)\n      };\n      try {\n        const decrypted = await window.crypto.subtle.decrypt(algo, secretKey, concattedBytes);\n        const decoder = new TextDecoder();\n        subscriber.next(decoder.decode(decrypted));\n        subscriber.complete();\n      } catch (err) {\n        subscriber.error(err);\n      }\n    }();\n  });\n}\nexports.decrypt = decrypt;","map":{"version":3,"names":["Object","defineProperty","exports","value","decrypt","encrypt","rxjs_1","require","util_1","plainText","secret","length","Error","ivBytes","crypto","getRandomValues","Uint8Array","secretKey","subtle","importKey","hexStringToUint8Array","enc","TextEncoder","encryptedResult","window","name","iv","encode","tagLength","authTag","slice","byteLength","encryptedPlaintext","authTagBytes","encryptedPlaintextBytes","concatted","uint8ArrayToHex","cipherText","Observable","subscriber","encrypted","concattedBytes","algo","decrypted","decoder","TextDecoder","next","decode","complete","err","error"],"sources":["/home/hightop/bahamas_bridge/omnibridge-ui/node_modules/walletlink/dist/relay/aes256gcm.js"],"sourcesContent":["\"use strict\";\n// Copyright (c) 2018-2020 WalletLink.org <https://www.walletlink.org/>\n// Copyright (c) 2018-2020 Coinbase, Inc. <https://www.coinbase.com/>\n// Licensed under the Apache License, version 2.0\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.decrypt = exports.encrypt = void 0;\nconst rxjs_1 = require(\"rxjs\");\nconst util_1 = require(\"../util\");\n/**\n *\n * @param plainText string to be encrypted\n * @param secret hex representation of 32-byte secret\n * returns hex string representation of bytes in the order: initialization vector (iv),\n * auth tag, encrypted plaintext. IV is 12 bytes. Auth tag is 16 bytes. Remaining bytes are the\n * encrypted plainText.\n */\nasync function encrypt(plainText, secret) {\n    if (secret.length !== 64)\n        throw Error(`secret must be 256 bits`);\n    const ivBytes = crypto.getRandomValues(new Uint8Array(12));\n    const secretKey = await crypto.subtle.importKey(\"raw\", (0, util_1.hexStringToUint8Array)(secret), { \"name\": \"aes-gcm\" }, false, [\"encrypt\", \"decrypt\"]);\n    const enc = new TextEncoder();\n    // Will return encrypted plainText with auth tag (ie MAC or checksum) appended at the end\n    const encryptedResult = await window.crypto.subtle.encrypt({\n        name: \"AES-GCM\",\n        iv: ivBytes\n    }, secretKey, enc.encode(plainText));\n    const tagLength = 16;\n    const authTag = encryptedResult.slice(encryptedResult.byteLength - tagLength);\n    const encryptedPlaintext = encryptedResult.slice(0, encryptedResult.byteLength - tagLength);\n    const authTagBytes = new Uint8Array(authTag);\n    const encryptedPlaintextBytes = new Uint8Array(encryptedPlaintext);\n    const concatted = new Uint8Array([...ivBytes, ...authTagBytes, ...encryptedPlaintextBytes]);\n    return (0, util_1.uint8ArrayToHex)(concatted);\n}\nexports.encrypt = encrypt;\n/**\n *\n * @param cipherText hex string representation of bytes in the order: initialization vector (iv),\n * auth tag, encrypted plaintext. IV is 12 bytes. Auth tag is 16 bytes.\n * @param secret hex string representation of 32-byte secret\n */\nfunction decrypt(cipherText, secret) {\n    if (secret.length !== 64)\n        throw Error(`secret must be 256 bits`);\n    return new rxjs_1.Observable((subscriber) => {\n        void (async function () {\n            const secretKey = await crypto.subtle.importKey(\"raw\", (0, util_1.hexStringToUint8Array)(secret), { \"name\": \"aes-gcm\" }, false, [\"encrypt\", \"decrypt\"]);\n            const encrypted = (0, util_1.hexStringToUint8Array)(cipherText);\n            const ivBytes = encrypted.slice(0, 12);\n            const authTagBytes = encrypted.slice(12, 28);\n            const encryptedPlaintextBytes = encrypted.slice(28);\n            const concattedBytes = new Uint8Array([...encryptedPlaintextBytes, ...authTagBytes]);\n            const algo = {\n                name: \"AES-GCM\",\n                iv: new Uint8Array(ivBytes)\n            };\n            try {\n                const decrypted = await window.crypto.subtle.decrypt(algo, secretKey, concattedBytes);\n                const decoder = new TextDecoder();\n                subscriber.next(decoder.decode(decrypted));\n                subscriber.complete();\n            }\n            catch (err) {\n                subscriber.error(err);\n            }\n        })();\n    });\n}\nexports.decrypt = decrypt;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}