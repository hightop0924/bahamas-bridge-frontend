{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getWindowMetadata = void 0;\nconst window_getters_1 = require(\"@walletconnect/window-getters\");\nfunction getWindowMetadata() {\n  let doc;\n  let loc;\n  try {\n    doc = window_getters_1.getDocumentOrThrow();\n    loc = window_getters_1.getLocationOrThrow();\n  } catch (e) {\n    return null;\n  }\n  function getIcons() {\n    const links = doc.getElementsByTagName(\"link\");\n    const icons = [];\n    for (let i = 0; i < links.length; i++) {\n      const link = links[i];\n      const rel = link.getAttribute(\"rel\");\n      if (rel) {\n        if (rel.toLowerCase().indexOf(\"icon\") > -1) {\n          const href = link.getAttribute(\"href\");\n          if (href) {\n            if (href.toLowerCase().indexOf(\"https:\") === -1 && href.toLowerCase().indexOf(\"http:\") === -1 && href.indexOf(\"//\") !== 0) {\n              let absoluteHref = loc.protocol + \"//\" + loc.host;\n              if (href.indexOf(\"/\") === 0) {\n                absoluteHref += href;\n              } else {\n                const path = loc.pathname.split(\"/\");\n                path.pop();\n                const finalPath = path.join(\"/\");\n                absoluteHref += finalPath + \"/\" + href;\n              }\n              icons.push(absoluteHref);\n            } else if (href.indexOf(\"//\") === 0) {\n              const absoluteUrl = loc.protocol + href;\n              icons.push(absoluteUrl);\n            } else {\n              icons.push(href);\n            }\n          }\n        }\n      }\n    }\n    return icons;\n  }\n  function getWindowMetadataOfAny(...args) {\n    const metaTags = doc.getElementsByTagName(\"meta\");\n    for (let i = 0; i < metaTags.length; i++) {\n      const tag = metaTags[i];\n      const attributes = [\"itemprop\", \"property\", \"name\"].map(target => tag.getAttribute(target)).filter(attr => {\n        if (attr) {\n          return args.includes(attr);\n        }\n        return false;\n      });\n      if (attributes.length && attributes) {\n        const content = tag.getAttribute(\"content\");\n        if (content) {\n          return content;\n        }\n      }\n    }\n    return \"\";\n  }\n  function getName() {\n    let name = getWindowMetadataOfAny(\"name\", \"og:site_name\", \"og:title\", \"twitter:title\");\n    if (!name) {\n      name = doc.title;\n    }\n    return name;\n  }\n  function getDescription() {\n    const description = getWindowMetadataOfAny(\"description\", \"og:description\", \"twitter:description\", \"keywords\");\n    return description;\n  }\n  const name = getName();\n  const description = getDescription();\n  const url = loc.origin;\n  const icons = getIcons();\n  const meta = {\n    description,\n    url,\n    icons,\n    name\n  };\n  return meta;\n}\nexports.getWindowMetadata = getWindowMetadata;","map":{"version":3,"sources":["../../src/index.ts"],"names":[],"mappings":";;;;;;AAAA,MAAA,gBAAA,GAAA,OAAA,CAAA,+BAAA,CAAA;AAYA,SAAgB,iBAAiB,CAAA,EAAA;EAC/B,IAAI,GAAa;EACjB,IAAI,GAAa;EAEjB,IAAI;IACF,GAAG,GAAG,gBAAA,CAAA,kBAAkB,CAAA,CAAE;IAC1B,GAAG,GAAG,gBAAA,CAAA,kBAAkB,CAAA,CAAE;GAC3B,CAAC,OAAO,CAAC,EAAE;IACV,OAAO,IAAI;EACZ;EAED,SAAS,QAAQ,CAAA,EAAA;IACf,MAAM,KAAK,GAAsC,GAAG,CAAC,oBAAoB,CACvE,MAAM,CACP;IACD,MAAM,KAAK,GAAa,EAAE;IAE1B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;MACrC,MAAM,IAAI,GAAoB,KAAK,CAAC,CAAC,CAAC;MAEtC,MAAM,GAAG,GAAkB,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC;MACnD,IAAI,GAAG,EAAE;QACP,IAAI,GAAG,CAAC,WAAW,CAAA,CAAE,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,EAAE;UAC1C,MAAM,IAAI,GAAkB,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC;UAErD,IAAI,IAAI,EAAE;YACR,IACE,IAAI,CAAC,WAAW,CAAA,CAAE,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,IAC3C,IAAI,CAAC,WAAW,CAAA,CAAE,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,IAC1C,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,EACxB;cACA,IAAI,YAAY,GAAW,GAAG,CAAC,QAAQ,GAAG,IAAI,GAAG,GAAG,CAAC,IAAI;cAEzD,IAAI,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;gBAC3B,YAAY,IAAI,IAAI;eACrB,MAAM;gBACL,MAAM,IAAI,GAAa,GAAG,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC;gBAC9C,IAAI,CAAC,GAAG,CAAA,CAAE;gBACV,MAAM,SAAS,GAAW,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC;gBACxC,YAAY,IAAI,SAAS,GAAG,GAAG,GAAG,IAAI;cACvC;cAED,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC;aACzB,MAAM,IAAI,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;cACnC,MAAM,WAAW,GAAW,GAAG,CAAC,QAAQ,GAAG,IAAI;cAE/C,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC;aACxB,MAAM;cACL,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC;YACjB;UACF;QACF;MACF;IACF;IAED,OAAO,KAAK;EACd;EAEA,SAAS,sBAAsB,CAAC,GAAG,IAAc,EAAA;IAC/C,MAAM,QAAQ,GAAsC,GAAG,CAAC,oBAAoB,CAC1E,MAAM,CACP;IAED,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;MACxC,MAAM,GAAG,GAAoB,QAAQ,CAAC,CAAC,CAAC;MACxC,MAAM,UAAU,GAAyB,CAAC,UAAU,EAAE,UAAU,EAAE,MAAM,CAAC,CACtE,GAAG,CAAE,MAAc,IAAK,GAAG,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,CACjD,MAAM,CAAE,IAAmB,IAAI;QAC9B,IAAI,IAAI,EAAE;UACR,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC;QAC3B;QACD,OAAO,KAAK;MACd,CAAC,CAAC;MAEJ,IAAI,UAAU,CAAC,MAAM,IAAI,UAAU,EAAE;QACnC,MAAM,OAAO,GAAkB,GAAG,CAAC,YAAY,CAAC,SAAS,CAAC;QAC1D,IAAI,OAAO,EAAE;UACX,OAAO,OAAO;QACf;MACF;IACF;IAED,OAAO,EAAE;EACX;EAEA,SAAS,OAAO,CAAA,EAAA;IACd,IAAI,IAAI,GAAW,sBAAsB,CACvC,MAAM,EACN,cAAc,EACd,UAAU,EACV,eAAe,CAChB;IAED,IAAI,CAAC,IAAI,EAAE;MACT,IAAI,GAAG,GAAG,CAAC,KAAK;IACjB;IAED,OAAO,IAAI;EACb;EAEA,SAAS,cAAc,CAAA,EAAA;IACrB,MAAM,WAAW,GAAW,sBAAsB,CAChD,aAAa,EACb,gBAAgB,EAChB,qBAAqB,EACrB,UAAU,CACX;IAED,OAAO,WAAW;EACpB;EAEA,MAAM,IAAI,GAAW,OAAO,CAAA,CAAE;EAC9B,MAAM,WAAW,GAAW,cAAc,CAAA,CAAE;EAC5C,MAAM,GAAG,GAAW,GAAG,CAAC,MAAM;EAC9B,MAAM,KAAK,GAAa,QAAQ,CAAA,CAAE;EAElC,MAAM,IAAI,GAAqB;IAC7B,WAAW;IACX,GAAG;IACH,KAAK;IACL;GACD;EAED,OAAO,IAAI;AACb;AA5HA,OAAA,CAAA,iBAAA,GAAA,iBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getWindowMetadata = void 0;\nconst window_getters_1 = require(\"@walletconnect/window-getters\");\nfunction getWindowMetadata() {\n    let doc;\n    let loc;\n    try {\n        doc = window_getters_1.getDocumentOrThrow();\n        loc = window_getters_1.getLocationOrThrow();\n    }\n    catch (e) {\n        return null;\n    }\n    function getIcons() {\n        const links = doc.getElementsByTagName(\"link\");\n        const icons = [];\n        for (let i = 0; i < links.length; i++) {\n            const link = links[i];\n            const rel = link.getAttribute(\"rel\");\n            if (rel) {\n                if (rel.toLowerCase().indexOf(\"icon\") > -1) {\n                    const href = link.getAttribute(\"href\");\n                    if (href) {\n                        if (href.toLowerCase().indexOf(\"https:\") === -1 &&\n                            href.toLowerCase().indexOf(\"http:\") === -1 &&\n                            href.indexOf(\"//\") !== 0) {\n                            let absoluteHref = loc.protocol + \"//\" + loc.host;\n                            if (href.indexOf(\"/\") === 0) {\n                                absoluteHref += href;\n                            }\n                            else {\n                                const path = loc.pathname.split(\"/\");\n                                path.pop();\n                                const finalPath = path.join(\"/\");\n                                absoluteHref += finalPath + \"/\" + href;\n                            }\n                            icons.push(absoluteHref);\n                        }\n                        else if (href.indexOf(\"//\") === 0) {\n                            const absoluteUrl = loc.protocol + href;\n                            icons.push(absoluteUrl);\n                        }\n                        else {\n                            icons.push(href);\n                        }\n                    }\n                }\n            }\n        }\n        return icons;\n    }\n    function getWindowMetadataOfAny(...args) {\n        const metaTags = doc.getElementsByTagName(\"meta\");\n        for (let i = 0; i < metaTags.length; i++) {\n            const tag = metaTags[i];\n            const attributes = [\"itemprop\", \"property\", \"name\"]\n                .map((target) => tag.getAttribute(target))\n                .filter((attr) => {\n                if (attr) {\n                    return args.includes(attr);\n                }\n                return false;\n            });\n            if (attributes.length && attributes) {\n                const content = tag.getAttribute(\"content\");\n                if (content) {\n                    return content;\n                }\n            }\n        }\n        return \"\";\n    }\n    function getName() {\n        let name = getWindowMetadataOfAny(\"name\", \"og:site_name\", \"og:title\", \"twitter:title\");\n        if (!name) {\n            name = doc.title;\n        }\n        return name;\n    }\n    function getDescription() {\n        const description = getWindowMetadataOfAny(\"description\", \"og:description\", \"twitter:description\", \"keywords\");\n        return description;\n    }\n    const name = getName();\n    const description = getDescription();\n    const url = loc.origin;\n    const icons = getIcons();\n    const meta = {\n        description,\n        url,\n        icons,\n        name,\n    };\n    return meta;\n}\nexports.getWindowMetadata = getWindowMetadata;\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}